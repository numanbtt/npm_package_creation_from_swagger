/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FluentValidationResultsValidationFailure,
  LiveCommandsDirectCallCommandResult,
  LiveCommandsJoinToRoomAsStudentCommandResult,
  LiveCommandsJoinToRoomAsTeacherCommandResult,
  LiveCommandsRequestFreeCallCommandResult,
  LiveQueriesGetCallQueryResult,
  LiveQueriesGetRoomInfoQueryResult,
} from '../models/index';
import {
    FluentValidationResultsValidationFailureFromJSON,
    FluentValidationResultsValidationFailureToJSON,
    LiveCommandsDirectCallCommandResultFromJSON,
    LiveCommandsDirectCallCommandResultToJSON,
    LiveCommandsJoinToRoomAsStudentCommandResultFromJSON,
    LiveCommandsJoinToRoomAsStudentCommandResultToJSON,
    LiveCommandsJoinToRoomAsTeacherCommandResultFromJSON,
    LiveCommandsJoinToRoomAsTeacherCommandResultToJSON,
    LiveCommandsRequestFreeCallCommandResultFromJSON,
    LiveCommandsRequestFreeCallCommandResultToJSON,
    LiveQueriesGetCallQueryResultFromJSON,
    LiveQueriesGetCallQueryResultToJSON,
    LiveQueriesGetRoomInfoQueryResultFromJSON,
    LiveQueriesGetRoomInfoQueryResultToJSON,
} from '../models/index';

export interface DirectCallRequest {
    teacherId?: number;
}

export interface GetCallRequest {
    callId: number;
}

export interface GetRoomInfoRequest {
    roomId: string;
}

export interface JoinToRoomAsStudentRequest {
    appointmentId?: number;
    isScreenShare?: boolean;
}

export interface JoinToRoomAsTeacherRequest {
    appointmentId?: number;
    isScreenShare?: boolean;
}

export interface LeaveFromRoomAsStudentRequest {
    appointmentId?: number;
}

export interface LeaveFromRoomAsTeacherRequest {
    appointmentId?: number;
}

export interface RequestFreeCallRequest {
    teacherId?: number;
}

/**
 * 
 */
export class LiveApi extends runtime.BaseAPI {

    /**
     * Öğrenci, ücretli görüşme talebinde bulunur. Görüşme başlangıcı ile birlikte oda kayıt altına alınmalıdır.
     */
    async directCallRaw(requestParameters: DirectCallRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LiveCommandsDirectCallCommandResult>> {
        const queryParameters: any = {};

        if (requestParameters.teacherId !== undefined) {
            queryParameters['TeacherId'] = requestParameters.teacherId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Live/DirectCall`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LiveCommandsDirectCallCommandResultFromJSON(jsonValue));
    }

    /**
     * Öğrenci, ücretli görüşme talebinde bulunur. Görüşme başlangıcı ile birlikte oda kayıt altına alınmalıdır.
     */
    async directCall(requestParameters: DirectCallRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LiveCommandsDirectCallCommandResult> {
        const response = await this.directCallRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Arama bilgilerini çekmeyi sağlar.
     */
    async getCallRaw(requestParameters: GetCallRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LiveQueriesGetCallQueryResult>> {
        if (requestParameters.callId === null || requestParameters.callId === undefined) {
            throw new runtime.RequiredError('callId','Required parameter requestParameters.callId was null or undefined when calling getCall.');
        }

        const queryParameters: any = {};

        if (requestParameters.callId !== undefined) {
            queryParameters['CallId'] = requestParameters.callId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Live/GetCall`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LiveQueriesGetCallQueryResultFromJSON(jsonValue));
    }

    /**
     * Arama bilgilerini çekmeyi sağlar.
     */
    async getCall(requestParameters: GetCallRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LiveQueriesGetCallQueryResult> {
        const response = await this.getCallRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Canlı yayın odasının bilgilerini çekmeyi sağlar.
     */
    async getRoomInfoRaw(requestParameters: GetRoomInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LiveQueriesGetRoomInfoQueryResult>> {
        if (requestParameters.roomId === null || requestParameters.roomId === undefined) {
            throw new runtime.RequiredError('roomId','Required parameter requestParameters.roomId was null or undefined when calling getRoomInfo.');
        }

        const queryParameters: any = {};

        if (requestParameters.roomId !== undefined) {
            queryParameters['RoomId'] = requestParameters.roomId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Live/GetRoomInfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LiveQueriesGetRoomInfoQueryResultFromJSON(jsonValue));
    }

    /**
     * Canlı yayın odasının bilgilerini çekmeyi sağlar.
     */
    async getRoomInfo(requestParameters: GetRoomInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LiveQueriesGetRoomInfoQueryResult> {
        const response = await this.getRoomInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Öğrencinin vakti gelmiş randevusuna katılım gerçekleştirmesini sağlar.
     */
    async joinToRoomAsStudentRaw(requestParameters: JoinToRoomAsStudentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LiveCommandsJoinToRoomAsStudentCommandResult>> {
        const queryParameters: any = {};

        if (requestParameters.appointmentId !== undefined) {
            queryParameters['AppointmentId'] = requestParameters.appointmentId;
        }

        if (requestParameters.isScreenShare !== undefined) {
            queryParameters['IsScreenShare'] = requestParameters.isScreenShare;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Live/JoinToRoomAsStudent`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LiveCommandsJoinToRoomAsStudentCommandResultFromJSON(jsonValue));
    }

    /**
     * Öğrencinin vakti gelmiş randevusuna katılım gerçekleştirmesini sağlar.
     */
    async joinToRoomAsStudent(requestParameters: JoinToRoomAsStudentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LiveCommandsJoinToRoomAsStudentCommandResult> {
        const response = await this.joinToRoomAsStudentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Öğretmenin vakti gelmiş randevusuna katılım gerçekleştirmesini sağlar.
     */
    async joinToRoomAsTeacherRaw(requestParameters: JoinToRoomAsTeacherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LiveCommandsJoinToRoomAsTeacherCommandResult>> {
        const queryParameters: any = {};

        if (requestParameters.appointmentId !== undefined) {
            queryParameters['AppointmentId'] = requestParameters.appointmentId;
        }

        if (requestParameters.isScreenShare !== undefined) {
            queryParameters['IsScreenShare'] = requestParameters.isScreenShare;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Live/JoinToRoomAsTeacher`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LiveCommandsJoinToRoomAsTeacherCommandResultFromJSON(jsonValue));
    }

    /**
     * Öğretmenin vakti gelmiş randevusuna katılım gerçekleştirmesini sağlar.
     */
    async joinToRoomAsTeacher(requestParameters: JoinToRoomAsTeacherRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LiveCommandsJoinToRoomAsTeacherCommandResult> {
        const response = await this.joinToRoomAsTeacherRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Öğrencinin canlı yayından ayrılmasını sağlar.
     */
    async leaveFromRoomAsStudentRaw(requestParameters: LeaveFromRoomAsStudentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.appointmentId !== undefined) {
            queryParameters['appointmentId'] = requestParameters.appointmentId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Live/LeaveFromRoomAsStudent`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Öğrencinin canlı yayından ayrılmasını sağlar.
     */
    async leaveFromRoomAsStudent(requestParameters: LeaveFromRoomAsStudentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.leaveFromRoomAsStudentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Öğretmenin canlı yayından ayrılmasını sağlar.
     */
    async leaveFromRoomAsTeacherRaw(requestParameters: LeaveFromRoomAsTeacherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.appointmentId !== undefined) {
            queryParameters['appointmentId'] = requestParameters.appointmentId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Live/LeaveFromRoomAsTeacher`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Öğretmenin canlı yayından ayrılmasını sağlar.
     */
    async leaveFromRoomAsTeacher(requestParameters: LeaveFromRoomAsTeacherRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.leaveFromRoomAsTeacherRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Öğrenci, ücretsiz görüşme talebinde bulunur. Görüşme başlangıcı ile birlikte oda kayıt altına alınmalıdır.
     */
    async requestFreeCallRaw(requestParameters: RequestFreeCallRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LiveCommandsRequestFreeCallCommandResult>> {
        const queryParameters: any = {};

        if (requestParameters.teacherId !== undefined) {
            queryParameters['TeacherId'] = requestParameters.teacherId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Live/RequestFreeCall`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LiveCommandsRequestFreeCallCommandResultFromJSON(jsonValue));
    }

    /**
     * Öğrenci, ücretsiz görüşme talebinde bulunur. Görüşme başlangıcı ile birlikte oda kayıt altına alınmalıdır.
     */
    async requestFreeCall(requestParameters: RequestFreeCallRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LiveCommandsRequestFreeCallCommandResult> {
        const response = await this.requestFreeCallRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
