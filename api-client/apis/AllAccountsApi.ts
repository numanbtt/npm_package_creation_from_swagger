/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AllAccountsCommandsRecoverPasswordCommandResult,
  FluentValidationResultsValidationFailure,
} from '../models/index';
import {
    AllAccountsCommandsRecoverPasswordCommandResultFromJSON,
    AllAccountsCommandsRecoverPasswordCommandResultToJSON,
    FluentValidationResultsValidationFailureFromJSON,
    FluentValidationResultsValidationFailureToJSON,
} from '../models/index';

export interface ChangePasswordRequest {
    newPassword?: string;
}

export interface LostPasswordRequest {
    email?: string;
}

export interface RecoverPasswordRequest {
    email?: string;
    recoverCode?: string;
    newPassword?: string;
}

/**
 * 
 */
export class AllAccountsApi extends runtime.BaseAPI {

    /**
     * Giriş yapmış hesabın şifresini değiştirmesini sağlar.
     */
    async changePasswordRaw(requestParameters: ChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.newPassword !== undefined) {
            queryParameters['NewPassword'] = requestParameters.newPassword;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/AllAccounts/ChangeMyPassword`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Giriş yapmış hesabın şifresini değiştirmesini sağlar.
     */
    async changePassword(requestParameters: ChangePasswordRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changePasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sosyal hesaplar ile giriş yapıldığında, kullanıcı browser\'ının dönüş yaptığı url\'dir.
     */
    async loginResultRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/AllAccounts/LoginResult`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Sosyal hesaplar ile giriş yapıldığında, kullanıcı browser\'ının dönüş yaptığı url\'dir.
     */
    async loginResult(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.loginResultRaw(initOverrides);
        return await response.value();
    }

    /**
     * Misafir kullanıcının unuttuğu şifresini yenileyebilmesini sağlar. Dikkat: Sosyal medya girişlerinde bu metodun çalışmaması gerekir.
     */
    async lostPasswordRaw(requestParameters: LostPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.email !== undefined) {
            queryParameters['Email'] = requestParameters.email;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/AllAccounts/LostPassword`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Misafir kullanıcının unuttuğu şifresini yenileyebilmesini sağlar. Dikkat: Sosyal medya girişlerinde bu metodun çalışmaması gerekir.
     */
    async lostPassword(requestParameters: LostPasswordRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.lostPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Hesap şifresinin kurtarılmasını sağlar.
     */
    async recoverPasswordRaw(requestParameters: RecoverPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AllAccountsCommandsRecoverPasswordCommandResult>> {
        const queryParameters: any = {};

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        if (requestParameters.recoverCode !== undefined) {
            queryParameters['RecoverCode'] = requestParameters.recoverCode;
        }

        if (requestParameters.newPassword !== undefined) {
            queryParameters['NewPassword'] = requestParameters.newPassword;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/AllAccounts/RecoverPassword`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AllAccountsCommandsRecoverPasswordCommandResultFromJSON(jsonValue));
    }

    /**
     * Hesap şifresinin kurtarılmasını sağlar.
     */
    async recoverPassword(requestParameters: RecoverPasswordRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AllAccountsCommandsRecoverPasswordCommandResult> {
        const response = await this.recoverPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
