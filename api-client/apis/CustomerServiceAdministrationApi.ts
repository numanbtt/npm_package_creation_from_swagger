/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CustomerServiceAdministrationQueriesGetComplaintQueryResult,
  CustomerServiceAdministrationQueriesListComplaintsQueryResult,
  FluentValidationResultsValidationFailure,
} from '../models/index';
import {
    CustomerServiceAdministrationQueriesGetComplaintQueryResultFromJSON,
    CustomerServiceAdministrationQueriesGetComplaintQueryResultToJSON,
    CustomerServiceAdministrationQueriesListComplaintsQueryResultFromJSON,
    CustomerServiceAdministrationQueriesListComplaintsQueryResultToJSON,
    FluentValidationResultsValidationFailureFromJSON,
    FluentValidationResultsValidationFailureToJSON,
} from '../models/index';

export interface ChangeComplaintStateToCompletedRequest {
    complaintId?: number;
}

export interface ChangeComplaintStateToNotSeenYetRequest {
    complaintId?: number;
}

export interface ChangeComplaintStateToRejectedRequest {
    complaintId?: number;
}

export interface ChangeComplaintStateToSeenRequest {
    complaintId?: number;
}

export interface GetComplaintRequest {
    complaintId: number;
}

export interface ListComplaintsRequest {
    page?: number;
    itemPerPage?: number;
    filtersSearchKeyword?: string;
    filtersListComplaintsRoles?: string;
    filtersListComplaintsStates?: string;
}

/**
 * 
 */
export class CustomerServiceAdministrationApi extends runtime.BaseAPI {

    /**
     * Şikayetin durumunu tamamlandı olarak değiştirmeyi sağlar
     */
    async changeComplaintStateToCompletedRaw(requestParameters: ChangeComplaintStateToCompletedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.complaintId !== undefined) {
            queryParameters['ComplaintId'] = requestParameters.complaintId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/CustomerServiceAdministration/ChangeComplaintStateToCompleted`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Şikayetin durumunu tamamlandı olarak değiştirmeyi sağlar
     */
    async changeComplaintStateToCompleted(requestParameters: ChangeComplaintStateToCompletedRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changeComplaintStateToCompletedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Şikayetin durumunu henüz işlem yapılmadı olarak değiştirmeyi sağlar
     */
    async changeComplaintStateToNotSeenYetRaw(requestParameters: ChangeComplaintStateToNotSeenYetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.complaintId !== undefined) {
            queryParameters['ComplaintId'] = requestParameters.complaintId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/CustomerServiceAdministration/ChangeComplaintStateToNotSeenYet`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Şikayetin durumunu henüz işlem yapılmadı olarak değiştirmeyi sağlar
     */
    async changeComplaintStateToNotSeenYet(requestParameters: ChangeComplaintStateToNotSeenYetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changeComplaintStateToNotSeenYetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Şikayetin durumunu reddedildi olarak değiştirmeyi sağlar
     */
    async changeComplaintStateToRejectedRaw(requestParameters: ChangeComplaintStateToRejectedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.complaintId !== undefined) {
            queryParameters['ComplaintId'] = requestParameters.complaintId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/CustomerServiceAdministration/ChangeComplaintStateToRejected`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Şikayetin durumunu reddedildi olarak değiştirmeyi sağlar
     */
    async changeComplaintStateToRejected(requestParameters: ChangeComplaintStateToRejectedRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changeComplaintStateToRejectedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Şikayetin durumunu görüldü olarak değiştirmeyi sağlar
     */
    async changeComplaintStateToSeenRaw(requestParameters: ChangeComplaintStateToSeenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.complaintId !== undefined) {
            queryParameters['ComplaintId'] = requestParameters.complaintId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/CustomerServiceAdministration/ChangeComplaintStateToSeen`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Şikayetin durumunu görüldü olarak değiştirmeyi sağlar
     */
    async changeComplaintStateToSeen(requestParameters: ChangeComplaintStateToSeenRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changeComplaintStateToSeenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Şikayetin detayını getirmeyi sağlar
     */
    async getComplaintRaw(requestParameters: GetComplaintRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerServiceAdministrationQueriesGetComplaintQueryResult>> {
        if (requestParameters.complaintId === null || requestParameters.complaintId === undefined) {
            throw new runtime.RequiredError('complaintId','Required parameter requestParameters.complaintId was null or undefined when calling getComplaint.');
        }

        const queryParameters: any = {};

        if (requestParameters.complaintId !== undefined) {
            queryParameters['ComplaintId'] = requestParameters.complaintId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/CustomerServiceAdministration/GetComplaint`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerServiceAdministrationQueriesGetComplaintQueryResultFromJSON(jsonValue));
    }

    /**
     * Şikayetin detayını getirmeyi sağlar
     */
    async getComplaint(requestParameters: GetComplaintRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerServiceAdministrationQueriesGetComplaintQueryResult> {
        const response = await this.getComplaintRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Şikayetlerin listesini getirmeyi sağlar
     */
    async listComplaintsRaw(requestParameters: ListComplaintsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerServiceAdministrationQueriesListComplaintsQueryResult>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.itemPerPage !== undefined) {
            queryParameters['ItemPerPage'] = requestParameters.itemPerPage;
        }

        if (requestParameters.filtersSearchKeyword !== undefined) {
            queryParameters['Filters.SearchKeyword'] = requestParameters.filtersSearchKeyword;
        }

        if (requestParameters.filtersListComplaintsRoles !== undefined) {
            queryParameters['Filters.ListComplaintsRoles'] = requestParameters.filtersListComplaintsRoles;
        }

        if (requestParameters.filtersListComplaintsStates !== undefined) {
            queryParameters['Filters.ListComplaintsStates'] = requestParameters.filtersListComplaintsStates;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/CustomerServiceAdministration/ListComplaints`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerServiceAdministrationQueriesListComplaintsQueryResultFromJSON(jsonValue));
    }

    /**
     * Şikayetlerin listesini getirmeyi sağlar
     */
    async listComplaints(requestParameters: ListComplaintsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerServiceAdministrationQueriesListComplaintsQueryResult> {
        const response = await this.listComplaintsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
