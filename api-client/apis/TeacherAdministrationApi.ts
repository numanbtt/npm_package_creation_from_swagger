/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AdvancerCommonDropDownModelIntCustom,
  FluentValidationResultsValidationFailure,
  TeacherAdministrationCommandsChangeProfilePictureCommandResult,
  TeacherAdministrationCommandsSpecalities,
  TeacherAdministrationQueriesGetDetailsQueryResult,
  TeacherAdministrationQueriesListQueryResult,
  TeacherAdministrationQueriesListSalariesQueryResult,
} from '../models/index';
import {
    AdvancerCommonDropDownModelIntCustomFromJSON,
    AdvancerCommonDropDownModelIntCustomToJSON,
    FluentValidationResultsValidationFailureFromJSON,
    FluentValidationResultsValidationFailureToJSON,
    TeacherAdministrationCommandsChangeProfilePictureCommandResultFromJSON,
    TeacherAdministrationCommandsChangeProfilePictureCommandResultToJSON,
    TeacherAdministrationCommandsSpecalitiesFromJSON,
    TeacherAdministrationCommandsSpecalitiesToJSON,
    TeacherAdministrationQueriesGetDetailsQueryResultFromJSON,
    TeacherAdministrationQueriesGetDetailsQueryResultToJSON,
    TeacherAdministrationQueriesListQueryResultFromJSON,
    TeacherAdministrationQueriesListQueryResultToJSON,
    TeacherAdministrationQueriesListSalariesQueryResultFromJSON,
    TeacherAdministrationQueriesListSalariesQueryResultToJSON,
} from '../models/index';

export interface ApproveTeacherAccountRequest {
    teacherId?: number;
}

export interface ApproveTeacherProfilePictureRequest {
    teacherId?: number;
}

export interface BanTeacherRequest {
    teacherId?: number;
    reason?: string;
}

export interface ChangeTeacherDescriptionRequest {
    teacherId?: number;
    newDescription?: string;
    reason?: string;
}

export interface ChangeTeacherEmailRequest {
    teacherId?: number;
    newEmail?: string;
    reason?: string;
}

export interface ChangeTeacherIbanDetailsRequest {
    teacherId?: number;
    reason?: string;
    bankName?: string;
    accountHolderName?: string;
    iban?: string;
}

export interface ChangeTeacherNameRequest {
    teacherId?: number;
    newName?: string;
    reason?: string;
}

export interface ChangeTeacherPasswordRequest {
    teacherId?: number;
    reason?: string;
    newPassword?: string;
}

export interface ChangeTeacherPhoneNumberRequest {
    teacherId?: number;
    newPhoneNumber?: string;
    reason?: string;
}

export interface ChangeTeacherProfilePictureRequest {
    teacherId?: number;
    reason?: string;
    newProfilePicture?: Blob;
}

export interface ChangeTeacherSpecalitiesRequest {
    teacherId?: number;
    reason?: string;
    teacherAdministrationCommandsSpecalities?: TeacherAdministrationCommandsSpecalities;
}

export interface ChangeTeacherVisibleRateRequest {
    teacherId?: number;
    reason?: string;
    newRate?: number;
}

export interface ChangeTeacherYoutubeUrlRequest {
    teacherId?: number;
    reason?: string;
    newYoutubeUrl?: string;
}

export interface DeleteTeacherAccountDueGDPRRequest {
    teacherId?: number;
    reason?: string;
}

export interface GetTeacherDetailsForAdministrationRequest {
    teacherId: number;
}

export interface ListTeacherSalariesRequest {
    searchKeyword?: string;
    page?: number;
}

export interface ListTeachersForManagementRequest {
    searchKeyword?: string;
    approvementState?: string;
    page?: number;
}

export interface RejectTeacherAccountRequest {
    teacherId?: number;
    reason?: string;
}

export interface RejectTeacherProfilePictureRequest {
    teacherId?: number;
    reason?: string;
}

export interface SalariesStatusUpdateRequest {
    teacherSalariesId?: number;
    paymentStatus?: string;
}

export interface TeacherHourlyRateRequest {
    teacherId?: number;
    hourlyRate?: number;
}

export interface TeacherPayRequest {
    teacherId?: number;
    mints?: number;
    hours?: number;
    hourlyRate?: number;
    amount?: number;
    paymentStatus?: string;
    appointmentDetail?: string;
}

export interface UnBanTeacherRequest {
    teacherId?: number;
    reason?: string;
}

export interface ZoomCreateAccountRequest {
    teacherId?: number;
}

/**
 * 
 */
export class TeacherAdministrationApi extends runtime.BaseAPI {

    /**
     * Bir öğretmenin hesabını onaylar. Onaylanan öğretmen artık sisteme giriş yapabilir.
     */
    async approveTeacherAccountRaw(requestParameters: ApproveTeacherAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.teacherId !== undefined) {
            queryParameters['TeacherId'] = requestParameters.teacherId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/TeacherAdministration/ApproveAccount`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Bir öğretmenin hesabını onaylar. Onaylanan öğretmen artık sisteme giriş yapabilir.
     */
    async approveTeacherAccount(requestParameters: ApproveTeacherAccountRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.approveTeacherAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bir öğretmenin profil fotoğrafını onaylar.
     */
    async approveTeacherProfilePictureRaw(requestParameters: ApproveTeacherProfilePictureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.teacherId !== undefined) {
            queryParameters['TeacherId'] = requestParameters.teacherId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/TeacherAdministration/ApproveProfilePicture`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Bir öğretmenin profil fotoğrafını onaylar.
     */
    async approveTeacherProfilePicture(requestParameters: ApproveTeacherProfilePictureRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.approveTeacherProfilePictureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bir öğretmeni siteden yasaklar. Artık o hesap ve öğretmenin kullandığı ip\'ler siteye giriş yapamaz.
     */
    async banTeacherRaw(requestParameters: BanTeacherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.teacherId !== undefined) {
            queryParameters['TeacherId'] = requestParameters.teacherId;
        }

        if (requestParameters.reason !== undefined) {
            queryParameters['Reason'] = requestParameters.reason;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/TeacherAdministration/Ban`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Bir öğretmeni siteden yasaklar. Artık o hesap ve öğretmenin kullandığı ip\'ler siteye giriş yapamaz.
     */
    async banTeacher(requestParameters: BanTeacherRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.banTeacherRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bir öğretmenin açıklamasını değiştirir.
     */
    async changeTeacherDescriptionRaw(requestParameters: ChangeTeacherDescriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.teacherId !== undefined) {
            queryParameters['TeacherId'] = requestParameters.teacherId;
        }

        if (requestParameters.newDescription !== undefined) {
            queryParameters['NewDescription'] = requestParameters.newDescription;
        }

        if (requestParameters.reason !== undefined) {
            queryParameters['Reason'] = requestParameters.reason;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/TeacherAdministration/ChangeDescription`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Bir öğretmenin açıklamasını değiştirir.
     */
    async changeTeacherDescription(requestParameters: ChangeTeacherDescriptionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changeTeacherDescriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bir öğretmenin e-posta adresini değiştirir.
     */
    async changeTeacherEmailRaw(requestParameters: ChangeTeacherEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.teacherId !== undefined) {
            queryParameters['TeacherId'] = requestParameters.teacherId;
        }

        if (requestParameters.newEmail !== undefined) {
            queryParameters['NewEmail'] = requestParameters.newEmail;
        }

        if (requestParameters.reason !== undefined) {
            queryParameters['Reason'] = requestParameters.reason;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/TeacherAdministration/ChangeEmail`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Bir öğretmenin e-posta adresini değiştirir.
     */
    async changeTeacherEmail(requestParameters: ChangeTeacherEmailRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changeTeacherEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bir öğretmenin iban bilgilerini değiştirir.
     */
    async changeTeacherIbanDetailsRaw(requestParameters: ChangeTeacherIbanDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.teacherId !== undefined) {
            queryParameters['TeacherId'] = requestParameters.teacherId;
        }

        if (requestParameters.reason !== undefined) {
            queryParameters['Reason'] = requestParameters.reason;
        }

        if (requestParameters.bankName !== undefined) {
            queryParameters['BankName'] = requestParameters.bankName;
        }

        if (requestParameters.accountHolderName !== undefined) {
            queryParameters['AccountHolderName'] = requestParameters.accountHolderName;
        }

        if (requestParameters.iban !== undefined) {
            queryParameters['Iban'] = requestParameters.iban;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/TeacherAdministration/ChangeIbanDetails`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Bir öğretmenin iban bilgilerini değiştirir.
     */
    async changeTeacherIbanDetails(requestParameters: ChangeTeacherIbanDetailsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changeTeacherIbanDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bir öğretmenin ismini değiştirir.
     */
    async changeTeacherNameRaw(requestParameters: ChangeTeacherNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.teacherId !== undefined) {
            queryParameters['TeacherId'] = requestParameters.teacherId;
        }

        if (requestParameters.newName !== undefined) {
            queryParameters['NewName'] = requestParameters.newName;
        }

        if (requestParameters.reason !== undefined) {
            queryParameters['Reason'] = requestParameters.reason;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/TeacherAdministration/ChangeName`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Bir öğretmenin ismini değiştirir.
     */
    async changeTeacherName(requestParameters: ChangeTeacherNameRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changeTeacherNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bir öğretmenin şifresini değiştirir.
     */
    async changeTeacherPasswordRaw(requestParameters: ChangeTeacherPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.teacherId !== undefined) {
            queryParameters['TeacherId'] = requestParameters.teacherId;
        }

        if (requestParameters.reason !== undefined) {
            queryParameters['Reason'] = requestParameters.reason;
        }

        if (requestParameters.newPassword !== undefined) {
            queryParameters['NewPassword'] = requestParameters.newPassword;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/TeacherAdministration/ChangePassword`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Bir öğretmenin şifresini değiştirir.
     */
    async changeTeacherPassword(requestParameters: ChangeTeacherPasswordRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changeTeacherPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bir öğretmenin telefon numarasını değiştirir.
     */
    async changeTeacherPhoneNumberRaw(requestParameters: ChangeTeacherPhoneNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.teacherId !== undefined) {
            queryParameters['TeacherId'] = requestParameters.teacherId;
        }

        if (requestParameters.newPhoneNumber !== undefined) {
            queryParameters['NewPhoneNumber'] = requestParameters.newPhoneNumber;
        }

        if (requestParameters.reason !== undefined) {
            queryParameters['Reason'] = requestParameters.reason;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/TeacherAdministration/ChangePhoneNumber`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Bir öğretmenin telefon numarasını değiştirir.
     */
    async changeTeacherPhoneNumber(requestParameters: ChangeTeacherPhoneNumberRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changeTeacherPhoneNumberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bir öğretmenin profil fotoğrafını değiştirir.
     */
    async changeTeacherProfilePictureRaw(requestParameters: ChangeTeacherProfilePictureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeacherAdministrationCommandsChangeProfilePictureCommandResult>> {
        const queryParameters: any = {};

        if (requestParameters.teacherId !== undefined) {
            queryParameters['TeacherId'] = requestParameters.teacherId;
        }

        if (requestParameters.reason !== undefined) {
            queryParameters['Reason'] = requestParameters.reason;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.newProfilePicture !== undefined) {
            formParams.append('NewProfilePicture', requestParameters.newProfilePicture as any);
        }

        const response = await this.request({
            path: `/api/TeacherAdministration/ChangeProfilePicture`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeacherAdministrationCommandsChangeProfilePictureCommandResultFromJSON(jsonValue));
    }

    /**
     * Bir öğretmenin profil fotoğrafını değiştirir.
     */
    async changeTeacherProfilePicture(requestParameters: ChangeTeacherProfilePictureRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeacherAdministrationCommandsChangeProfilePictureCommandResult> {
        const response = await this.changeTeacherProfilePictureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bir öğretmenin uzmanlıklarını değiştirir.
     */
    async changeTeacherSpecalitiesRaw(requestParameters: ChangeTeacherSpecalitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.teacherId !== undefined) {
            queryParameters['TeacherId'] = requestParameters.teacherId;
        }

        if (requestParameters.reason !== undefined) {
            queryParameters['Reason'] = requestParameters.reason;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/TeacherAdministration/ChangeSpecalities`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TeacherAdministrationCommandsSpecalitiesToJSON(requestParameters.teacherAdministrationCommandsSpecalities),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Bir öğretmenin uzmanlıklarını değiştirir.
     */
    async changeTeacherSpecalities(requestParameters: ChangeTeacherSpecalitiesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changeTeacherSpecalitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bir öğretmenin görünen puanını değiştirir. 0.5 ve katları olması gerekir. Şayet 0 olarak ayarlanırsa gerçek puanı gösterilir.
     */
    async changeTeacherVisibleRateRaw(requestParameters: ChangeTeacherVisibleRateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.teacherId !== undefined) {
            queryParameters['TeacherId'] = requestParameters.teacherId;
        }

        if (requestParameters.reason !== undefined) {
            queryParameters['Reason'] = requestParameters.reason;
        }

        if (requestParameters.newRate !== undefined) {
            queryParameters['NewRate'] = requestParameters.newRate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/TeacherAdministration/ChangeVisibleRate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Bir öğretmenin görünen puanını değiştirir. 0.5 ve katları olması gerekir. Şayet 0 olarak ayarlanırsa gerçek puanı gösterilir.
     */
    async changeTeacherVisibleRate(requestParameters: ChangeTeacherVisibleRateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changeTeacherVisibleRateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bir öğretmenin youtube video url\'sini değiştirir.
     */
    async changeTeacherYoutubeUrlRaw(requestParameters: ChangeTeacherYoutubeUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.teacherId !== undefined) {
            queryParameters['TeacherId'] = requestParameters.teacherId;
        }

        if (requestParameters.reason !== undefined) {
            queryParameters['Reason'] = requestParameters.reason;
        }

        if (requestParameters.newYoutubeUrl !== undefined) {
            queryParameters['NewYoutubeUrl'] = requestParameters.newYoutubeUrl;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/TeacherAdministration/ChangeYoutubeVideoUrl`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Bir öğretmenin youtube video url\'sini değiştirir.
     */
    async changeTeacherYoutubeUrl(requestParameters: ChangeTeacherYoutubeUrlRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changeTeacherYoutubeUrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bir öğretmenin hesabını siteden siler.
     */
    async deleteTeacherAccountDueGDPRRaw(requestParameters: DeleteTeacherAccountDueGDPRRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.teacherId !== undefined) {
            queryParameters['TeacherId'] = requestParameters.teacherId;
        }

        if (requestParameters.reason !== undefined) {
            queryParameters['Reason'] = requestParameters.reason;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/TeacherAdministration/DeleteAccountDueGDPR`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Bir öğretmenin hesabını siteden siler.
     */
    async deleteTeacherAccountDueGDPR(requestParameters: DeleteTeacherAccountDueGDPRRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteTeacherAccountDueGDPRRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Öğretmenin detayını getirir.
     */
    async getTeacherDetailsForAdministrationRaw(requestParameters: GetTeacherDetailsForAdministrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeacherAdministrationQueriesGetDetailsQueryResult>> {
        if (requestParameters.teacherId === null || requestParameters.teacherId === undefined) {
            throw new runtime.RequiredError('teacherId','Required parameter requestParameters.teacherId was null or undefined when calling getTeacherDetailsForAdministration.');
        }

        const queryParameters: any = {};

        if (requestParameters.teacherId !== undefined) {
            queryParameters['TeacherId'] = requestParameters.teacherId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/TeacherAdministration/GetTeacherDetails`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeacherAdministrationQueriesGetDetailsQueryResultFromJSON(jsonValue));
    }

    /**
     * Öğretmenin detayını getirir.
     */
    async getTeacherDetailsForAdministration(requestParameters: GetTeacherDetailsForAdministrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeacherAdministrationQueriesGetDetailsQueryResult> {
        const response = await this.getTeacherDetailsForAdministrationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listTeacherSalariesRaw(requestParameters: ListTeacherSalariesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeacherAdministrationQueriesListSalariesQueryResult>> {
        const queryParameters: any = {};

        if (requestParameters.searchKeyword !== undefined) {
            queryParameters['SearchKeyword'] = requestParameters.searchKeyword;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/TeacherAdministration/ListTeacherSalaries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeacherAdministrationQueriesListSalariesQueryResultFromJSON(jsonValue));
    }

    /**
     */
    async listTeacherSalaries(requestParameters: ListTeacherSalariesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeacherAdministrationQueriesListSalariesQueryResult> {
        const response = await this.listTeacherSalariesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sistemdeki öğretmenleri listeler
     */
    async listTeachersForManagementRaw(requestParameters: ListTeachersForManagementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeacherAdministrationQueriesListQueryResult>> {
        const queryParameters: any = {};

        if (requestParameters.searchKeyword !== undefined) {
            queryParameters['SearchKeyword'] = requestParameters.searchKeyword;
        }

        if (requestParameters.approvementState !== undefined) {
            queryParameters['ApprovementState'] = requestParameters.approvementState;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/TeacherAdministration/List`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeacherAdministrationQueriesListQueryResultFromJSON(jsonValue));
    }

    /**
     * Sistemdeki öğretmenleri listeler
     */
    async listTeachersForManagement(requestParameters: ListTeachersForManagementRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeacherAdministrationQueriesListQueryResult> {
        const response = await this.listTeachersForManagementRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bir öğretmenin hesabını kabul etmez. Öğretmene sebebiyle birlikte düzenleme bildirimi atılabilir.  Hesap silinebilir.
     */
    async rejectTeacherAccountRaw(requestParameters: RejectTeacherAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.teacherId !== undefined) {
            queryParameters['TeacherId'] = requestParameters.teacherId;
        }

        if (requestParameters.reason !== undefined) {
            queryParameters['Reason'] = requestParameters.reason;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/TeacherAdministration/RejectAccount`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Bir öğretmenin hesabını kabul etmez. Öğretmene sebebiyle birlikte düzenleme bildirimi atılabilir.  Hesap silinebilir.
     */
    async rejectTeacherAccount(requestParameters: RejectTeacherAccountRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.rejectTeacherAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bir öğretmenin profil fotoğrafını kabul etmez.
     */
    async rejectTeacherProfilePictureRaw(requestParameters: RejectTeacherProfilePictureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.teacherId !== undefined) {
            queryParameters['TeacherId'] = requestParameters.teacherId;
        }

        if (requestParameters.reason !== undefined) {
            queryParameters['Reason'] = requestParameters.reason;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/TeacherAdministration/RejectProfilePicture`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Bir öğretmenin profil fotoğrafını kabul etmez.
     */
    async rejectTeacherProfilePicture(requestParameters: RejectTeacherProfilePictureRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.rejectTeacherProfilePictureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async salariesStatusUpdateRaw(requestParameters: SalariesStatusUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        if (requestParameters.teacherSalariesId !== undefined) {
            queryParameters['TeacherSalariesId'] = requestParameters.teacherSalariesId;
        }

        if (requestParameters.paymentStatus !== undefined) {
            queryParameters['paymentStatus'] = requestParameters.paymentStatus;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/TeacherAdministration/SalariesStatusUpdate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async salariesStatusUpdate(requestParameters: SalariesStatusUpdateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.salariesStatusUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async teacherHourlyRateRaw(requestParameters: TeacherHourlyRateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        if (requestParameters.teacherId !== undefined) {
            queryParameters['TeacherId'] = requestParameters.teacherId;
        }

        if (requestParameters.hourlyRate !== undefined) {
            queryParameters['HourlyRate'] = requestParameters.hourlyRate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/TeacherAdministration/TeacherHourlyRate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async teacherHourlyRate(requestParameters: TeacherHourlyRateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.teacherHourlyRateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async teacherPayRaw(requestParameters: TeacherPayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        if (requestParameters.teacherId !== undefined) {
            queryParameters['TeacherId'] = requestParameters.teacherId;
        }

        if (requestParameters.mints !== undefined) {
            queryParameters['Mints'] = requestParameters.mints;
        }

        if (requestParameters.hours !== undefined) {
            queryParameters['Hours'] = requestParameters.hours;
        }

        if (requestParameters.hourlyRate !== undefined) {
            queryParameters['HourlyRate'] = requestParameters.hourlyRate;
        }

        if (requestParameters.amount !== undefined) {
            queryParameters['Amount'] = requestParameters.amount;
        }

        if (requestParameters.paymentStatus !== undefined) {
            queryParameters['PaymentStatus'] = requestParameters.paymentStatus;
        }

        if (requestParameters.appointmentDetail !== undefined) {
            queryParameters['AppointmentDetail'] = requestParameters.appointmentDetail;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/TeacherAdministration/TeacherPay`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async teacherPay(requestParameters: TeacherPayRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.teacherPayRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async teachersDropdownRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AdvancerCommonDropDownModelIntCustom>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/TeacherAdministration/TeachersDropdown`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AdvancerCommonDropDownModelIntCustomFromJSON));
    }

    /**
     */
    async teachersDropdown(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AdvancerCommonDropDownModelIntCustom>> {
        const response = await this.teachersDropdownRaw(initOverrides);
        return await response.value();
    }

    /**
     * Bir öğretmeni siteden yasaklamasını kaldırır.
     */
    async unBanTeacherRaw(requestParameters: UnBanTeacherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.teacherId !== undefined) {
            queryParameters['TeacherId'] = requestParameters.teacherId;
        }

        if (requestParameters.reason !== undefined) {
            queryParameters['Reason'] = requestParameters.reason;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/TeacherAdministration/UnBan`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Bir öğretmeni siteden yasaklamasını kaldırır.
     */
    async unBanTeacher(requestParameters: UnBanTeacherRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.unBanTeacherRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async zoomCreateAccountRaw(requestParameters: ZoomCreateAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        if (requestParameters.teacherId !== undefined) {
            queryParameters['TeacherId'] = requestParameters.teacherId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/TeacherAdministration/ZoomCreateAccount`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async zoomCreateAccount(requestParameters: ZoomCreateAccountRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.zoomCreateAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
