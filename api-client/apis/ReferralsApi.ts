/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FluentValidationResultsValidationFailure,
  ReferralCommandsCreateCommand,
  ReferralCommandsCreateCommandResult,
  ReferralCommandsUpdateCommand,
  ReferralCommandsUpdateStatusCommand,
  ReferralQueriesListQueryResult,
  ReferralQueriesListStudentQueryResult,
  ReferralQueriesReferralDetails,
  ReferralQueriesReferralDropdown,
  ReferralQueriesReferralValidationDetails,
} from '../models/index';
import {
    FluentValidationResultsValidationFailureFromJSON,
    FluentValidationResultsValidationFailureToJSON,
    ReferralCommandsCreateCommandFromJSON,
    ReferralCommandsCreateCommandToJSON,
    ReferralCommandsCreateCommandResultFromJSON,
    ReferralCommandsCreateCommandResultToJSON,
    ReferralCommandsUpdateCommandFromJSON,
    ReferralCommandsUpdateCommandToJSON,
    ReferralCommandsUpdateStatusCommandFromJSON,
    ReferralCommandsUpdateStatusCommandToJSON,
    ReferralQueriesListQueryResultFromJSON,
    ReferralQueriesListQueryResultToJSON,
    ReferralQueriesListStudentQueryResultFromJSON,
    ReferralQueriesListStudentQueryResultToJSON,
    ReferralQueriesReferralDetailsFromJSON,
    ReferralQueriesReferralDetailsToJSON,
    ReferralQueriesReferralDropdownFromJSON,
    ReferralQueriesReferralDropdownToJSON,
    ReferralQueriesReferralValidationDetailsFromJSON,
    ReferralQueriesReferralValidationDetailsToJSON,
} from '../models/index';

export interface CreateReferralRequest {
    referralCommandsCreateCommand?: ReferralCommandsCreateCommand;
}

export interface DeleteReferralRequest {
    id?: number;
}

export interface GetDetailsByIdReferralRequest {
    id?: number;
}

export interface ListReferralRequest {
    page?: number;
    itemPerPage?: number;
    searchKeyword?: string;
}

export interface ListReferralStudentsRequest {
    page?: number;
    itemPerPage?: number;
    searchKeyword?: string;
    id?: number;
}

export interface UpdateReferralRequest {
    referralCommandsUpdateCommand?: ReferralCommandsUpdateCommand;
}

export interface UpdateStatusReferralRequest {
    referralCommandsUpdateStatusCommand?: ReferralCommandsUpdateStatusCommand;
}

export interface ValidationReferralRequest {
    code?: string;
    packageId?: number;
}

/**
 * 
 */
export class ReferralsApi extends runtime.BaseAPI {

    /**
     */
    async createReferralRaw(requestParameters: CreateReferralRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReferralCommandsCreateCommandResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/Referrals/Create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReferralCommandsCreateCommandToJSON(requestParameters.referralCommandsCreateCommand),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferralCommandsCreateCommandResultFromJSON(jsonValue));
    }

    /**
     */
    async createReferral(requestParameters: CreateReferralRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReferralCommandsCreateCommandResult> {
        const response = await this.createReferralRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteReferralRaw(requestParameters: DeleteReferralRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Referrals/Delete`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async deleteReferral(requestParameters: DeleteReferralRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteReferralRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDetailsByIdReferralRaw(requestParameters: GetDetailsByIdReferralRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReferralQueriesReferralDetails>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Referrals/GetDetailsById`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferralQueriesReferralDetailsFromJSON(jsonValue));
    }

    /**
     */
    async getDetailsByIdReferral(requestParameters: GetDetailsByIdReferralRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReferralQueriesReferralDetails> {
        const response = await this.getDetailsByIdReferralRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDropDownReferralRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ReferralQueriesReferralDropdown>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Referrals/GetDropdown`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ReferralQueriesReferralDropdownFromJSON));
    }

    /**
     */
    async getDropDownReferral(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ReferralQueriesReferralDropdown>> {
        const response = await this.getDropDownReferralRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async listReferralRaw(requestParameters: ListReferralRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReferralQueriesListQueryResult>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.itemPerPage !== undefined) {
            queryParameters['ItemPerPage'] = requestParameters.itemPerPage;
        }

        if (requestParameters.searchKeyword !== undefined) {
            queryParameters['SearchKeyword'] = requestParameters.searchKeyword;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Referrals/List`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferralQueriesListQueryResultFromJSON(jsonValue));
    }

    /**
     */
    async listReferral(requestParameters: ListReferralRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReferralQueriesListQueryResult> {
        const response = await this.listReferralRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listReferralStudentsRaw(requestParameters: ListReferralStudentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReferralQueriesListStudentQueryResult>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.itemPerPage !== undefined) {
            queryParameters['ItemPerPage'] = requestParameters.itemPerPage;
        }

        if (requestParameters.searchKeyword !== undefined) {
            queryParameters['SearchKeyword'] = requestParameters.searchKeyword;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['Id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Referrals/ListStudents`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferralQueriesListStudentQueryResultFromJSON(jsonValue));
    }

    /**
     */
    async listReferralStudents(requestParameters: ListReferralStudentsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReferralQueriesListStudentQueryResult> {
        const response = await this.listReferralStudentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateReferralRaw(requestParameters: UpdateReferralRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReferralCommandsCreateCommandResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/Referrals/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReferralCommandsUpdateCommandToJSON(requestParameters.referralCommandsUpdateCommand),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferralCommandsCreateCommandResultFromJSON(jsonValue));
    }

    /**
     */
    async updateReferral(requestParameters: UpdateReferralRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReferralCommandsCreateCommandResult> {
        const response = await this.updateReferralRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateStatusReferralRaw(requestParameters: UpdateStatusReferralRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReferralCommandsCreateCommandResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Referrals/UpdateStatus`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReferralCommandsUpdateStatusCommandToJSON(requestParameters.referralCommandsUpdateStatusCommand),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferralCommandsCreateCommandResultFromJSON(jsonValue));
    }

    /**
     */
    async updateStatusReferral(requestParameters: UpdateStatusReferralRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReferralCommandsCreateCommandResult> {
        const response = await this.updateStatusReferralRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async validationReferralRaw(requestParameters: ValidationReferralRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReferralQueriesReferralValidationDetails>> {
        const queryParameters: any = {};

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.packageId !== undefined) {
            queryParameters['packageId'] = requestParameters.packageId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Referrals/ValidationCode`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferralQueriesReferralValidationDetailsFromJSON(jsonValue));
    }

    /**
     */
    async validationReferral(requestParameters: ValidationReferralRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReferralQueriesReferralValidationDetails> {
        const response = await this.validationReferralRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
