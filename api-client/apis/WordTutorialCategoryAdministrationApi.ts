/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FluentValidationResultsValidationFailure,
  WordTutorialCategoryAdministrationCommandsCreateCommandResult,
  WordTutorialCategoryAdministrationQueriesListQueryResult,
} from '../models/index';
import {
    FluentValidationResultsValidationFailureFromJSON,
    FluentValidationResultsValidationFailureToJSON,
    WordTutorialCategoryAdministrationCommandsCreateCommandResultFromJSON,
    WordTutorialCategoryAdministrationCommandsCreateCommandResultToJSON,
    WordTutorialCategoryAdministrationQueriesListQueryResultFromJSON,
    WordTutorialCategoryAdministrationQueriesListQueryResultToJSON,
} from '../models/index';

export interface ChangeCoverPhotoOfTheWordTutorialCategoryRequest {
    wordTutorialCategoryId?: number;
    newCoverPhoto?: Blob;
}

export interface ChangeDescriptionOfTheWordTutorialCategoryRequest {
    wordTutorialCategoryId?: number;
    wordTutorialCategoryDescription?: string;
}

export interface ChangeSlugOfTheWordTutorialCategoryRequest {
    wordTutorialCategoryId?: number;
    wordTutorialCategorySlug?: string;
}

export interface ChangeTitleOfTheWordTutorialCategoryRequest {
    wordTutorialCategoryId?: number;
    wordTutorialCategoryTitle?: string;
}

export interface CreateWordTutorialCategoryRequest {
    title?: string;
    slug?: string;
    description?: string;
    coverPhoto?: Blob;
}

export interface DeleteWordTutorialCategoryRequest {
    wordTutorialCategoryId?: number;
}

export interface ListWordTutorialCategoriesForAdministrationRequest {
    page?: number;
    itemPerPage?: number;
    searchKeyword?: string;
}

/**
 * 
 */
export class WordTutorialCategoryAdministrationApi extends runtime.BaseAPI {

    /**
     * Kelime eğitimi kategorisinin kapak fotoğrafını değiştirmeyi sağlar
     */
    async changeCoverPhotoOfTheWordTutorialCategoryRaw(requestParameters: ChangeCoverPhotoOfTheWordTutorialCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.wordTutorialCategoryId !== undefined) {
            queryParameters['WordTutorialCategoryId'] = requestParameters.wordTutorialCategoryId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.newCoverPhoto !== undefined) {
            formParams.append('NewCoverPhoto', requestParameters.newCoverPhoto as any);
        }

        const response = await this.request({
            path: `/api/WordTutorialCategoryAdministration/ChangeCoverPhoto`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Kelime eğitimi kategorisinin kapak fotoğrafını değiştirmeyi sağlar
     */
    async changeCoverPhotoOfTheWordTutorialCategory(requestParameters: ChangeCoverPhotoOfTheWordTutorialCategoryRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changeCoverPhotoOfTheWordTutorialCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Kelime eğitimi kategorisinin açıklamasını değiştirmeyi sağlar
     */
    async changeDescriptionOfTheWordTutorialCategoryRaw(requestParameters: ChangeDescriptionOfTheWordTutorialCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.wordTutorialCategoryId !== undefined) {
            queryParameters['WordTutorialCategoryId'] = requestParameters.wordTutorialCategoryId;
        }

        if (requestParameters.wordTutorialCategoryDescription !== undefined) {
            queryParameters['WordTutorialCategoryDescription'] = requestParameters.wordTutorialCategoryDescription;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/WordTutorialCategoryAdministration/ChangeDescription`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Kelime eğitimi kategorisinin açıklamasını değiştirmeyi sağlar
     */
    async changeDescriptionOfTheWordTutorialCategory(requestParameters: ChangeDescriptionOfTheWordTutorialCategoryRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changeDescriptionOfTheWordTutorialCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Kelime eğitimi kategorisinin isim etiketini değiştirmeyi sağlar
     */
    async changeSlugOfTheWordTutorialCategoryRaw(requestParameters: ChangeSlugOfTheWordTutorialCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.wordTutorialCategoryId !== undefined) {
            queryParameters['WordTutorialCategoryId'] = requestParameters.wordTutorialCategoryId;
        }

        if (requestParameters.wordTutorialCategorySlug !== undefined) {
            queryParameters['WordTutorialCategorySlug'] = requestParameters.wordTutorialCategorySlug;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/WordTutorialCategoryAdministration/ChangeSlug`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Kelime eğitimi kategorisinin isim etiketini değiştirmeyi sağlar
     */
    async changeSlugOfTheWordTutorialCategory(requestParameters: ChangeSlugOfTheWordTutorialCategoryRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changeSlugOfTheWordTutorialCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Kelime eğitimi kategorisinin ismini değiştirmeyi sağlar
     */
    async changeTitleOfTheWordTutorialCategoryRaw(requestParameters: ChangeTitleOfTheWordTutorialCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.wordTutorialCategoryId !== undefined) {
            queryParameters['WordTutorialCategoryId'] = requestParameters.wordTutorialCategoryId;
        }

        if (requestParameters.wordTutorialCategoryTitle !== undefined) {
            queryParameters['WordTutorialCategoryTitle'] = requestParameters.wordTutorialCategoryTitle;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/WordTutorialCategoryAdministration/ChangeTitle`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Kelime eğitimi kategorisinin ismini değiştirmeyi sağlar
     */
    async changeTitleOfTheWordTutorialCategory(requestParameters: ChangeTitleOfTheWordTutorialCategoryRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changeTitleOfTheWordTutorialCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Kelime eğitimi kategorisi eklemeyi sağlar
     */
    async createWordTutorialCategoryRaw(requestParameters: CreateWordTutorialCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WordTutorialCategoryAdministrationCommandsCreateCommandResult>> {
        const queryParameters: any = {};

        if (requestParameters.title !== undefined) {
            queryParameters['Title'] = requestParameters.title;
        }

        if (requestParameters.slug !== undefined) {
            queryParameters['Slug'] = requestParameters.slug;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['Description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.coverPhoto !== undefined) {
            formParams.append('CoverPhoto', requestParameters.coverPhoto as any);
        }

        const response = await this.request({
            path: `/api/WordTutorialCategoryAdministration/Create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WordTutorialCategoryAdministrationCommandsCreateCommandResultFromJSON(jsonValue));
    }

    /**
     * Kelime eğitimi kategorisi eklemeyi sağlar
     */
    async createWordTutorialCategory(requestParameters: CreateWordTutorialCategoryRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WordTutorialCategoryAdministrationCommandsCreateCommandResult> {
        const response = await this.createWordTutorialCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Kelime eğitimi kategorisini silmeyi sağlar
     */
    async deleteWordTutorialCategoryRaw(requestParameters: DeleteWordTutorialCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.wordTutorialCategoryId !== undefined) {
            queryParameters['WordTutorialCategoryId'] = requestParameters.wordTutorialCategoryId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/WordTutorialCategoryAdministration/Delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Kelime eğitimi kategorisini silmeyi sağlar
     */
    async deleteWordTutorialCategory(requestParameters: DeleteWordTutorialCategoryRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteWordTutorialCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Kelime eğitim kategorilerini listelemeyi sağlar
     */
    async listWordTutorialCategoriesForAdministrationRaw(requestParameters: ListWordTutorialCategoriesForAdministrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WordTutorialCategoryAdministrationQueriesListQueryResult>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.itemPerPage !== undefined) {
            queryParameters['ItemPerPage'] = requestParameters.itemPerPage;
        }

        if (requestParameters.searchKeyword !== undefined) {
            queryParameters['SearchKeyword'] = requestParameters.searchKeyword;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/WordTutorialCategoryAdministration/List`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WordTutorialCategoryAdministrationQueriesListQueryResultFromJSON(jsonValue));
    }

    /**
     * Kelime eğitim kategorilerini listelemeyi sağlar
     */
    async listWordTutorialCategoriesForAdministration(requestParameters: ListWordTutorialCategoriesForAdministrationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WordTutorialCategoryAdministrationQueriesListQueryResult> {
        const response = await this.listWordTutorialCategoriesForAdministrationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
