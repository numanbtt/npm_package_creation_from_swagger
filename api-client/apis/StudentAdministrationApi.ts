/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FluentValidationResultsValidationFailure,
  StudentAdministrationCommandsChangeProfilePictureCommandResult,
  StudentAdministrationQueriesGetStudentDetailsQueryResult,
  StudentAdministrationQueriesListQueryResult,
} from '../models/index';
import {
    FluentValidationResultsValidationFailureFromJSON,
    FluentValidationResultsValidationFailureToJSON,
    StudentAdministrationCommandsChangeProfilePictureCommandResultFromJSON,
    StudentAdministrationCommandsChangeProfilePictureCommandResultToJSON,
    StudentAdministrationQueriesGetStudentDetailsQueryResultFromJSON,
    StudentAdministrationQueriesGetStudentDetailsQueryResultToJSON,
    StudentAdministrationQueriesListQueryResultFromJSON,
    StudentAdministrationQueriesListQueryResultToJSON,
} from '../models/index';

export interface ApproveStudentProfilePictureRequest {
    studentId?: number;
}

export interface BanStudentRequest {
    studentId?: number;
    reason?: string;
}

export interface ChangeStudentEmailRequest {
    studentId?: number;
    newEmail?: string;
    reason?: string;
}

export interface ChangeStudentNameRequest {
    studentId?: number;
    newName?: string;
    reason?: string;
}

export interface ChangeStudentPasswordRequest {
    studentId?: number;
    reason?: string;
    newPassword?: string;
}

export interface ChangeStudentPhoneNumberRequest {
    studentId?: number;
    newPhoneNumber?: string;
    reason?: string;
}

export interface ChangeStudentProfilePictureRequest {
    studentId?: number;
    reason?: string;
    newProfilePicture?: Blob;
}

export interface DeleteStudentAccountDueGDPRRequest {
    studentId?: number;
    reason?: string;
}

export interface GetStudentDetailsForAdministrationRequest {
    studentId: number;
}

export interface ListStudentsForManagementRequest {
    searchKeyword?: string;
    approvementState?: string;
    page?: number;
}

export interface UnBanStudentRequest {
    studentId?: number;
    reason?: string;
}

export interface UnapproveStudentProfilePictureRequest {
    studentId?: number;
    reason?: string;
}

/**
 * 
 */
export class StudentAdministrationApi extends runtime.BaseAPI {

    /**
     * Bir öğrencinin profil fotoğrafını onaylar.
     */
    async approveStudentProfilePictureRaw(requestParameters: ApproveStudentProfilePictureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.studentId !== undefined) {
            queryParameters['StudentId'] = requestParameters.studentId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/StudentAdministration/ApproveProfilePicture`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Bir öğrencinin profil fotoğrafını onaylar.
     */
    async approveStudentProfilePicture(requestParameters: ApproveStudentProfilePictureRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.approveStudentProfilePictureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bir öğrenciyi siteden yasaklar. Artık o hesap ve öğrencinin kullandığı ip\'ler siteye giriş yapamaz.
     */
    async banStudentRaw(requestParameters: BanStudentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.studentId !== undefined) {
            queryParameters['StudentId'] = requestParameters.studentId;
        }

        if (requestParameters.reason !== undefined) {
            queryParameters['Reason'] = requestParameters.reason;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/StudentAdministration/Ban`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Bir öğrenciyi siteden yasaklar. Artık o hesap ve öğrencinin kullandığı ip\'ler siteye giriş yapamaz.
     */
    async banStudent(requestParameters: BanStudentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.banStudentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bir öğrencinin e-posta adresini değiştirir.
     */
    async changeStudentEmailRaw(requestParameters: ChangeStudentEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.studentId !== undefined) {
            queryParameters['StudentId'] = requestParameters.studentId;
        }

        if (requestParameters.newEmail !== undefined) {
            queryParameters['NewEmail'] = requestParameters.newEmail;
        }

        if (requestParameters.reason !== undefined) {
            queryParameters['Reason'] = requestParameters.reason;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/StudentAdministration/ChangeEmail`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Bir öğrencinin e-posta adresini değiştirir.
     */
    async changeStudentEmail(requestParameters: ChangeStudentEmailRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changeStudentEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bir öğrencinin ismini değiştirir.
     */
    async changeStudentNameRaw(requestParameters: ChangeStudentNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.studentId !== undefined) {
            queryParameters['StudentId'] = requestParameters.studentId;
        }

        if (requestParameters.newName !== undefined) {
            queryParameters['NewName'] = requestParameters.newName;
        }

        if (requestParameters.reason !== undefined) {
            queryParameters['Reason'] = requestParameters.reason;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/StudentAdministration/ChangeName`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Bir öğrencinin ismini değiştirir.
     */
    async changeStudentName(requestParameters: ChangeStudentNameRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changeStudentNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bir öğrencinin şifresini değiştirir.
     */
    async changeStudentPasswordRaw(requestParameters: ChangeStudentPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.studentId !== undefined) {
            queryParameters['StudentId'] = requestParameters.studentId;
        }

        if (requestParameters.reason !== undefined) {
            queryParameters['Reason'] = requestParameters.reason;
        }

        if (requestParameters.newPassword !== undefined) {
            queryParameters['NewPassword'] = requestParameters.newPassword;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/StudentAdministration/ChangePassword`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Bir öğrencinin şifresini değiştirir.
     */
    async changeStudentPassword(requestParameters: ChangeStudentPasswordRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changeStudentPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bir öğrencinin telefon numarasını değiştirir.
     */
    async changeStudentPhoneNumberRaw(requestParameters: ChangeStudentPhoneNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.studentId !== undefined) {
            queryParameters['StudentId'] = requestParameters.studentId;
        }

        if (requestParameters.newPhoneNumber !== undefined) {
            queryParameters['NewPhoneNumber'] = requestParameters.newPhoneNumber;
        }

        if (requestParameters.reason !== undefined) {
            queryParameters['Reason'] = requestParameters.reason;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/StudentAdministration/ChangePhoneNumber`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Bir öğrencinin telefon numarasını değiştirir.
     */
    async changeStudentPhoneNumber(requestParameters: ChangeStudentPhoneNumberRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changeStudentPhoneNumberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bir öğrencinin profil fotoğrafını değiştirir.
     */
    async changeStudentProfilePictureRaw(requestParameters: ChangeStudentProfilePictureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StudentAdministrationCommandsChangeProfilePictureCommandResult>> {
        const queryParameters: any = {};

        if (requestParameters.studentId !== undefined) {
            queryParameters['StudentId'] = requestParameters.studentId;
        }

        if (requestParameters.reason !== undefined) {
            queryParameters['Reason'] = requestParameters.reason;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.newProfilePicture !== undefined) {
            formParams.append('NewProfilePicture', requestParameters.newProfilePicture as any);
        }

        const response = await this.request({
            path: `/api/StudentAdministration/ChangeProfilePicture`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudentAdministrationCommandsChangeProfilePictureCommandResultFromJSON(jsonValue));
    }

    /**
     * Bir öğrencinin profil fotoğrafını değiştirir.
     */
    async changeStudentProfilePicture(requestParameters: ChangeStudentProfilePictureRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StudentAdministrationCommandsChangeProfilePictureCommandResult> {
        const response = await this.changeStudentProfilePictureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bir öğrencinin hesabını siteden siler.
     */
    async deleteStudentAccountDueGDPRRaw(requestParameters: DeleteStudentAccountDueGDPRRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.studentId !== undefined) {
            queryParameters['StudentId'] = requestParameters.studentId;
        }

        if (requestParameters.reason !== undefined) {
            queryParameters['Reason'] = requestParameters.reason;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/StudentAdministration/DeleteAccountDueGDPR`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Bir öğrencinin hesabını siteden siler.
     */
    async deleteStudentAccountDueGDPR(requestParameters: DeleteStudentAccountDueGDPRRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteStudentAccountDueGDPRRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sistemdeki öğrencileri listeler
     */
    async getStudentDetailsForAdministrationRaw(requestParameters: GetStudentDetailsForAdministrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StudentAdministrationQueriesGetStudentDetailsQueryResult>> {
        if (requestParameters.studentId === null || requestParameters.studentId === undefined) {
            throw new runtime.RequiredError('studentId','Required parameter requestParameters.studentId was null or undefined when calling getStudentDetailsForAdministration.');
        }

        const queryParameters: any = {};

        if (requestParameters.studentId !== undefined) {
            queryParameters['StudentId'] = requestParameters.studentId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/StudentAdministration/GetStudentDetails`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudentAdministrationQueriesGetStudentDetailsQueryResultFromJSON(jsonValue));
    }

    /**
     * Sistemdeki öğrencileri listeler
     */
    async getStudentDetailsForAdministration(requestParameters: GetStudentDetailsForAdministrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StudentAdministrationQueriesGetStudentDetailsQueryResult> {
        const response = await this.getStudentDetailsForAdministrationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bir öğrencinin detaylarını getirir.
     */
    async listStudentsForManagementRaw(requestParameters: ListStudentsForManagementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StudentAdministrationQueriesListQueryResult>> {
        const queryParameters: any = {};

        if (requestParameters.searchKeyword !== undefined) {
            queryParameters['SearchKeyword'] = requestParameters.searchKeyword;
        }

        if (requestParameters.approvementState !== undefined) {
            queryParameters['ApprovementState'] = requestParameters.approvementState;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/StudentAdministration/List`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudentAdministrationQueriesListQueryResultFromJSON(jsonValue));
    }

    /**
     * Bir öğrencinin detaylarını getirir.
     */
    async listStudentsForManagement(requestParameters: ListStudentsForManagementRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StudentAdministrationQueriesListQueryResult> {
        const response = await this.listStudentsForManagementRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bir öğrenciyi siteden yasaklamasını Kaldırır.
     */
    async unBanStudentRaw(requestParameters: UnBanStudentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.studentId !== undefined) {
            queryParameters['StudentId'] = requestParameters.studentId;
        }

        if (requestParameters.reason !== undefined) {
            queryParameters['Reason'] = requestParameters.reason;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/StudentAdministration/UnBan`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Bir öğrenciyi siteden yasaklamasını Kaldırır.
     */
    async unBanStudent(requestParameters: UnBanStudentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.unBanStudentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bir öğrencinin profil fotoğrafının onayını kaldırır.
     */
    async unapproveStudentProfilePictureRaw(requestParameters: UnapproveStudentProfilePictureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.studentId !== undefined) {
            queryParameters['StudentId'] = requestParameters.studentId;
        }

        if (requestParameters.reason !== undefined) {
            queryParameters['Reason'] = requestParameters.reason;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/StudentAdministration/UnapproveProfilePicture`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Bir öğrencinin profil fotoğrafının onayını kaldırır.
     */
    async unapproveStudentProfilePicture(requestParameters: UnapproveStudentProfilePictureRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.unapproveStudentProfilePictureRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
