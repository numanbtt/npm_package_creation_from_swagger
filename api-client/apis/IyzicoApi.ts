/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FluentValidationResultsValidationFailure,
} from '../models/index';
import {
    FluentValidationResultsValidationFailureFromJSON,
    FluentValidationResultsValidationFailureToJSON,
} from '../models/index';

export interface IyzicoRedirectResultRequest {
    token?: string;
}

export interface IyzicoWebhookResultRequest {
    iyziEventTime?: number;
    iyziEventType?: string;
    iyziReferenceCode?: string;
    token?: string;
    paymentId?: string;
    paymentConversationId?: string;
    status?: string;
}

/**
 * 
 */
export class IyzicoApi extends runtime.BaseAPI {

    /**
     * Iyzico subscribe result\'unda geri dönülen endpointtir
     */
    async iyzicoRedirectResultRaw(requestParameters: IyzicoRedirectResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.token !== undefined) {
            formParams.append('token', requestParameters.token as any);
        }

        const response = await this.request({
            path: `/api/Iyzico/IyzicoRedirectResult`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Iyzico subscribe result\'unda geri dönülen endpointtir
     */
    async iyzicoRedirectResult(requestParameters: IyzicoRedirectResultRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.iyzicoRedirectResultRaw(requestParameters, initOverrides);
    }

    /**
     * Iyzico subscribe webhook\'unun dürttüğü adrestir
     */
    async iyzicoWebhookResultRaw(requestParameters: IyzicoWebhookResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.iyziEventTime !== undefined) {
            formParams.append('IyziEventTime', requestParameters.iyziEventTime as any);
        }

        if (requestParameters.iyziEventType !== undefined) {
            formParams.append('IyziEventType', requestParameters.iyziEventType as any);
        }

        if (requestParameters.iyziReferenceCode !== undefined) {
            formParams.append('IyziReferenceCode', requestParameters.iyziReferenceCode as any);
        }

        if (requestParameters.token !== undefined) {
            formParams.append('Token', requestParameters.token as any);
        }

        if (requestParameters.paymentId !== undefined) {
            formParams.append('PaymentId', requestParameters.paymentId as any);
        }

        if (requestParameters.paymentConversationId !== undefined) {
            formParams.append('PaymentConversationId', requestParameters.paymentConversationId as any);
        }

        if (requestParameters.status !== undefined) {
            formParams.append('Status', requestParameters.status as any);
        }

        const response = await this.request({
            path: `/api/Iyzico/IyzicoWebhookResult`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Iyzico subscribe webhook\'unun dürttüğü adrestir
     */
    async iyzicoWebhookResult(requestParameters: IyzicoWebhookResultRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.iyzicoWebhookResultRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
