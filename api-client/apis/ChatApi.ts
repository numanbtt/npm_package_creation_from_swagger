/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChatCommandsReportChatAsStudentCommandResult,
  ChatCommandsReportChatAsTeacherCommandResult,
  ChatQueriesGetChatJwtQueryResult,
  ChatQueriesGetUserInformationsQueryResult,
  FluentValidationResultsValidationFailure,
} from '../models/index';
import {
    ChatCommandsReportChatAsStudentCommandResultFromJSON,
    ChatCommandsReportChatAsStudentCommandResultToJSON,
    ChatCommandsReportChatAsTeacherCommandResultFromJSON,
    ChatCommandsReportChatAsTeacherCommandResultToJSON,
    ChatQueriesGetChatJwtQueryResultFromJSON,
    ChatQueriesGetChatJwtQueryResultToJSON,
    ChatQueriesGetUserInformationsQueryResultFromJSON,
    ChatQueriesGetUserInformationsQueryResultToJSON,
    FluentValidationResultsValidationFailureFromJSON,
    FluentValidationResultsValidationFailureToJSON,
} from '../models/index';

export interface GetUserInformationsRequest {
    userIdList: Array<string>;
}

export interface ReportChatAsStudentRequest {
    chatSessionId?: string;
}

export interface ReportChatAsTeacherRequest {
    chatSessionId?: string;
}

/**
 * 
 */
export class ChatApi extends runtime.BaseAPI {

    /**
     * Chat sistemine giriş yapılabilmesi için sadece Fosh Chat\'te kullanılabilen özel bir jwt üretir.
     */
    async getChatJwtRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatQueriesGetChatJwtQueryResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Chat/GetChatJwt`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatQueriesGetChatJwtQueryResultFromJSON(jsonValue));
    }

    /**
     * Chat sistemine giriş yapılabilmesi için sadece Fosh Chat\'te kullanılabilen özel bir jwt üretir.
     */
    async getChatJwt(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatQueriesGetChatJwtQueryResult> {
        const response = await this.getChatJwtRaw(initOverrides);
        return await response.value();
    }

    /**
     * Chat sistemi sadece kullanıcı idlerini bilmekte. Bu yüzden kullanıcının diğer detaylarını bu komut ile çekeceğiz.
     */
    async getUserInformationsRaw(requestParameters: GetUserInformationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatQueriesGetUserInformationsQueryResult>> {
        if (requestParameters.userIdList === null || requestParameters.userIdList === undefined) {
            throw new runtime.RequiredError('userIdList','Required parameter requestParameters.userIdList was null or undefined when calling getUserInformations.');
        }

        const queryParameters: any = {};

        if (requestParameters.userIdList) {
            queryParameters['UserIdList'] = requestParameters.userIdList;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Chat/GetUserInformations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatQueriesGetUserInformationsQueryResultFromJSON(jsonValue));
    }

    /**
     * Chat sistemi sadece kullanıcı idlerini bilmekte. Bu yüzden kullanıcının diğer detaylarını bu komut ile çekeceğiz.
     */
    async getUserInformations(requestParameters: GetUserInformationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatQueriesGetUserInformationsQueryResult> {
        const response = await this.getUserInformationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Öğrenci olarak chat\'i şikayet etmeye yarar.
     */
    async reportChatAsStudentRaw(requestParameters: ReportChatAsStudentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatCommandsReportChatAsStudentCommandResult>> {
        const queryParameters: any = {};

        if (requestParameters.chatSessionId !== undefined) {
            queryParameters['ChatSessionId'] = requestParameters.chatSessionId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Chat/ReportChatAsStudent`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatCommandsReportChatAsStudentCommandResultFromJSON(jsonValue));
    }

    /**
     * Öğrenci olarak chat\'i şikayet etmeye yarar.
     */
    async reportChatAsStudent(requestParameters: ReportChatAsStudentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatCommandsReportChatAsStudentCommandResult> {
        const response = await this.reportChatAsStudentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Öğretmen olarak chat\'i şikayet etmeye yarar.
     */
    async reportChatAsTeacherRaw(requestParameters: ReportChatAsTeacherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatCommandsReportChatAsTeacherCommandResult>> {
        const queryParameters: any = {};

        if (requestParameters.chatSessionId !== undefined) {
            queryParameters['ChatSessionId'] = requestParameters.chatSessionId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Chat/ReportChatAsTeacher`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatCommandsReportChatAsTeacherCommandResultFromJSON(jsonValue));
    }

    /**
     * Öğretmen olarak chat\'i şikayet etmeye yarar.
     */
    async reportChatAsTeacher(requestParameters: ReportChatAsTeacherRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatCommandsReportChatAsTeacherCommandResult> {
        const response = await this.reportChatAsTeacherRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
