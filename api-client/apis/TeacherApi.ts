/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FluentValidationResultsValidationFailure,
  TeacherCommandsLoginWithDirectAuthCommandResult,
  TeacherCommandsRegisterCommandResult,
  TeacherCommandsStartToExportMyAllInformationsCommandResult,
  TeacherCommandsUpdateMySpecalitiesParemeters,
  TeacherCommandsUpdateProfilePhotoCommandResult,
  TeacherQueriesGetDetailsQueryResult,
  TeacherQueriesGetMyDetailsQueryResult,
  TeacherQueriesListMyExportsQueryResult,
  TeacherQueriesListMyFavoritesQueryResult,
  TeacherQueriesListQueryResult,
  TeacherQueriesMyEarningsQueryResult,
  TeacherQueriesMyRatingResultList,
} from '../models/index';
import {
    FluentValidationResultsValidationFailureFromJSON,
    FluentValidationResultsValidationFailureToJSON,
    TeacherCommandsLoginWithDirectAuthCommandResultFromJSON,
    TeacherCommandsLoginWithDirectAuthCommandResultToJSON,
    TeacherCommandsRegisterCommandResultFromJSON,
    TeacherCommandsRegisterCommandResultToJSON,
    TeacherCommandsStartToExportMyAllInformationsCommandResultFromJSON,
    TeacherCommandsStartToExportMyAllInformationsCommandResultToJSON,
    TeacherCommandsUpdateMySpecalitiesParemetersFromJSON,
    TeacherCommandsUpdateMySpecalitiesParemetersToJSON,
    TeacherCommandsUpdateProfilePhotoCommandResultFromJSON,
    TeacherCommandsUpdateProfilePhotoCommandResultToJSON,
    TeacherQueriesGetDetailsQueryResultFromJSON,
    TeacherQueriesGetDetailsQueryResultToJSON,
    TeacherQueriesGetMyDetailsQueryResultFromJSON,
    TeacherQueriesGetMyDetailsQueryResultToJSON,
    TeacherQueriesListMyExportsQueryResultFromJSON,
    TeacherQueriesListMyExportsQueryResultToJSON,
    TeacherQueriesListMyFavoritesQueryResultFromJSON,
    TeacherQueriesListMyFavoritesQueryResultToJSON,
    TeacherQueriesListQueryResultFromJSON,
    TeacherQueriesListQueryResultToJSON,
    TeacherQueriesMyEarningsQueryResultFromJSON,
    TeacherQueriesMyEarningsQueryResultToJSON,
    TeacherQueriesMyRatingResultListFromJSON,
    TeacherQueriesMyRatingResultListToJSON,
} from '../models/index';

export interface AcceptCallRequest {
    callId?: number;
    teacherId?: number;
}

export interface BlockTeacherRequest {
    teacherId?: number;
}

export interface ChangeMyDescriptionRequest {
    newDescription?: string;
}

export interface ChangeMyIbanNumberRequest {
    bankName?: string;
    accountHolderName?: string;
    iban?: string;
}

export interface ChangeMyOnlineStatusRequest {
    isOnline?: boolean;
}

export interface ChangeMyYoutubeVideoUrlRequest {
    youtubeVideoUrl?: string;
}

export interface CheckStudentReviewRequest {
    teacherId?: number;
    studentId?: number;
}

export interface FavoriteTeacherRequest {
    teacherId?: number;
}

export interface GetTeacherDetailsRequest {
    teacherId: number;
}

export interface ListMyExportsAsTeacherRequest {
    lastCreatedAt?: Date;
}

export interface ListMyFavoriteTeachersRequest {
    lastTeacherId?: number;
    query?: string;
}

export interface ListTeachersRequest {
    lastId?: number;
    filtersQuery?: string;
    filtersTeachingStyles?: Array<string>;
    filtersLessonTypes?: Array<string>;
    filtersLanguageLevel?: Array<string>;
    filtersAccentTypes?: Array<string>;
}

export interface LoginWithDirectAuthAsTeacherRequest {
    email?: string;
    password?: string;
}

export interface RateTeacherRequest {
    appointmentId?: number;
    rate?: number;
    comment?: string;
}

export interface RatingDeleteRequest {
    id?: number;
}

export interface RatingListRequest {
    teacherId?: number;
}

export interface RegisterAsTeacherRequest {
    nameSurname?: string;
    eMail?: string;
    password?: string;
    phoneNumber?: string;
    description?: string;
    youtubeVideoUrl?: string;
    accent?: string;
    teachingStyles?: string;
    lessonTypes?: string;
    languageLevel?: string;
    profilePhoto?: Blob;
}

export interface RejectCallRequest {
    callId?: number;
    teacherId?: number;
}

export interface ReportTeacherRequest {
    teacherId?: number;
    content?: string;
}

export interface TeacherRatePostRequest {
    teacherId?: number;
    studentId?: number;
    rate?: number;
    comment?: string;
}

export interface UnblockTeacherRequest {
    teacherId?: number;
}

export interface UnfavoriteTeacherRequest {
    teacherId?: number;
}

export interface UpdateMyProfilePhotoAsTeacherRequest {
    photo?: Blob;
}

export interface UpdateMySpecalitiesRequest {
    teacherCommandsUpdateMySpecalitiesParemeters?: TeacherCommandsUpdateMySpecalitiesParemeters;
}

/**
 * 
 */
export class TeacherApi extends runtime.BaseAPI {

    /**
     * Öğretmene gelen anlık aramayı kabul etmesini sağlar.
     */
    async acceptCallRaw(requestParameters: AcceptCallRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.callId !== undefined) {
            queryParameters['CallId'] = requestParameters.callId;
        }

        if (requestParameters.teacherId !== undefined) {
            queryParameters['TeacherId'] = requestParameters.teacherId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Teacher/AcceptCall`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Öğretmene gelen anlık aramayı kabul etmesini sağlar.
     */
    async acceptCall(requestParameters: AcceptCallRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.acceptCallRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Öğrencinin öğretmeni engellemesini sağlar.
     */
    async blockTeacherRaw(requestParameters: BlockTeacherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.teacherId !== undefined) {
            queryParameters['TeacherId'] = requestParameters.teacherId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Teacher/Block`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Öğrencinin öğretmeni engellemesini sağlar.
     */
    async blockTeacher(requestParameters: BlockTeacherRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.blockTeacherRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Öğretmenin açıklamasını değiştirir.
     */
    async changeMyDescriptionRaw(requestParameters: ChangeMyDescriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.newDescription !== undefined) {
            queryParameters['NewDescription'] = requestParameters.newDescription;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Teacher/ChangeMyDescription`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Öğretmenin açıklamasını değiştirir.
     */
    async changeMyDescription(requestParameters: ChangeMyDescriptionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changeMyDescriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Öğretmenin sisteme kayıtlı IBAN bilgisini değiştirir.
     */
    async changeMyIbanNumberRaw(requestParameters: ChangeMyIbanNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.bankName !== undefined) {
            queryParameters['BankName'] = requestParameters.bankName;
        }

        if (requestParameters.accountHolderName !== undefined) {
            queryParameters['AccountHolderName'] = requestParameters.accountHolderName;
        }

        if (requestParameters.iban !== undefined) {
            queryParameters['Iban'] = requestParameters.iban;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Teacher/ChangeMyIbanNumber`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Öğretmenin sisteme kayıtlı IBAN bilgisini değiştirir.
     */
    async changeMyIbanNumber(requestParameters: ChangeMyIbanNumberRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changeMyIbanNumberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Öğretmenin çevrimiçi/çevrimdışı durumunu değiştirir.
     */
    async changeMyOnlineStatusRaw(requestParameters: ChangeMyOnlineStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.isOnline !== undefined) {
            queryParameters['IsOnline'] = requestParameters.isOnline;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Teacher/ChangeMyOnlineStatus`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Öğretmenin çevrimiçi/çevrimdışı durumunu değiştirir.
     */
    async changeMyOnlineStatus(requestParameters: ChangeMyOnlineStatusRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changeMyOnlineStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Öğretmenin youtube video linkini değiştirir.
     */
    async changeMyYoutubeVideoUrlRaw(requestParameters: ChangeMyYoutubeVideoUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.youtubeVideoUrl !== undefined) {
            queryParameters['YoutubeVideoUrl'] = requestParameters.youtubeVideoUrl;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Teacher/ChangeMyYoutubeVideoUrl`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Öğretmenin youtube video linkini değiştirir.
     */
    async changeMyYoutubeVideoUrl(requestParameters: ChangeMyYoutubeVideoUrlRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changeMyYoutubeVideoUrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async checkStudentReviewRaw(requestParameters: CheckStudentReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        if (requestParameters.teacherId !== undefined) {
            queryParameters['TeacherId'] = requestParameters.teacherId;
        }

        if (requestParameters.studentId !== undefined) {
            queryParameters['StudentId'] = requestParameters.studentId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Teacher/CheckStudentReview`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async checkStudentReview(requestParameters: CheckStudentReviewRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.checkStudentReviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Öğretmenin hesabının silme isteğini admine mail olarak iletir.
     */
    async deleteMyAccountAsTeacherRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Teacher/DeleteMyAccount`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Öğretmenin hesabının silme isteğini admine mail olarak iletir.
     */
    async deleteMyAccountAsTeacher(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteMyAccountAsTeacherRaw(initOverrides);
        return await response.value();
    }

    /**
     * Öğrencinin öğretmeni favoriye eklemesini sağlar.
     */
    async favoriteTeacherRaw(requestParameters: FavoriteTeacherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.teacherId !== undefined) {
            queryParameters['TeacherId'] = requestParameters.teacherId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Teacher/Favorite`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Öğrencinin öğretmeni favoriye eklemesini sağlar.
     */
    async favoriteTeacher(requestParameters: FavoriteTeacherRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.favoriteTeacherRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Öğretmenin kendi detayını getirir.
     */
    async getMyDetailsAsTeacherRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeacherQueriesGetMyDetailsQueryResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Teacher/GetMyDetails`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeacherQueriesGetMyDetailsQueryResultFromJSON(jsonValue));
    }

    /**
     * Öğretmenin kendi detayını getirir.
     */
    async getMyDetailsAsTeacher(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeacherQueriesGetMyDetailsQueryResult> {
        const response = await this.getMyDetailsAsTeacherRaw(initOverrides);
        return await response.value();
    }

    /**
     * Öğretmen\'in detayını getirir.
     */
    async getTeacherDetailsRaw(requestParameters: GetTeacherDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeacherQueriesGetDetailsQueryResult>> {
        if (requestParameters.teacherId === null || requestParameters.teacherId === undefined) {
            throw new runtime.RequiredError('teacherId','Required parameter requestParameters.teacherId was null or undefined when calling getTeacherDetails.');
        }

        const queryParameters: any = {};

        if (requestParameters.teacherId !== undefined) {
            queryParameters['TeacherId'] = requestParameters.teacherId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Teacher/GetDetails`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeacherQueriesGetDetailsQueryResultFromJSON(jsonValue));
    }

    /**
     * Öğretmen\'in detayını getirir.
     */
    async getTeacherDetails(requestParameters: GetTeacherDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeacherQueriesGetDetailsQueryResult> {
        const response = await this.getTeacherDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Öğretmenin dışa aktarılmaya hazır verilerini listeler.
     */
    async listMyExportsAsTeacherRaw(requestParameters: ListMyExportsAsTeacherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeacherQueriesListMyExportsQueryResult>> {
        const queryParameters: any = {};

        if (requestParameters.lastCreatedAt !== undefined) {
            queryParameters['LastCreatedAt'] = (requestParameters.lastCreatedAt as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Teacher/ListMyExports`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeacherQueriesListMyExportsQueryResultFromJSON(jsonValue));
    }

    /**
     * Öğretmenin dışa aktarılmaya hazır verilerini listeler.
     */
    async listMyExportsAsTeacher(requestParameters: ListMyExportsAsTeacherRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeacherQueriesListMyExportsQueryResult> {
        const response = await this.listMyExportsAsTeacherRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Favori öğretmenleri listeler. Ayrıca isimle arama filtresi uygulanabilir.
     */
    async listMyFavoriteTeachersRaw(requestParameters: ListMyFavoriteTeachersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeacherQueriesListMyFavoritesQueryResult>> {
        const queryParameters: any = {};

        if (requestParameters.lastTeacherId !== undefined) {
            queryParameters['LastTeacherId'] = requestParameters.lastTeacherId;
        }

        if (requestParameters.query !== undefined) {
            queryParameters['Query'] = requestParameters.query;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Teacher/ListMyFavorites`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeacherQueriesListMyFavoritesQueryResultFromJSON(jsonValue));
    }

    /**
     * Favori öğretmenleri listeler. Ayrıca isimle arama filtresi uygulanabilir.
     */
    async listMyFavoriteTeachers(requestParameters: ListMyFavoriteTeachersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeacherQueriesListMyFavoritesQueryResult> {
        const response = await this.listMyFavoriteTeachersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Öğretmenleri listeler. Ayrıca filtreler uygulanabilir.
     */
    async listTeachersRaw(requestParameters: ListTeachersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeacherQueriesListQueryResult>> {
        const queryParameters: any = {};

        if (requestParameters.lastId !== undefined) {
            queryParameters['LastId'] = requestParameters.lastId;
        }

        if (requestParameters.filtersQuery !== undefined) {
            queryParameters['Filters.Query'] = requestParameters.filtersQuery;
        }

        if (requestParameters.filtersTeachingStyles) {
            queryParameters['Filters.TeachingStyles'] = requestParameters.filtersTeachingStyles;
        }

        if (requestParameters.filtersLessonTypes) {
            queryParameters['Filters.LessonTypes'] = requestParameters.filtersLessonTypes;
        }

        if (requestParameters.filtersLanguageLevel) {
            queryParameters['Filters.LanguageLevel'] = requestParameters.filtersLanguageLevel;
        }

        if (requestParameters.filtersAccentTypes) {
            queryParameters['Filters.AccentTypes'] = requestParameters.filtersAccentTypes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Teacher/List`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeacherQueriesListQueryResultFromJSON(jsonValue));
    }

    /**
     * Öğretmenleri listeler. Ayrıca filtreler uygulanabilir.
     */
    async listTeachers(requestParameters: ListTeachersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeacherQueriesListQueryResult> {
        const response = await this.listTeachersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async loginOutWithDirectAuthAsTeacherRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Teacher/LoginOutWithDirectAuth`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async loginOutWithDirectAuthAsTeacher(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.loginOutWithDirectAuthAsTeacherRaw(initOverrides);
        return await response.value();
    }

    /**
     * Öğretmenin eposta ve şifre ile giriş yapabilmesini sağlar.
     */
    async loginWithDirectAuthAsTeacherRaw(requestParameters: LoginWithDirectAuthAsTeacherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeacherCommandsLoginWithDirectAuthCommandResult>> {
        const queryParameters: any = {};

        if (requestParameters.email !== undefined) {
            queryParameters['Email'] = requestParameters.email;
        }

        if (requestParameters.password !== undefined) {
            queryParameters['Password'] = requestParameters.password;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Teacher/LoginWithDirectAuth`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeacherCommandsLoginWithDirectAuthCommandResultFromJSON(jsonValue));
    }

    /**
     * Öğretmenin eposta ve şifre ile giriş yapabilmesini sağlar.
     */
    async loginWithDirectAuthAsTeacher(requestParameters: LoginWithDirectAuthAsTeacherRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeacherCommandsLoginWithDirectAuthCommandResult> {
        const response = await this.loginWithDirectAuthAsTeacherRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Öğretmenin kazanç durumunu getirir.  Kazanç hesaplaması neye göre ve nasıl olacak?
     */
    async myEarningsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeacherQueriesMyEarningsQueryResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Teacher/MyEarnings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeacherQueriesMyEarningsQueryResultFromJSON(jsonValue));
    }

    /**
     * Öğretmenin kazanç durumunu getirir.  Kazanç hesaplaması neye göre ve nasıl olacak?
     */
    async myEarnings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeacherQueriesMyEarningsQueryResult> {
        const response = await this.myEarningsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Görüşme sonrasında öğretmeni puanlar.
     */
    async rateTeacherRaw(requestParameters: RateTeacherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.appointmentId !== undefined) {
            queryParameters['AppointmentId'] = requestParameters.appointmentId;
        }

        if (requestParameters.rate !== undefined) {
            queryParameters['Rate'] = requestParameters.rate;
        }

        if (requestParameters.comment !== undefined) {
            queryParameters['comment'] = requestParameters.comment;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Teacher/Rate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Görüşme sonrasında öğretmeni puanlar.
     */
    async rateTeacher(requestParameters: RateTeacherRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.rateTeacherRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async ratingDeleteRaw(requestParameters: RatingDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['Id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Teacher/RatingDelete`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async ratingDelete(requestParameters: RatingDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.ratingDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async ratingListRaw(requestParameters: RatingListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TeacherQueriesMyRatingResultList>>> {
        const queryParameters: any = {};

        if (requestParameters.teacherId !== undefined) {
            queryParameters['TeacherId'] = requestParameters.teacherId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Teacher/RatingList`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TeacherQueriesMyRatingResultListFromJSON));
    }

    /**
     */
    async ratingList(requestParameters: RatingListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TeacherQueriesMyRatingResultList>> {
        const response = await this.ratingListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Öğretmen olarak kayıt olmayı sağlar
     */
    async registerAsTeacherRaw(requestParameters: RegisterAsTeacherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeacherCommandsRegisterCommandResult>> {
        const queryParameters: any = {};

        if (requestParameters.nameSurname !== undefined) {
            queryParameters['NameSurname'] = requestParameters.nameSurname;
        }

        if (requestParameters.eMail !== undefined) {
            queryParameters['EMail'] = requestParameters.eMail;
        }

        if (requestParameters.password !== undefined) {
            queryParameters['Password'] = requestParameters.password;
        }

        if (requestParameters.phoneNumber !== undefined) {
            queryParameters['PhoneNumber'] = requestParameters.phoneNumber;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['Description'] = requestParameters.description;
        }

        if (requestParameters.youtubeVideoUrl !== undefined) {
            queryParameters['YoutubeVideoUrl'] = requestParameters.youtubeVideoUrl;
        }

        if (requestParameters.accent !== undefined) {
            queryParameters['Accent'] = requestParameters.accent;
        }

        if (requestParameters.teachingStyles !== undefined) {
            queryParameters['TeachingStyles'] = requestParameters.teachingStyles;
        }

        if (requestParameters.lessonTypes !== undefined) {
            queryParameters['LessonTypes'] = requestParameters.lessonTypes;
        }

        if (requestParameters.languageLevel !== undefined) {
            queryParameters['LanguageLevel'] = requestParameters.languageLevel;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.profilePhoto !== undefined) {
            formParams.append('ProfilePhoto', requestParameters.profilePhoto as any);
        }

        const response = await this.request({
            path: `/api/Teacher/Register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeacherCommandsRegisterCommandResultFromJSON(jsonValue));
    }

    /**
     * Öğretmen olarak kayıt olmayı sağlar
     */
    async registerAsTeacher(requestParameters: RegisterAsTeacherRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeacherCommandsRegisterCommandResult> {
        const response = await this.registerAsTeacherRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Öğretmene gelen anlık aramayı reddetmesini sağlar.
     */
    async rejectCallRaw(requestParameters: RejectCallRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.callId !== undefined) {
            queryParameters['CallId'] = requestParameters.callId;
        }

        if (requestParameters.teacherId !== undefined) {
            queryParameters['TeacherId'] = requestParameters.teacherId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Teacher/RejectCall`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Öğretmene gelen anlık aramayı reddetmesini sağlar.
     */
    async rejectCall(requestParameters: RejectCallRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.rejectCallRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Öğrencinin öğretmeni rapor etmesini sağlar.
     */
    async reportTeacherRaw(requestParameters: ReportTeacherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.teacherId !== undefined) {
            queryParameters['TeacherId'] = requestParameters.teacherId;
        }

        if (requestParameters.content !== undefined) {
            queryParameters['Content'] = requestParameters.content;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Teacher/Report`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Öğrencinin öğretmeni rapor etmesini sağlar.
     */
    async reportTeacher(requestParameters: ReportTeacherRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.reportTeacherRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Kullanıcının tüm verisini dışarı aktarma işlemini başlatır. Halihazırda dışa aktarım dosyaları hazırlanıyorsa hata vermelidir.
     */
    async startToExportMyAllInformationsAsTeacherRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeacherCommandsStartToExportMyAllInformationsCommandResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Teacher/StartToExportMyAllInformations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeacherCommandsStartToExportMyAllInformationsCommandResultFromJSON(jsonValue));
    }

    /**
     * Kullanıcının tüm verisini dışarı aktarma işlemini başlatır. Halihazırda dışa aktarım dosyaları hazırlanıyorsa hata vermelidir.
     */
    async startToExportMyAllInformationsAsTeacher(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeacherCommandsStartToExportMyAllInformationsCommandResult> {
        const response = await this.startToExportMyAllInformationsAsTeacherRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async teacherRatePostRaw(requestParameters: TeacherRatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.teacherId !== undefined) {
            queryParameters['TeacherId'] = requestParameters.teacherId;
        }

        if (requestParameters.studentId !== undefined) {
            queryParameters['StudentId'] = requestParameters.studentId;
        }

        if (requestParameters.rate !== undefined) {
            queryParameters['Rate'] = requestParameters.rate;
        }

        if (requestParameters.comment !== undefined) {
            queryParameters['comment'] = requestParameters.comment;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Teacher/TeacherRatePost`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async teacherRatePost(requestParameters: TeacherRatePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.teacherRatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Öğrencinin öğretmenin engelini kaldırmasını sağlar.
     */
    async unblockTeacherRaw(requestParameters: UnblockTeacherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.teacherId !== undefined) {
            queryParameters['TeacherId'] = requestParameters.teacherId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Teacher/Unblock`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Öğrencinin öğretmenin engelini kaldırmasını sağlar.
     */
    async unblockTeacher(requestParameters: UnblockTeacherRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.unblockTeacherRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Öğrencinin öğretmeni favorilerinden kaldırmasını sağlar.
     */
    async unfavoriteTeacherRaw(requestParameters: UnfavoriteTeacherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.teacherId !== undefined) {
            queryParameters['TeacherId'] = requestParameters.teacherId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Teacher/Unfavorite`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Öğrencinin öğretmeni favorilerinden kaldırmasını sağlar.
     */
    async unfavoriteTeacher(requestParameters: UnfavoriteTeacherRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.unfavoriteTeacherRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Öğretmenin profil fotoğrafını değiştirmesini sağlar.
     */
    async updateMyProfilePhotoAsTeacherRaw(requestParameters: UpdateMyProfilePhotoAsTeacherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeacherCommandsUpdateProfilePhotoCommandResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.photo !== undefined) {
            formParams.append('Photo', requestParameters.photo as any);
        }

        const response = await this.request({
            path: `/api/Teacher/UpdateProfilePhoto`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeacherCommandsUpdateProfilePhotoCommandResultFromJSON(jsonValue));
    }

    /**
     * Öğretmenin profil fotoğrafını değiştirmesini sağlar.
     */
    async updateMyProfilePhotoAsTeacher(requestParameters: UpdateMyProfilePhotoAsTeacherRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeacherCommandsUpdateProfilePhotoCommandResult> {
        const response = await this.updateMyProfilePhotoAsTeacherRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Öğretmen\'in kendi uzmanlıklarını güncelleyebilmesini sağlar.
     */
    async updateMySpecalitiesRaw(requestParameters: UpdateMySpecalitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Teacher/UpdateMySpecalities`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TeacherCommandsUpdateMySpecalitiesParemetersToJSON(requestParameters.teacherCommandsUpdateMySpecalitiesParemeters),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Öğretmen\'in kendi uzmanlıklarını güncelleyebilmesini sağlar.
     */
    async updateMySpecalities(requestParameters: UpdateMySpecalitiesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.updateMySpecalitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
