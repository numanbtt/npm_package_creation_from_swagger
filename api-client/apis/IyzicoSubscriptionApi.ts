/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FluentValidationResultsValidationFailure,
  IyzicoSubscriptionCommandsCreateCommand,
  IyzicoSubscriptionCommandsCreateCommandResult,
  IyzicoSubscriptionCommandsUpdateCommand,
  IyzicoSubscriptionQueriesCommonSubscriptionDropdown,
  IyzicoSubscriptionQueriesIyzicoSubscriptionDetails,
  IyzicoSubscriptionQueriesListQueryResult,
} from '../models/index';
import {
    FluentValidationResultsValidationFailureFromJSON,
    FluentValidationResultsValidationFailureToJSON,
    IyzicoSubscriptionCommandsCreateCommandFromJSON,
    IyzicoSubscriptionCommandsCreateCommandToJSON,
    IyzicoSubscriptionCommandsCreateCommandResultFromJSON,
    IyzicoSubscriptionCommandsCreateCommandResultToJSON,
    IyzicoSubscriptionCommandsUpdateCommandFromJSON,
    IyzicoSubscriptionCommandsUpdateCommandToJSON,
    IyzicoSubscriptionQueriesCommonSubscriptionDropdownFromJSON,
    IyzicoSubscriptionQueriesCommonSubscriptionDropdownToJSON,
    IyzicoSubscriptionQueriesIyzicoSubscriptionDetailsFromJSON,
    IyzicoSubscriptionQueriesIyzicoSubscriptionDetailsToJSON,
    IyzicoSubscriptionQueriesListQueryResultFromJSON,
    IyzicoSubscriptionQueriesListQueryResultToJSON,
} from '../models/index';

export interface CreateSubscriptionRequest {
    iyzicoSubscriptionCommandsCreateCommand?: IyzicoSubscriptionCommandsCreateCommand;
}

export interface DeleteByIdSubscriptionPlanRequest {
    id?: number;
}

export interface GetDetailsByIdSubscriptionPlanRequest {
    id?: number;
}

export interface ListSubscriptionPlanRequest {
    page?: number;
    itemPerPage?: number;
    searchKeyword?: string;
}

export interface UpdateSubscriptionRequest {
    iyzicoSubscriptionCommandsUpdateCommand?: IyzicoSubscriptionCommandsUpdateCommand;
}

/**
 * 
 */
export class IyzicoSubscriptionApi extends runtime.BaseAPI {

    /**
     */
    async createSubscriptionRaw(requestParameters: CreateSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IyzicoSubscriptionCommandsCreateCommandResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/IyzicoSubscription/Create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IyzicoSubscriptionCommandsCreateCommandToJSON(requestParameters.iyzicoSubscriptionCommandsCreateCommand),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IyzicoSubscriptionCommandsCreateCommandResultFromJSON(jsonValue));
    }

    /**
     */
    async createSubscription(requestParameters: CreateSubscriptionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IyzicoSubscriptionCommandsCreateCommandResult> {
        const response = await this.createSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteByIdSubscriptionPlanRaw(requestParameters: DeleteByIdSubscriptionPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/IyzicoSubscription/DeleteSubscriptionPlan`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async deleteByIdSubscriptionPlan(requestParameters: DeleteByIdSubscriptionPlanRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.deleteByIdSubscriptionPlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDetailsByIdSubscriptionPlanRaw(requestParameters: GetDetailsByIdSubscriptionPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IyzicoSubscriptionQueriesIyzicoSubscriptionDetails>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/IyzicoSubscription/GetDetailsById`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IyzicoSubscriptionQueriesIyzicoSubscriptionDetailsFromJSON(jsonValue));
    }

    /**
     */
    async getDetailsByIdSubscriptionPlan(requestParameters: GetDetailsByIdSubscriptionPlanRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IyzicoSubscriptionQueriesIyzicoSubscriptionDetails> {
        const response = await this.getDetailsByIdSubscriptionPlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDropDownPackageDurationOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IyzicoSubscriptionQueriesCommonSubscriptionDropdown>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/IyzicoSubscription/GetDropDownPackageDurationOptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IyzicoSubscriptionQueriesCommonSubscriptionDropdownFromJSON));
    }

    /**
     */
    async getDropDownPackageDurationOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IyzicoSubscriptionQueriesCommonSubscriptionDropdown>> {
        const response = await this.getDropDownPackageDurationOptionsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getDropDownSubscriptionDayOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IyzicoSubscriptionQueriesCommonSubscriptionDropdown>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/IyzicoSubscription/GetDropDownSubscriptionDayOptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IyzicoSubscriptionQueriesCommonSubscriptionDropdownFromJSON));
    }

    /**
     */
    async getDropDownSubscriptionDayOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IyzicoSubscriptionQueriesCommonSubscriptionDropdown>> {
        const response = await this.getDropDownSubscriptionDayOptionsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getDropDownSubscriptionMinutesPerDayOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IyzicoSubscriptionQueriesCommonSubscriptionDropdown>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/IyzicoSubscription/GetDropDownSubscriptionMinutesPerDayOptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IyzicoSubscriptionQueriesCommonSubscriptionDropdownFromJSON));
    }

    /**
     */
    async getDropDownSubscriptionMinutesPerDayOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IyzicoSubscriptionQueriesCommonSubscriptionDropdown>> {
        const response = await this.getDropDownSubscriptionMinutesPerDayOptionsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async listSubscriptionPlanRaw(requestParameters: ListSubscriptionPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IyzicoSubscriptionQueriesListQueryResult>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.itemPerPage !== undefined) {
            queryParameters['ItemPerPage'] = requestParameters.itemPerPage;
        }

        if (requestParameters.searchKeyword !== undefined) {
            queryParameters['SearchKeyword'] = requestParameters.searchKeyword;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/IyzicoSubscription/List`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IyzicoSubscriptionQueriesListQueryResultFromJSON(jsonValue));
    }

    /**
     */
    async listSubscriptionPlan(requestParameters: ListSubscriptionPlanRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IyzicoSubscriptionQueriesListQueryResult> {
        const response = await this.listSubscriptionPlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateSubscriptionRaw(requestParameters: UpdateSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IyzicoSubscriptionCommandsCreateCommandResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/IyzicoSubscription/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IyzicoSubscriptionCommandsUpdateCommandToJSON(requestParameters.iyzicoSubscriptionCommandsUpdateCommand),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IyzicoSubscriptionCommandsCreateCommandResultFromJSON(jsonValue));
    }

    /**
     */
    async updateSubscription(requestParameters: UpdateSubscriptionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IyzicoSubscriptionCommandsCreateCommandResult> {
        const response = await this.updateSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
