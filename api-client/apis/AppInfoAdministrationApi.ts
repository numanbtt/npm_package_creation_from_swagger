/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FluentValidationResultsValidationFailure,
} from '../models/index';
import {
    FluentValidationResultsValidationFailureFromJSON,
    FluentValidationResultsValidationFailureToJSON,
} from '../models/index';

export interface ChangeAppCurrentAndroidVersionRequest {
    currentAndroidVersion?: string;
}

export interface ChangeAppCurrentIOSVersionRequest {
    currentIOSVersion?: string;
}

export interface ChangeAppMaintenanceStatusRequest {
    maintenanceStatus?: boolean;
}

export interface ChangeAppMinimumAndroidVersionRequest {
    minimumAndroidVersion?: string;
}

export interface ChangeAppMinimumIOSVersionRequest {
    minimumIOSVersion?: string;
}

/**
 * 
 */
export class AppInfoAdministrationApi extends runtime.BaseAPI {

    /**
     * Uygulamanın şu anki android versiyonunu değiştirir
     */
    async changeAppCurrentAndroidVersionRaw(requestParameters: ChangeAppCurrentAndroidVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.currentAndroidVersion !== undefined) {
            queryParameters['CurrentAndroidVersion'] = requestParameters.currentAndroidVersion;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/AppInfoAdministration/ChangeAppCurrentAndroidVersion`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Uygulamanın şu anki android versiyonunu değiştirir
     */
    async changeAppCurrentAndroidVersion(requestParameters: ChangeAppCurrentAndroidVersionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changeAppCurrentAndroidVersionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Uygulamanın şu anki ios versiyonunu değiştirir
     */
    async changeAppCurrentIOSVersionRaw(requestParameters: ChangeAppCurrentIOSVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.currentIOSVersion !== undefined) {
            queryParameters['CurrentIOSVersion'] = requestParameters.currentIOSVersion;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/AppInfoAdministration/ChangeAppCurrentIOSVersion`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Uygulamanın şu anki ios versiyonunu değiştirir
     */
    async changeAppCurrentIOSVersion(requestParameters: ChangeAppCurrentIOSVersionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changeAppCurrentIOSVersionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Uygulamanın bakım durumunu değiştirmeyi sağlar
     */
    async changeAppMaintenanceStatusRaw(requestParameters: ChangeAppMaintenanceStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.maintenanceStatus !== undefined) {
            queryParameters['MaintenanceStatus'] = requestParameters.maintenanceStatus;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/AppInfoAdministration/ChangeAppMaintenanceStatus`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Uygulamanın bakım durumunu değiştirmeyi sağlar
     */
    async changeAppMaintenanceStatus(requestParameters: ChangeAppMaintenanceStatusRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changeAppMaintenanceStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Uygulamanın minimum android versiyonunu değiştirir
     */
    async changeAppMinimumAndroidVersionRaw(requestParameters: ChangeAppMinimumAndroidVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.minimumAndroidVersion !== undefined) {
            queryParameters['MinimumAndroidVersion'] = requestParameters.minimumAndroidVersion;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/AppInfoAdministration/ChangeAppMinimumAndroidVersion`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Uygulamanın minimum android versiyonunu değiştirir
     */
    async changeAppMinimumAndroidVersion(requestParameters: ChangeAppMinimumAndroidVersionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changeAppMinimumAndroidVersionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Uygulamanın minimum ios versiyonunu değiştirir
     */
    async changeAppMinimumIOSVersionRaw(requestParameters: ChangeAppMinimumIOSVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.minimumIOSVersion !== undefined) {
            queryParameters['MinimumIOSVersion'] = requestParameters.minimumIOSVersion;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/AppInfoAdministration/ChangeAppMinimumIOSVersion`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Uygulamanın minimum ios versiyonunu değiştirir
     */
    async changeAppMinimumIOSVersion(requestParameters: ChangeAppMinimumIOSVersionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changeAppMinimumIOSVersionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
