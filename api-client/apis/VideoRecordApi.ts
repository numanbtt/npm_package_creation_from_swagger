/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FluentValidationResultsValidationFailure,
  VideoRecordQueriesListQueryResult,
} from '../models/index';
import {
    FluentValidationResultsValidationFailureFromJSON,
    FluentValidationResultsValidationFailureToJSON,
    VideoRecordQueriesListQueryResultFromJSON,
    VideoRecordQueriesListQueryResultToJSON,
} from '../models/index';

export interface ListVideoRecordsRequest {
    lastVideoRecordId?: number;
    query?: string;
}

export interface VideoRecordWatchedRequest {
    videoRecordId?: number;
}

/**
 * 
 */
export class VideoRecordApi extends runtime.BaseAPI {

    /**
     * Geçmiş video kayıtlarını listeler.
     */
    async listVideoRecordsRaw(requestParameters: ListVideoRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VideoRecordQueriesListQueryResult>> {
        const queryParameters: any = {};

        if (requestParameters.lastVideoRecordId !== undefined) {
            queryParameters['LastVideoRecordId'] = requestParameters.lastVideoRecordId;
        }

        if (requestParameters.query !== undefined) {
            queryParameters['Query'] = requestParameters.query;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/VideoRecord/List`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VideoRecordQueriesListQueryResultFromJSON(jsonValue));
    }

    /**
     * Geçmiş video kayıtlarını listeler.
     */
    async listVideoRecords(requestParameters: ListVideoRecordsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VideoRecordQueriesListQueryResult> {
        const response = await this.listVideoRecordsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Geçmiş bir videonun izlediğini sunucuya bildirir.
     */
    async videoRecordWatchedRaw(requestParameters: VideoRecordWatchedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.videoRecordId !== undefined) {
            queryParameters['VideoRecordId'] = requestParameters.videoRecordId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/VideoRecord/VideoRecordWatched`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Geçmiş bir videonun izlediğini sunucuya bildirir.
     */
    async videoRecordWatched(requestParameters: VideoRecordWatchedRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.videoRecordWatchedRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
