/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FluentValidationResultsValidationFailure,
  PaymentCommandsSubscriptionCommandResult,
  PaymentCommandsSubscriptionPackageDetails,
  PaymentQueriesListDropDownSubscriptionOptionsQueryResult,
  PaymentQueriesListSubscriptionOptionsQueryResult,
} from '../models/index';
import {
    FluentValidationResultsValidationFailureFromJSON,
    FluentValidationResultsValidationFailureToJSON,
    PaymentCommandsSubscriptionCommandResultFromJSON,
    PaymentCommandsSubscriptionCommandResultToJSON,
    PaymentCommandsSubscriptionPackageDetailsFromJSON,
    PaymentCommandsSubscriptionPackageDetailsToJSON,
    PaymentQueriesListDropDownSubscriptionOptionsQueryResultFromJSON,
    PaymentQueriesListDropDownSubscriptionOptionsQueryResultToJSON,
    PaymentQueriesListSubscriptionOptionsQueryResultFromJSON,
    PaymentQueriesListSubscriptionOptionsQueryResultToJSON,
} from '../models/index';

export interface CancelCurrentSubscriptionRequest {
    reason?: string;
}

export interface SubscribeRequest {
    paymentCommandsSubscriptionPackageDetails?: PaymentCommandsSubscriptionPackageDetails;
}

/**
 * 
 */
export class PaymentApi extends runtime.BaseAPI {

    /**
     * Kullanıcının şu anki aboneliğini iptal eder. Bu durumda kullanıcı ödeme dönemi sonuna kadar haklarından faydalanabilir veya aboneliğini tekrar aktif hale getirebilir.
     */
    async cancelCurrentSubscriptionRaw(requestParameters: CancelCurrentSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.reason !== undefined) {
            queryParameters['Reason'] = requestParameters.reason;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Payment/CancelCurrentSubscription`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Kullanıcının şu anki aboneliğini iptal eder. Bu durumda kullanıcı ödeme dönemi sonuna kadar haklarından faydalanabilir veya aboneliğini tekrar aktif hale getirebilir.
     */
    async cancelCurrentSubscription(requestParameters: CancelCurrentSubscriptionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.cancelCurrentSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listDropDownSubscriptionOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaymentQueriesListDropDownSubscriptionOptionsQueryResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Payment/ListDropDownSubscriptionOptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentQueriesListDropDownSubscriptionOptionsQueryResultFromJSON(jsonValue));
    }

    /**
     */
    async listDropDownSubscriptionOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaymentQueriesListDropDownSubscriptionOptionsQueryResult> {
        const response = await this.listDropDownSubscriptionOptionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Abonelik seçeneklerini getirir.
     */
    async listSubscriptionOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaymentQueriesListSubscriptionOptionsQueryResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Payment/ListSubscriptionOptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentQueriesListSubscriptionOptionsQueryResultFromJSON(jsonValue));
    }

    /**
     * Abonelik seçeneklerini getirir.
     */
    async listSubscriptionOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaymentQueriesListSubscriptionOptionsQueryResult> {
        const response = await this.listSubscriptionOptionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Öğrencinin abonelik başlatmasını veya abonelik tipini değiştirmesini sağlar.
     */
    async subscribeRaw(requestParameters: SubscribeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaymentCommandsSubscriptionCommandResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Payment/Subscribe`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentCommandsSubscriptionPackageDetailsToJSON(requestParameters.paymentCommandsSubscriptionPackageDetails),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentCommandsSubscriptionCommandResultFromJSON(jsonValue));
    }

    /**
     * Öğrencinin abonelik başlatmasını veya abonelik tipini değiştirmesini sağlar.
     */
    async subscribe(requestParameters: SubscribeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaymentCommandsSubscriptionCommandResult> {
        const response = await this.subscribeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
