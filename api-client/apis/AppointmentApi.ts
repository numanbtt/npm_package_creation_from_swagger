/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AppointmentCommandsCreateCommandResult,
  AppointmentCommandsReportAsStudentCommandResult,
  AppointmentCommandsReportAsTeacherCommandResult,
  AppointmentCommandsSelectedTimeRange,
  AppointmentQueriesListMyAppointmentsQueryResult,
  FluentValidationResultsValidationFailure,
} from '../models/index';
import {
    AppointmentCommandsCreateCommandResultFromJSON,
    AppointmentCommandsCreateCommandResultToJSON,
    AppointmentCommandsReportAsStudentCommandResultFromJSON,
    AppointmentCommandsReportAsStudentCommandResultToJSON,
    AppointmentCommandsReportAsTeacherCommandResultFromJSON,
    AppointmentCommandsReportAsTeacherCommandResultToJSON,
    AppointmentCommandsSelectedTimeRangeFromJSON,
    AppointmentCommandsSelectedTimeRangeToJSON,
    AppointmentQueriesListMyAppointmentsQueryResultFromJSON,
    AppointmentQueriesListMyAppointmentsQueryResultToJSON,
    FluentValidationResultsValidationFailureFromJSON,
    FluentValidationResultsValidationFailureToJSON,
} from '../models/index';

export interface CancelAppointmentAsStudentRequest {
    appointmentId?: number;
    reason?: string;
}

export interface CancelAppointmentAsTeacherRequest {
    appointmentId?: number;
    reason?: string;
}

export interface ChangeDateTimeAsStudentRequest {
    appointmentId?: number;
    startTime?: Date;
    endTime?: Date;
    reason?: string;
}

export interface ChangeDateTimeAsTeacherRequest {
    appointmentId?: number;
    startTime?: Date;
    endTime?: Date;
    reason?: string;
}

export interface CreateAppointmentRequest {
    teacherId?: number;
    infoTimeZone?: string;
    appointmentCommandsSelectedTimeRange?: AppointmentCommandsSelectedTimeRange;
}

export interface ListMyAppointmentsRequest {
    lastId?: number;
}

export interface ReportAppointmentAsStudentRequest {
    appointmentId?: number;
    title?: string;
    description?: string;
}

export interface ReportAppointmentAsTeacherRequest {
    appointmentId?: number;
    title?: string;
    description?: string;
}

/**
 * 
 */
export class AppointmentApi extends runtime.BaseAPI {

    /**
     * Öğrencinin dahil olduğu bir randevuyu iptal etmesini sağlar. Randevunun başlangıcına minimum 1 saat kala iptal işlemi gerçekleştirilebilir.
     */
    async cancelAppointmentAsStudentRaw(requestParameters: CancelAppointmentAsStudentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.appointmentId !== undefined) {
            queryParameters['AppointmentId'] = requestParameters.appointmentId;
        }

        if (requestParameters.reason !== undefined) {
            queryParameters['Reason'] = requestParameters.reason;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Appointment/CancelAsStudent`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Öğrencinin dahil olduğu bir randevuyu iptal etmesini sağlar. Randevunun başlangıcına minimum 1 saat kala iptal işlemi gerçekleştirilebilir.
     */
    async cancelAppointmentAsStudent(requestParameters: CancelAppointmentAsStudentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.cancelAppointmentAsStudentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Öğretmenin dahil olduğu bir randevuyu iptal etmesini sağlar. Randevunun başlangıcına minimum 15 dakika kala iptal işlemi gerçekleştirilebilir.
     */
    async cancelAppointmentAsTeacherRaw(requestParameters: CancelAppointmentAsTeacherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.appointmentId !== undefined) {
            queryParameters['AppointmentId'] = requestParameters.appointmentId;
        }

        if (requestParameters.reason !== undefined) {
            queryParameters['Reason'] = requestParameters.reason;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Appointment/CancelAsTeacher`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Öğretmenin dahil olduğu bir randevuyu iptal etmesini sağlar. Randevunun başlangıcına minimum 15 dakika kala iptal işlemi gerçekleştirilebilir.
     */
    async cancelAppointmentAsTeacher(requestParameters: CancelAppointmentAsTeacherRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.cancelAppointmentAsTeacherRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Öğrenci olarak randevu vaktini değiştirmeye yarar. Değiştirilebilmesi için randevuya minimum 1 saat kalmış olması gerekir. Aynı gün içinde, aynı randevu üzerinde sadece 1 kere değişiklik yapılabilir. Bunun dışındaki değişiklikler için sistem yöneticisiyle irtibata geçilmesi gerekir.
     */
    async changeDateTimeAsStudentRaw(requestParameters: ChangeDateTimeAsStudentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.appointmentId !== undefined) {
            queryParameters['AppointmentId'] = requestParameters.appointmentId;
        }

        if (requestParameters.startTime !== undefined) {
            queryParameters['StartTime'] = (requestParameters.startTime as any).toISOString();
        }

        if (requestParameters.endTime !== undefined) {
            queryParameters['EndTime'] = (requestParameters.endTime as any).toISOString();
        }

        if (requestParameters.reason !== undefined) {
            queryParameters['Reason'] = requestParameters.reason;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Appointment/ChangeDateTimeAsStudent`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Öğrenci olarak randevu vaktini değiştirmeye yarar. Değiştirilebilmesi için randevuya minimum 1 saat kalmış olması gerekir. Aynı gün içinde, aynı randevu üzerinde sadece 1 kere değişiklik yapılabilir. Bunun dışındaki değişiklikler için sistem yöneticisiyle irtibata geçilmesi gerekir.
     */
    async changeDateTimeAsStudent(requestParameters: ChangeDateTimeAsStudentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changeDateTimeAsStudentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Randevu vaktini değiştirmeye yarar. Değiştirilebilmesi için randevuya minimum 15 dakika kalmış olması gerekir. Aynı gün içinde, aynı randevu üzerinde sadece 1 kere değişiklik yapılabilir. Bunun dışındaki değişiklikler için sistem yöneticisiyle irtibata geçilmesi gerekir.
     */
    async changeDateTimeAsTeacherRaw(requestParameters: ChangeDateTimeAsTeacherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.appointmentId !== undefined) {
            queryParameters['AppointmentId'] = requestParameters.appointmentId;
        }

        if (requestParameters.startTime !== undefined) {
            queryParameters['StartTime'] = (requestParameters.startTime as any).toISOString();
        }

        if (requestParameters.endTime !== undefined) {
            queryParameters['EndTime'] = (requestParameters.endTime as any).toISOString();
        }

        if (requestParameters.reason !== undefined) {
            queryParameters['Reason'] = requestParameters.reason;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Appointment/ChangeDateTimeAsTeacher`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Randevu vaktini değiştirmeye yarar. Değiştirilebilmesi için randevuya minimum 15 dakika kalmış olması gerekir. Aynı gün içinde, aynı randevu üzerinde sadece 1 kere değişiklik yapılabilir. Bunun dışındaki değişiklikler için sistem yöneticisiyle irtibata geçilmesi gerekir.
     */
    async changeDateTimeAsTeacher(requestParameters: ChangeDateTimeAsTeacherRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changeDateTimeAsTeacherRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Öğrencinin öğretmenden randevu almasını sağlar.
     */
    async createAppointmentRaw(requestParameters: CreateAppointmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppointmentCommandsCreateCommandResult>> {
        const queryParameters: any = {};

        if (requestParameters.teacherId !== undefined) {
            queryParameters['TeacherId'] = requestParameters.teacherId;
        }

        if (requestParameters.infoTimeZone !== undefined) {
            queryParameters['InfoTimeZone'] = requestParameters.infoTimeZone;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Appointment/Create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppointmentCommandsSelectedTimeRangeToJSON(requestParameters.appointmentCommandsSelectedTimeRange),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppointmentCommandsCreateCommandResultFromJSON(jsonValue));
    }

    /**
     * Öğrencinin öğretmenden randevu almasını sağlar.
     */
    async createAppointment(requestParameters: CreateAppointmentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppointmentCommandsCreateCommandResult> {
        const response = await this.createAppointmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Hesabın içinde bulunduğu randevuların listesini getirir.
     */
    async listMyAppointmentsRaw(requestParameters: ListMyAppointmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppointmentQueriesListMyAppointmentsQueryResult>> {
        const queryParameters: any = {};

        if (requestParameters.lastId !== undefined) {
            queryParameters['LastId'] = requestParameters.lastId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Appointment/ListMyAppointments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppointmentQueriesListMyAppointmentsQueryResultFromJSON(jsonValue));
    }

    /**
     * Hesabın içinde bulunduğu randevuların listesini getirir.
     */
    async listMyAppointments(requestParameters: ListMyAppointmentsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppointmentQueriesListMyAppointmentsQueryResult> {
        const response = await this.listMyAppointmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Öğrencinin randevuyu şikayet etmesini sağlar.
     */
    async reportAppointmentAsStudentRaw(requestParameters: ReportAppointmentAsStudentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppointmentCommandsReportAsStudentCommandResult>> {
        const queryParameters: any = {};

        if (requestParameters.appointmentId !== undefined) {
            queryParameters['AppointmentId'] = requestParameters.appointmentId;
        }

        if (requestParameters.title !== undefined) {
            queryParameters['Title'] = requestParameters.title;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['Description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Appointment/ReportAsStudent`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppointmentCommandsReportAsStudentCommandResultFromJSON(jsonValue));
    }

    /**
     * Öğrencinin randevuyu şikayet etmesini sağlar.
     */
    async reportAppointmentAsStudent(requestParameters: ReportAppointmentAsStudentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppointmentCommandsReportAsStudentCommandResult> {
        const response = await this.reportAppointmentAsStudentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Öğretmenin randevuyu şikayet etmesini sağlar.
     */
    async reportAppointmentAsTeacherRaw(requestParameters: ReportAppointmentAsTeacherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppointmentCommandsReportAsTeacherCommandResult>> {
        const queryParameters: any = {};

        if (requestParameters.appointmentId !== undefined) {
            queryParameters['AppointmentId'] = requestParameters.appointmentId;
        }

        if (requestParameters.title !== undefined) {
            queryParameters['Title'] = requestParameters.title;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['Description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Appointment/ReportAsTeacher`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppointmentCommandsReportAsTeacherCommandResultFromJSON(jsonValue));
    }

    /**
     * Öğretmenin randevuyu şikayet etmesini sağlar.
     */
    async reportAppointmentAsTeacher(requestParameters: ReportAppointmentAsTeacherRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppointmentCommandsReportAsTeacherCommandResult> {
        const response = await this.reportAppointmentAsTeacherRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
