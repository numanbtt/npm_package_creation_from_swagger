/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FluentValidationResultsValidationFailure,
  WordTutorialAdministrationCommandsAddTranslationCommandResult,
  WordTutorialAdministrationCommandsChangeYoutubeUrlCommandResult,
  WordTutorialAdministrationCommandsCreateCommandResult,
  WordTutorialAdministrationCommandsDeleteWordTutorialList,
  WordTutorialAdministrationCommandsPostWordTutorialTranslation,
  WordTutorialAdministrationQueriesListQueryResult,
} from '../models/index';
import {
    FluentValidationResultsValidationFailureFromJSON,
    FluentValidationResultsValidationFailureToJSON,
    WordTutorialAdministrationCommandsAddTranslationCommandResultFromJSON,
    WordTutorialAdministrationCommandsAddTranslationCommandResultToJSON,
    WordTutorialAdministrationCommandsChangeYoutubeUrlCommandResultFromJSON,
    WordTutorialAdministrationCommandsChangeYoutubeUrlCommandResultToJSON,
    WordTutorialAdministrationCommandsCreateCommandResultFromJSON,
    WordTutorialAdministrationCommandsCreateCommandResultToJSON,
    WordTutorialAdministrationCommandsDeleteWordTutorialListFromJSON,
    WordTutorialAdministrationCommandsDeleteWordTutorialListToJSON,
    WordTutorialAdministrationCommandsPostWordTutorialTranslationFromJSON,
    WordTutorialAdministrationCommandsPostWordTutorialTranslationToJSON,
    WordTutorialAdministrationQueriesListQueryResultFromJSON,
    WordTutorialAdministrationQueriesListQueryResultToJSON,
} from '../models/index';

export interface AddTranslationToTheWordTutorialRequest {
    wordTutorialId?: number;
    languageCode?: string;
    isRtlLanguage?: boolean;
    content?: string;
}

export interface BulkDeleteWordTutorialsRequest {
    wordTutorialAdministrationCommandsDeleteWordTutorialList?: Array<WordTutorialAdministrationCommandsDeleteWordTutorialList>;
}

export interface ChangeTranslationContentOfTheWordTutorialRequest {
    wordTutorialId?: number;
    translationLanguageCode?: string;
    newContent?: string;
}

export interface ChangeTranslationTextDirectionOfTheWordTutorialRequest {
    wordTutorialTranslationId?: number;
    isNewStateRightToLeft?: boolean;
}

export interface ChangeYoutubeUrlOfTheWordTutorialRequest {
    wordTutorialId?: number;
    newYoutubeUrl?: string;
}

export interface CreateWordTutorialRequest {
    wordTutorialCategoryId?: number;
    slug?: string;
    youtubeUrl?: string;
    accent?: string;
    languageLevel?: string;
    wordTutorialAdministrationCommandsPostWordTutorialTranslation?: Array<WordTutorialAdministrationCommandsPostWordTutorialTranslation>;
}

export interface DeleteWordTutorialRequest {
    wordTutorialId?: number;
}

export interface ListWordTutorialsForAdministrationRequest {
    wordTutorialCategoryId: number;
}

export interface RemoveTranslationFromTheWordTutorialRequest {
    wordTutorialTranslationId?: number;
}

export interface UpdateWordTutorialRequest {
    wordTutorialId?: number;
    wordTutorialCategoryId?: number;
    slug?: string;
    youtubeUrl?: string;
    accent?: string;
    languageLevel?: string;
    wordTutorialAdministrationCommandsPostWordTutorialTranslation?: Array<WordTutorialAdministrationCommandsPostWordTutorialTranslation>;
}

/**
 * 
 */
export class WordTutorialAdministrationApi extends runtime.BaseAPI {

    /**
     * Kelime eğitimine yeni bir çeviri ekler.
     */
    async addTranslationToTheWordTutorialRaw(requestParameters: AddTranslationToTheWordTutorialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WordTutorialAdministrationCommandsAddTranslationCommandResult>> {
        const queryParameters: any = {};

        if (requestParameters.wordTutorialId !== undefined) {
            queryParameters['WordTutorialId'] = requestParameters.wordTutorialId;
        }

        if (requestParameters.languageCode !== undefined) {
            queryParameters['LanguageCode'] = requestParameters.languageCode;
        }

        if (requestParameters.isRtlLanguage !== undefined) {
            queryParameters['IsRtlLanguage'] = requestParameters.isRtlLanguage;
        }

        if (requestParameters.content !== undefined) {
            queryParameters['Content'] = requestParameters.content;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/WordTutorialAdministration/AddTranslation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WordTutorialAdministrationCommandsAddTranslationCommandResultFromJSON(jsonValue));
    }

    /**
     * Kelime eğitimine yeni bir çeviri ekler.
     */
    async addTranslationToTheWordTutorial(requestParameters: AddTranslationToTheWordTutorialRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WordTutorialAdministrationCommandsAddTranslationCommandResult> {
        const response = await this.addTranslationToTheWordTutorialRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Kelime eğitimlerinin silinmesini sağlar
     */
    async bulkDeleteWordTutorialsRaw(requestParameters: BulkDeleteWordTutorialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/WordTutorialAdministration/BulkDelete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.wordTutorialAdministrationCommandsDeleteWordTutorialList.map(WordTutorialAdministrationCommandsDeleteWordTutorialListToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Kelime eğitimlerinin silinmesini sağlar
     */
    async bulkDeleteWordTutorials(requestParameters: BulkDeleteWordTutorialsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.bulkDeleteWordTutorialsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bir çevirinin içeriğinin değiştirilmesini sağlar.
     */
    async changeTranslationContentOfTheWordTutorialRaw(requestParameters: ChangeTranslationContentOfTheWordTutorialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.wordTutorialId !== undefined) {
            queryParameters['WordTutorialId'] = requestParameters.wordTutorialId;
        }

        if (requestParameters.translationLanguageCode !== undefined) {
            queryParameters['TranslationLanguageCode'] = requestParameters.translationLanguageCode;
        }

        if (requestParameters.newContent !== undefined) {
            queryParameters['NewContent'] = requestParameters.newContent;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/WordTutorialAdministration/ChangeTranslationContent`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Bir çevirinin içeriğinin değiştirilmesini sağlar.
     */
    async changeTranslationContentOfTheWordTutorial(requestParameters: ChangeTranslationContentOfTheWordTutorialRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changeTranslationContentOfTheWordTutorialRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bir çevirinin yazım yönünü değiştirir.
     */
    async changeTranslationTextDirectionOfTheWordTutorialRaw(requestParameters: ChangeTranslationTextDirectionOfTheWordTutorialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.wordTutorialTranslationId !== undefined) {
            queryParameters['WordTutorialTranslationId'] = requestParameters.wordTutorialTranslationId;
        }

        if (requestParameters.isNewStateRightToLeft !== undefined) {
            queryParameters['IsNewStateRightToLeft'] = requestParameters.isNewStateRightToLeft;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/WordTutorialAdministration/ChangeTranslationTextDirection`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Bir çevirinin yazım yönünü değiştirir.
     */
    async changeTranslationTextDirectionOfTheWordTutorial(requestParameters: ChangeTranslationTextDirectionOfTheWordTutorialRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changeTranslationTextDirectionOfTheWordTutorialRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Kelime eğitiminin youtube linkini değiştirmeyi sağlar
     */
    async changeYoutubeUrlOfTheWordTutorialRaw(requestParameters: ChangeYoutubeUrlOfTheWordTutorialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WordTutorialAdministrationCommandsChangeYoutubeUrlCommandResult>> {
        const queryParameters: any = {};

        if (requestParameters.wordTutorialId !== undefined) {
            queryParameters['WordTutorialId'] = requestParameters.wordTutorialId;
        }

        if (requestParameters.newYoutubeUrl !== undefined) {
            queryParameters['NewYoutubeUrl'] = requestParameters.newYoutubeUrl;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/WordTutorialAdministration/ChangeYoutubeUrl`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WordTutorialAdministrationCommandsChangeYoutubeUrlCommandResultFromJSON(jsonValue));
    }

    /**
     * Kelime eğitiminin youtube linkini değiştirmeyi sağlar
     */
    async changeYoutubeUrlOfTheWordTutorial(requestParameters: ChangeYoutubeUrlOfTheWordTutorialRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WordTutorialAdministrationCommandsChangeYoutubeUrlCommandResult> {
        const response = await this.changeYoutubeUrlOfTheWordTutorialRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Kelime eğitimi eklemeyi sağlar
     */
    async createWordTutorialRaw(requestParameters: CreateWordTutorialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WordTutorialAdministrationCommandsCreateCommandResult>> {
        const queryParameters: any = {};

        if (requestParameters.wordTutorialCategoryId !== undefined) {
            queryParameters['WordTutorialCategoryId'] = requestParameters.wordTutorialCategoryId;
        }

        if (requestParameters.slug !== undefined) {
            queryParameters['Slug'] = requestParameters.slug;
        }

        if (requestParameters.youtubeUrl !== undefined) {
            queryParameters['YoutubeUrl'] = requestParameters.youtubeUrl;
        }

        if (requestParameters.accent !== undefined) {
            queryParameters['Accent'] = requestParameters.accent;
        }

        if (requestParameters.languageLevel !== undefined) {
            queryParameters['LanguageLevel'] = requestParameters.languageLevel;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/WordTutorialAdministration/Create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.wordTutorialAdministrationCommandsPostWordTutorialTranslation.map(WordTutorialAdministrationCommandsPostWordTutorialTranslationToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WordTutorialAdministrationCommandsCreateCommandResultFromJSON(jsonValue));
    }

    /**
     * Kelime eğitimi eklemeyi sağlar
     */
    async createWordTutorial(requestParameters: CreateWordTutorialRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WordTutorialAdministrationCommandsCreateCommandResult> {
        const response = await this.createWordTutorialRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Kelime eğitiminin silinmesini sağlar
     */
    async deleteWordTutorialRaw(requestParameters: DeleteWordTutorialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.wordTutorialId !== undefined) {
            queryParameters['WordTutorialId'] = requestParameters.wordTutorialId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/WordTutorialAdministration/Delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Kelime eğitiminin silinmesini sağlar
     */
    async deleteWordTutorial(requestParameters: DeleteWordTutorialRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteWordTutorialRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Kelime eğitimlerini listelemeyi sağlar
     */
    async listWordTutorialsForAdministrationRaw(requestParameters: ListWordTutorialsForAdministrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WordTutorialAdministrationQueriesListQueryResult>> {
        if (requestParameters.wordTutorialCategoryId === null || requestParameters.wordTutorialCategoryId === undefined) {
            throw new runtime.RequiredError('wordTutorialCategoryId','Required parameter requestParameters.wordTutorialCategoryId was null or undefined when calling listWordTutorialsForAdministration.');
        }

        const queryParameters: any = {};

        if (requestParameters.wordTutorialCategoryId !== undefined) {
            queryParameters['WordTutorialCategoryId'] = requestParameters.wordTutorialCategoryId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/WordTutorialAdministration/List`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WordTutorialAdministrationQueriesListQueryResultFromJSON(jsonValue));
    }

    /**
     * Kelime eğitimlerini listelemeyi sağlar
     */
    async listWordTutorialsForAdministration(requestParameters: ListWordTutorialsForAdministrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WordTutorialAdministrationQueriesListQueryResult> {
        const response = await this.listWordTutorialsForAdministrationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Kelime eğitiminden bir çevirinin silinmesini sağlar.
     */
    async removeTranslationFromTheWordTutorialRaw(requestParameters: RemoveTranslationFromTheWordTutorialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.wordTutorialTranslationId !== undefined) {
            queryParameters['WordTutorialTranslationId'] = requestParameters.wordTutorialTranslationId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/WordTutorialAdministration/RemoveTranslation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Kelime eğitiminden bir çevirinin silinmesini sağlar.
     */
    async removeTranslationFromTheWordTutorial(requestParameters: RemoveTranslationFromTheWordTutorialRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.removeTranslationFromTheWordTutorialRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Kelime eğitimi eklemeyi sağlar
     */
    async updateWordTutorialRaw(requestParameters: UpdateWordTutorialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WordTutorialAdministrationCommandsCreateCommandResult>> {
        const queryParameters: any = {};

        if (requestParameters.wordTutorialId !== undefined) {
            queryParameters['WordTutorialId'] = requestParameters.wordTutorialId;
        }

        if (requestParameters.wordTutorialCategoryId !== undefined) {
            queryParameters['WordTutorialCategoryId'] = requestParameters.wordTutorialCategoryId;
        }

        if (requestParameters.slug !== undefined) {
            queryParameters['Slug'] = requestParameters.slug;
        }

        if (requestParameters.youtubeUrl !== undefined) {
            queryParameters['YoutubeUrl'] = requestParameters.youtubeUrl;
        }

        if (requestParameters.accent !== undefined) {
            queryParameters['Accent'] = requestParameters.accent;
        }

        if (requestParameters.languageLevel !== undefined) {
            queryParameters['LanguageLevel'] = requestParameters.languageLevel;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/WordTutorialAdministration/Update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.wordTutorialAdministrationCommandsPostWordTutorialTranslation.map(WordTutorialAdministrationCommandsPostWordTutorialTranslationToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WordTutorialAdministrationCommandsCreateCommandResultFromJSON(jsonValue));
    }

    /**
     * Kelime eğitimi eklemeyi sağlar
     */
    async updateWordTutorial(requestParameters: UpdateWordTutorialRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WordTutorialAdministrationCommandsCreateCommandResult> {
        const response = await this.updateWordTutorialRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
