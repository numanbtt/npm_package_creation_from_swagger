/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FluentValidationResultsValidationFailure,
  LegalDocumentAdministrationQueriesGetAllQueryResult,
} from '../models/index';
import {
    FluentValidationResultsValidationFailureFromJSON,
    FluentValidationResultsValidationFailureToJSON,
    LegalDocumentAdministrationQueriesGetAllQueryResultFromJSON,
    LegalDocumentAdministrationQueriesGetAllQueryResultToJSON,
} from '../models/index';

export interface ChangeContentOfTheLegalDocumentRequest {
    legalDocumentId?: number;
    content?: string;
}

export interface ChangeSlugOfTheLegalDocumentRequest {
    legalDocumentId?: number;
    slug?: string;
}

export interface ChangeTitleOfTheLegalDocumentRequest {
    legalDocumentId?: number;
    title?: string;
}

/**
 * 
 */
export class LegalDocumentAdministrationApi extends runtime.BaseAPI {

    /**
     * Belirlenen dökümanın içeriğini değiştirir.
     */
    async changeContentOfTheLegalDocumentRaw(requestParameters: ChangeContentOfTheLegalDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.legalDocumentId !== undefined) {
            queryParameters['LegalDocumentId'] = requestParameters.legalDocumentId;
        }

        if (requestParameters.content !== undefined) {
            queryParameters['Content'] = requestParameters.content;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/LegalDocumentAdministration/ChangeContent`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Belirlenen dökümanın içeriğini değiştirir.
     */
    async changeContentOfTheLegalDocument(requestParameters: ChangeContentOfTheLegalDocumentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changeContentOfTheLegalDocumentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Belirlenen dökümanın kısa adını değiştirir.
     */
    async changeSlugOfTheLegalDocumentRaw(requestParameters: ChangeSlugOfTheLegalDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.legalDocumentId !== undefined) {
            queryParameters['LegalDocumentId'] = requestParameters.legalDocumentId;
        }

        if (requestParameters.slug !== undefined) {
            queryParameters['Slug'] = requestParameters.slug;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/LegalDocumentAdministration/ChangeSlug`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Belirlenen dökümanın kısa adını değiştirir.
     */
    async changeSlugOfTheLegalDocument(requestParameters: ChangeSlugOfTheLegalDocumentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changeSlugOfTheLegalDocumentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Belirlenen dökümanın başlığını değiştirir.
     */
    async changeTitleOfTheLegalDocumentRaw(requestParameters: ChangeTitleOfTheLegalDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.legalDocumentId !== undefined) {
            queryParameters['LegalDocumentId'] = requestParameters.legalDocumentId;
        }

        if (requestParameters.title !== undefined) {
            queryParameters['Title'] = requestParameters.title;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/LegalDocumentAdministration/ChangeTitle`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Belirlenen dökümanın başlığını değiştirir.
     */
    async changeTitleOfTheLegalDocument(requestParameters: ChangeTitleOfTheLegalDocumentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changeTitleOfTheLegalDocumentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sistemde kayıtlı tüm yasal dökümanları getirir.
     */
    async getAllLegalDocumentsForAdministrationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LegalDocumentAdministrationQueriesGetAllQueryResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/LegalDocumentAdministration/GetAll`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LegalDocumentAdministrationQueriesGetAllQueryResultFromJSON(jsonValue));
    }

    /**
     * Sistemde kayıtlı tüm yasal dökümanları getirir.
     */
    async getAllLegalDocumentsForAdministration(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LegalDocumentAdministrationQueriesGetAllQueryResult> {
        const response = await this.getAllLegalDocumentsForAdministrationRaw(initOverrides);
        return await response.value();
    }

}
