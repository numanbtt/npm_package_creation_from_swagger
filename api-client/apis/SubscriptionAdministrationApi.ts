/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FluentValidationResultsValidationFailure,
  SubscriptionAdministrationCommandsAddPackageDurationOptionCommandResult,
  SubscriptionAdministrationQueriesListSubscriptionDropdownOptionsQueryResult,
  SubscriptionAdministrationQueriesListSubscriptionOptionsQueryResult,
} from '../models/index';
import {
    FluentValidationResultsValidationFailureFromJSON,
    FluentValidationResultsValidationFailureToJSON,
    SubscriptionAdministrationCommandsAddPackageDurationOptionCommandResultFromJSON,
    SubscriptionAdministrationCommandsAddPackageDurationOptionCommandResultToJSON,
    SubscriptionAdministrationQueriesListSubscriptionDropdownOptionsQueryResultFromJSON,
    SubscriptionAdministrationQueriesListSubscriptionDropdownOptionsQueryResultToJSON,
    SubscriptionAdministrationQueriesListSubscriptionOptionsQueryResultFromJSON,
    SubscriptionAdministrationQueriesListSubscriptionOptionsQueryResultToJSON,
} from '../models/index';

export interface AddDayOptionToSubscriptionPackagesRequest {
    day?: number;
}

export interface AddMinutesPerDayOptionToSubscriptionPackagesRequest {
    minutes?: number;
}

export interface AddPackageDurationOptionToSubscriptionPackagesRequest {
    durationName?: string;
    durationAsMonth?: number;
    discountRate?: number;
    description?: string;
    dayOptionId?: number;
    minuteOptionId?: number;
    pricePerMint?: number;
    discountedAmount?: number;
    total?: number;
    totalDiscounted?: number;
    totalMinutes?: number;
}

export interface ChangePricePerMinuteForSubscriptionPackagesRequest {
    price?: number;
}

export interface RemoveDayOptionFromSubscriptionPackagesRequest {
    day?: number;
}

export interface RemoveMinutesPerDayOptionFromSubscriptionPackagesRequest {
    day?: number;
}

export interface RemovePackageDurationOptionFromSubscriptionPackagesRequest {
    packageDurationId?: number;
}

/**
 * 
 */
export class SubscriptionAdministrationApi extends runtime.BaseAPI {

    /**
     * Haftada kaç günlük eğitim alınabileceğine dair paket seçeneklerine ekleme yapar.
     */
    async addDayOptionToSubscriptionPackagesRaw(requestParameters: AddDayOptionToSubscriptionPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.day !== undefined) {
            queryParameters['Day'] = requestParameters.day;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/SubscriptionAdministration/AddDayOption`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Haftada kaç günlük eğitim alınabileceğine dair paket seçeneklerine ekleme yapar.
     */
    async addDayOptionToSubscriptionPackages(requestParameters: AddDayOptionToSubscriptionPackagesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.addDayOptionToSubscriptionPackagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Paket içerisinde günde kaç dakika eğitim alabileceği seçeneğini ekler.
     */
    async addMinutesPerDayOptionToSubscriptionPackagesRaw(requestParameters: AddMinutesPerDayOptionToSubscriptionPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.minutes !== undefined) {
            queryParameters['Minutes'] = requestParameters.minutes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/SubscriptionAdministration/AddMinutesPerDayOption`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Paket içerisinde günde kaç dakika eğitim alabileceği seçeneğini ekler.
     */
    async addMinutesPerDayOptionToSubscriptionPackages(requestParameters: AddMinutesPerDayOptionToSubscriptionPackagesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.addMinutesPerDayOptionToSubscriptionPackagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Paket süresi seçeneği ekler.
     */
    async addPackageDurationOptionToSubscriptionPackagesRaw(requestParameters: AddPackageDurationOptionToSubscriptionPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionAdministrationCommandsAddPackageDurationOptionCommandResult>> {
        const queryParameters: any = {};

        if (requestParameters.durationName !== undefined) {
            queryParameters['DurationName'] = requestParameters.durationName;
        }

        if (requestParameters.durationAsMonth !== undefined) {
            queryParameters['DurationAsMonth'] = requestParameters.durationAsMonth;
        }

        if (requestParameters.discountRate !== undefined) {
            queryParameters['DiscountRate'] = requestParameters.discountRate;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['Description'] = requestParameters.description;
        }

        if (requestParameters.dayOptionId !== undefined) {
            queryParameters['DayOptionId'] = requestParameters.dayOptionId;
        }

        if (requestParameters.minuteOptionId !== undefined) {
            queryParameters['MinuteOptionId'] = requestParameters.minuteOptionId;
        }

        if (requestParameters.pricePerMint !== undefined) {
            queryParameters['PricePerMint'] = requestParameters.pricePerMint;
        }

        if (requestParameters.discountedAmount !== undefined) {
            queryParameters['DiscountedAmount'] = requestParameters.discountedAmount;
        }

        if (requestParameters.total !== undefined) {
            queryParameters['Total'] = requestParameters.total;
        }

        if (requestParameters.totalDiscounted !== undefined) {
            queryParameters['TotalDiscounted'] = requestParameters.totalDiscounted;
        }

        if (requestParameters.totalMinutes !== undefined) {
            queryParameters['TotalMinutes'] = requestParameters.totalMinutes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/SubscriptionAdministration/AddPackageDurationOption`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionAdministrationCommandsAddPackageDurationOptionCommandResultFromJSON(jsonValue));
    }

    /**
     * Paket süresi seçeneği ekler.
     */
    async addPackageDurationOptionToSubscriptionPackages(requestParameters: AddPackageDurationOptionToSubscriptionPackagesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionAdministrationCommandsAddPackageDurationOptionCommandResult> {
        const response = await this.addPackageDurationOptionToSubscriptionPackagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Dakika başına ücreti günceller.
     */
    async changePricePerMinuteForSubscriptionPackagesRaw(requestParameters: ChangePricePerMinuteForSubscriptionPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.price !== undefined) {
            queryParameters['Price'] = requestParameters.price;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/SubscriptionAdministration/ChangePricePerMinute`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Dakika başına ücreti günceller.
     */
    async changePricePerMinuteForSubscriptionPackages(requestParameters: ChangePricePerMinuteForSubscriptionPackagesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changePricePerMinuteForSubscriptionPackagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listSubscriptionDropdownOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionAdministrationQueriesListSubscriptionDropdownOptionsQueryResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/SubscriptionAdministration/ListSubscriptionDropdownOptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionAdministrationQueriesListSubscriptionDropdownOptionsQueryResultFromJSON(jsonValue));
    }

    /**
     */
    async listSubscriptionDropdownOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionAdministrationQueriesListSubscriptionDropdownOptionsQueryResult> {
        const response = await this.listSubscriptionDropdownOptionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Abonelik seçeneklerini getirir.
     */
    async listSubscriptionOptionsForManagementRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionAdministrationQueriesListSubscriptionOptionsQueryResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/SubscriptionAdministration/ListSubscriptionOptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionAdministrationQueriesListSubscriptionOptionsQueryResultFromJSON(jsonValue));
    }

    /**
     * Abonelik seçeneklerini getirir.
     */
    async listSubscriptionOptionsForManagement(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionAdministrationQueriesListSubscriptionOptionsQueryResult> {
        const response = await this.listSubscriptionOptionsForManagementRaw(initOverrides);
        return await response.value();
    }

    /**
     * Haftada kaç günlük eğitim alınabileceğine dair paket seçeneklerinden bir öğeyi siler.
     */
    async removeDayOptionFromSubscriptionPackagesRaw(requestParameters: RemoveDayOptionFromSubscriptionPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.day !== undefined) {
            queryParameters['Day'] = requestParameters.day;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/SubscriptionAdministration/RemoveDayOption`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Haftada kaç günlük eğitim alınabileceğine dair paket seçeneklerinden bir öğeyi siler.
     */
    async removeDayOptionFromSubscriptionPackages(requestParameters: RemoveDayOptionFromSubscriptionPackagesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.removeDayOptionFromSubscriptionPackagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Paket içerisinde günde kaç dakika eğitim alabileceği seçeneğini siler.
     */
    async removeMinutesPerDayOptionFromSubscriptionPackagesRaw(requestParameters: RemoveMinutesPerDayOptionFromSubscriptionPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.day !== undefined) {
            queryParameters['Day'] = requestParameters.day;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/SubscriptionAdministration/RemoveMinutesPerDayOption`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Paket içerisinde günde kaç dakika eğitim alabileceği seçeneğini siler.
     */
    async removeMinutesPerDayOptionFromSubscriptionPackages(requestParameters: RemoveMinutesPerDayOptionFromSubscriptionPackagesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.removeMinutesPerDayOptionFromSubscriptionPackagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Paket süresi seçeneğini siler.
     */
    async removePackageDurationOptionFromSubscriptionPackagesRaw(requestParameters: RemovePackageDurationOptionFromSubscriptionPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.packageDurationId !== undefined) {
            queryParameters['PackageDurationId'] = requestParameters.packageDurationId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/SubscriptionAdministration/RemovePackageDurationOption`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Paket süresi seçeneğini siler.
     */
    async removePackageDurationOptionFromSubscriptionPackages(requestParameters: RemovePackageDurationOptionFromSubscriptionPackagesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.removePackageDurationOptionFromSubscriptionPackagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
