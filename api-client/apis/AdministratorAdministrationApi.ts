/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AdministratorAdministrationCommandsCreateAdministratorCommandResult,
  AdministratorAdministrationQueriesListQueryResult,
  FluentValidationResultsValidationFailure,
} from '../models/index';
import {
    AdministratorAdministrationCommandsCreateAdministratorCommandResultFromJSON,
    AdministratorAdministrationCommandsCreateAdministratorCommandResultToJSON,
    AdministratorAdministrationQueriesListQueryResultFromJSON,
    AdministratorAdministrationQueriesListQueryResultToJSON,
    FluentValidationResultsValidationFailureFromJSON,
    FluentValidationResultsValidationFailureToJSON,
} from '../models/index';

export interface ChangeAdministratorEmailRequest {
    administratorId?: number;
    administratorEmail?: string;
}

export interface ChangeAdministratorPasswordRequest {
    administratorId?: number;
    administratorPassword?: string;
}

export interface CreateAdministratorRequest {
    name?: string;
    eMail?: string;
    password?: string;
}

export interface DeleteAdministratorRequest {
    administratorId?: number;
}

export interface ListAdministratorsRequest {
    page?: number;
    itemPerPage?: number;
    searchKeyword?: string;
}

/**
 * 
 */
export class AdministratorAdministrationApi extends runtime.BaseAPI {

    /**
     * Sistem yöneticisinin email adresini değiştirmeyi sağlar
     */
    async changeAdministratorEmailRaw(requestParameters: ChangeAdministratorEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.administratorId !== undefined) {
            queryParameters['AdministratorId'] = requestParameters.administratorId;
        }

        if (requestParameters.administratorEmail !== undefined) {
            queryParameters['AdministratorEmail'] = requestParameters.administratorEmail;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/AdministratorAdministration/ChangeAdministratorEmail`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Sistem yöneticisinin email adresini değiştirmeyi sağlar
     */
    async changeAdministratorEmail(requestParameters: ChangeAdministratorEmailRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changeAdministratorEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sistem yöneticisinin şifresini değiştirmeyi sağlar
     */
    async changeAdministratorPasswordRaw(requestParameters: ChangeAdministratorPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.administratorId !== undefined) {
            queryParameters['AdministratorId'] = requestParameters.administratorId;
        }

        if (requestParameters.administratorPassword !== undefined) {
            queryParameters['AdministratorPassword'] = requestParameters.administratorPassword;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/AdministratorAdministration/ChangeAdministratorPassword`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Sistem yöneticisinin şifresini değiştirmeyi sağlar
     */
    async changeAdministratorPassword(requestParameters: ChangeAdministratorPasswordRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changeAdministratorPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sistem yöneticisi eklemeyi sağlar
     */
    async createAdministratorRaw(requestParameters: CreateAdministratorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdministratorAdministrationCommandsCreateAdministratorCommandResult>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['Name'] = requestParameters.name;
        }

        if (requestParameters.eMail !== undefined) {
            queryParameters['EMail'] = requestParameters.eMail;
        }

        if (requestParameters.password !== undefined) {
            queryParameters['Password'] = requestParameters.password;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/AdministratorAdministration/CreateAdministrator`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdministratorAdministrationCommandsCreateAdministratorCommandResultFromJSON(jsonValue));
    }

    /**
     * Sistem yöneticisi eklemeyi sağlar
     */
    async createAdministrator(requestParameters: CreateAdministratorRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdministratorAdministrationCommandsCreateAdministratorCommandResult> {
        const response = await this.createAdministratorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sistem yöneticisi silmeyi sağlar
     */
    async deleteAdministratorRaw(requestParameters: DeleteAdministratorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.administratorId !== undefined) {
            queryParameters['AdministratorId'] = requestParameters.administratorId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/AdministratorAdministration/DeleteAdministrator`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Sistem yöneticisi silmeyi sağlar
     */
    async deleteAdministrator(requestParameters: DeleteAdministratorRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteAdministratorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sistem yöneticilerini listelemeyi sağlar
     */
    async listAdministratorsRaw(requestParameters: ListAdministratorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdministratorAdministrationQueriesListQueryResult>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.itemPerPage !== undefined) {
            queryParameters['ItemPerPage'] = requestParameters.itemPerPage;
        }

        if (requestParameters.searchKeyword !== undefined) {
            queryParameters['SearchKeyword'] = requestParameters.searchKeyword;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/AdministratorAdministration/List`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdministratorAdministrationQueriesListQueryResultFromJSON(jsonValue));
    }

    /**
     * Sistem yöneticilerini listelemeyi sağlar
     */
    async listAdministrators(requestParameters: ListAdministratorsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdministratorAdministrationQueriesListQueryResult> {
        const response = await this.listAdministratorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
