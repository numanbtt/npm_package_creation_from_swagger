/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AppointmentAdministrationQueriesAppointmentsForPayResult,
  AppointmentAdministrationQueriesListAppointmentsOfTheStudentQueryResult,
  AppointmentAdministrationQueriesListAppointmentsOfTheTeacherQueryResult,
  FluentValidationResultsValidationFailure,
} from '../models/index';
import {
    AppointmentAdministrationQueriesAppointmentsForPayResultFromJSON,
    AppointmentAdministrationQueriesAppointmentsForPayResultToJSON,
    AppointmentAdministrationQueriesListAppointmentsOfTheStudentQueryResultFromJSON,
    AppointmentAdministrationQueriesListAppointmentsOfTheStudentQueryResultToJSON,
    AppointmentAdministrationQueriesListAppointmentsOfTheTeacherQueryResultFromJSON,
    AppointmentAdministrationQueriesListAppointmentsOfTheTeacherQueryResultToJSON,
    FluentValidationResultsValidationFailureFromJSON,
    FluentValidationResultsValidationFailureToJSON,
} from '../models/index';

export interface CancelAppointmentAsAdminRequest {
    appointmentId?: number;
    reason?: string;
}

export interface ListAppointmentsOfTheStudentRequest {
    studentId: number;
    page?: number;
}

export interface ListAppointmentsOfTheTeacherRequest {
    teacherId: number;
}

export interface ListAppointmentsTeacherForPayRequest {
    teacherId?: number;
    startdate?: Date;
    endDate?: Date;
}

export interface ListPaidAppointmentDetailRequest {
    teacherSalaryId?: number;
}

/**
 * 
 */
export class AppointmentAdministrationApi extends runtime.BaseAPI {

    /**
     * Bir randevuyu iptal eder.
     */
    async cancelAppointmentAsAdminRaw(requestParameters: CancelAppointmentAsAdminRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.appointmentId !== undefined) {
            queryParameters['AppointmentId'] = requestParameters.appointmentId;
        }

        if (requestParameters.reason !== undefined) {
            queryParameters['Reason'] = requestParameters.reason;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/AppointmentAdministration/CancelAppointment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Bir randevuyu iptal eder.
     */
    async cancelAppointmentAsAdmin(requestParameters: CancelAppointmentAsAdminRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.cancelAppointmentAsAdminRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bir öğrencinin tüm(geçmiş, gelecek) randevularını listeler.
     */
    async listAppointmentsOfTheStudentRaw(requestParameters: ListAppointmentsOfTheStudentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppointmentAdministrationQueriesListAppointmentsOfTheStudentQueryResult>> {
        if (requestParameters.studentId === null || requestParameters.studentId === undefined) {
            throw new runtime.RequiredError('studentId','Required parameter requestParameters.studentId was null or undefined when calling listAppointmentsOfTheStudent.');
        }

        const queryParameters: any = {};

        if (requestParameters.studentId !== undefined) {
            queryParameters['StudentId'] = requestParameters.studentId;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/AppointmentAdministration/ListAppointmentsOfTheStudent`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppointmentAdministrationQueriesListAppointmentsOfTheStudentQueryResultFromJSON(jsonValue));
    }

    /**
     * Bir öğrencinin tüm(geçmiş, gelecek) randevularını listeler.
     */
    async listAppointmentsOfTheStudent(requestParameters: ListAppointmentsOfTheStudentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppointmentAdministrationQueriesListAppointmentsOfTheStudentQueryResult> {
        const response = await this.listAppointmentsOfTheStudentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bir öğretmenin tüm(geçmiş, gelecek) randevularını listeler.
     */
    async listAppointmentsOfTheTeacherRaw(requestParameters: ListAppointmentsOfTheTeacherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppointmentAdministrationQueriesListAppointmentsOfTheTeacherQueryResult>> {
        if (requestParameters.teacherId === null || requestParameters.teacherId === undefined) {
            throw new runtime.RequiredError('teacherId','Required parameter requestParameters.teacherId was null or undefined when calling listAppointmentsOfTheTeacher.');
        }

        const queryParameters: any = {};

        if (requestParameters.teacherId !== undefined) {
            queryParameters['TeacherId'] = requestParameters.teacherId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/AppointmentAdministration/ListAppointmentsOfTheTeacher`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppointmentAdministrationQueriesListAppointmentsOfTheTeacherQueryResultFromJSON(jsonValue));
    }

    /**
     * Bir öğretmenin tüm(geçmiş, gelecek) randevularını listeler.
     */
    async listAppointmentsOfTheTeacher(requestParameters: ListAppointmentsOfTheTeacherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppointmentAdministrationQueriesListAppointmentsOfTheTeacherQueryResult> {
        const response = await this.listAppointmentsOfTheTeacherRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listAppointmentsTeacherForPayRaw(requestParameters: ListAppointmentsTeacherForPayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AppointmentAdministrationQueriesAppointmentsForPayResult>>> {
        const queryParameters: any = {};

        if (requestParameters.teacherId !== undefined) {
            queryParameters['TeacherId'] = requestParameters.teacherId;
        }

        if (requestParameters.startdate !== undefined) {
            queryParameters['Startdate'] = (requestParameters.startdate as any).toISOString();
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['EndDate'] = (requestParameters.endDate as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/AppointmentAdministration/ListAppointmentsTeacherForPay`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AppointmentAdministrationQueriesAppointmentsForPayResultFromJSON));
    }

    /**
     */
    async listAppointmentsTeacherForPay(requestParameters: ListAppointmentsTeacherForPayRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AppointmentAdministrationQueriesAppointmentsForPayResult>> {
        const response = await this.listAppointmentsTeacherForPayRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listPaidAppointmentDetailRaw(requestParameters: ListPaidAppointmentDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AppointmentAdministrationQueriesAppointmentsForPayResult>>> {
        const queryParameters: any = {};

        if (requestParameters.teacherSalaryId !== undefined) {
            queryParameters['TeacherSalaryId'] = requestParameters.teacherSalaryId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/AppointmentAdministration/ListPaidAppointmentDetail`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AppointmentAdministrationQueriesAppointmentsForPayResultFromJSON));
    }

    /**
     */
    async listPaidAppointmentDetail(requestParameters: ListPaidAppointmentDetailRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AppointmentAdministrationQueriesAppointmentsForPayResult>> {
        const response = await this.listPaidAppointmentDetailRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
