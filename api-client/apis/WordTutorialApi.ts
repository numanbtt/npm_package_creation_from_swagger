/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FluentValidationResultsValidationFailure,
  WordTutorialQueriesListMyFavoritesQueryResult,
} from '../models/index';
import {
    FluentValidationResultsValidationFailureFromJSON,
    FluentValidationResultsValidationFailureToJSON,
    WordTutorialQueriesListMyFavoritesQueryResultFromJSON,
    WordTutorialQueriesListMyFavoritesQueryResultToJSON,
} from '../models/index';

export interface FavoriteWordTutorialRequest {
    wordTutorialId?: number;
}

export interface LikeWordTutorialRequest {
    wordTutorialId?: number;
}

export interface ListMyFavoriteWordTutorialsRequest {
    lastId?: number;
    query?: string;
}

export interface UnfavoriteWordTutorialRequest {
    wordTutorialId?: number;
}

export interface UnlikeWordTutorialRequest {
    wordTutorialId?: number;
}

export interface WordTutorialSharedRequest {
    wordTutorialId?: number;
}

export interface WordTutorialVideoWatchedRequest {
    wordTutorialId?: number;
}

/**
 * 
 */
export class WordTutorialApi extends runtime.BaseAPI {

    /**
     * Kullanıcının kelime eğitimini favori olarak işaretlemesini sağlar.
     */
    async favoriteWordTutorialRaw(requestParameters: FavoriteWordTutorialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.wordTutorialId !== undefined) {
            queryParameters['WordTutorialId'] = requestParameters.wordTutorialId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/WordTutorial/Favorite`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Kullanıcının kelime eğitimini favori olarak işaretlemesini sağlar.
     */
    async favoriteWordTutorial(requestParameters: FavoriteWordTutorialRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.favoriteWordTutorialRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Kullanıcının kelime eğitimini beğenmesini sağlar.
     */
    async likeWordTutorialRaw(requestParameters: LikeWordTutorialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.wordTutorialId !== undefined) {
            queryParameters['WordTutorialId'] = requestParameters.wordTutorialId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/WordTutorial/Like`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Kullanıcının kelime eğitimini beğenmesini sağlar.
     */
    async likeWordTutorial(requestParameters: LikeWordTutorialRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.likeWordTutorialRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Kişinin favori olarak kaydettiği kelimeleri listeler
     */
    async listMyFavoriteWordTutorialsRaw(requestParameters: ListMyFavoriteWordTutorialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WordTutorialQueriesListMyFavoritesQueryResult>> {
        const queryParameters: any = {};

        if (requestParameters.lastId !== undefined) {
            queryParameters['LastId'] = requestParameters.lastId;
        }

        if (requestParameters.query !== undefined) {
            queryParameters['Query'] = requestParameters.query;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/WordTutorial/ListMyFavorites`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WordTutorialQueriesListMyFavoritesQueryResultFromJSON(jsonValue));
    }

    /**
     * Kişinin favori olarak kaydettiği kelimeleri listeler
     */
    async listMyFavoriteWordTutorials(requestParameters: ListMyFavoriteWordTutorialsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WordTutorialQueriesListMyFavoritesQueryResult> {
        const response = await this.listMyFavoriteWordTutorialsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Kullanıcının kelime eğitimini favorilerinden çıkartmasını sağlar.
     */
    async unfavoriteWordTutorialRaw(requestParameters: UnfavoriteWordTutorialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.wordTutorialId !== undefined) {
            queryParameters['WordTutorialId'] = requestParameters.wordTutorialId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/WordTutorial/Unfavorite`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Kullanıcının kelime eğitimini favorilerinden çıkartmasını sağlar.
     */
    async unfavoriteWordTutorial(requestParameters: UnfavoriteWordTutorialRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.unfavoriteWordTutorialRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Kullanıcının kelime eğitimini beğenmesini sağlar.
     */
    async unlikeWordTutorialRaw(requestParameters: UnlikeWordTutorialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.wordTutorialId !== undefined) {
            queryParameters['WordTutorialId'] = requestParameters.wordTutorialId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/WordTutorial/Unlike`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Kullanıcının kelime eğitimini beğenmesini sağlar.
     */
    async unlikeWordTutorial(requestParameters: UnlikeWordTutorialRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.unlikeWordTutorialRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Kullanıcı tarafından gerçekleştirilen kelime eğitimi paylaşımını sunucuya bildirir.
     */
    async wordTutorialSharedRaw(requestParameters: WordTutorialSharedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.wordTutorialId !== undefined) {
            queryParameters['WordTutorialId'] = requestParameters.wordTutorialId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/WordTutorial/Share`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Kullanıcı tarafından gerçekleştirilen kelime eğitimi paylaşımını sunucuya bildirir.
     */
    async wordTutorialShared(requestParameters: WordTutorialSharedRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.wordTutorialSharedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Kullanıcının izlediği videoyu sunucuya bildirir.
     */
    async wordTutorialVideoWatchedRaw(requestParameters: WordTutorialVideoWatchedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.wordTutorialId !== undefined) {
            queryParameters['WordTutorialId'] = requestParameters.wordTutorialId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/WordTutorial/VideoWatched`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Kullanıcının izlediği videoyu sunucuya bildirir.
     */
    async wordTutorialVideoWatched(requestParameters: WordTutorialVideoWatchedRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.wordTutorialVideoWatchedRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
