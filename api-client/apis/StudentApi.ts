/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FluentValidationResultsValidationFailure,
  StudentCommandsLoginWithDirectAuthCommandResult,
  StudentCommandsRegisterCommandResult,
  StudentCommandsStartToExportMyAllInformationsCommandResult,
  StudentCommandsUpdateMySpecalitiesParemeters,
  StudentCommandsUpdateProfilePhotoCommandResult,
  StudentQueriesGetDetailsQueryResult,
  StudentQueriesGetMyDetailsQueryResult,
  StudentQueriesListMyExportsQueryResult,
} from '../models/index';
import {
    FluentValidationResultsValidationFailureFromJSON,
    FluentValidationResultsValidationFailureToJSON,
    StudentCommandsLoginWithDirectAuthCommandResultFromJSON,
    StudentCommandsLoginWithDirectAuthCommandResultToJSON,
    StudentCommandsRegisterCommandResultFromJSON,
    StudentCommandsRegisterCommandResultToJSON,
    StudentCommandsStartToExportMyAllInformationsCommandResultFromJSON,
    StudentCommandsStartToExportMyAllInformationsCommandResultToJSON,
    StudentCommandsUpdateMySpecalitiesParemetersFromJSON,
    StudentCommandsUpdateMySpecalitiesParemetersToJSON,
    StudentCommandsUpdateProfilePhotoCommandResultFromJSON,
    StudentCommandsUpdateProfilePhotoCommandResultToJSON,
    StudentQueriesGetDetailsQueryResultFromJSON,
    StudentQueriesGetDetailsQueryResultToJSON,
    StudentQueriesGetMyDetailsQueryResultFromJSON,
    StudentQueriesGetMyDetailsQueryResultToJSON,
    StudentQueriesListMyExportsQueryResultFromJSON,
    StudentQueriesListMyExportsQueryResultToJSON,
} from '../models/index';

export interface BlockStudentRequest {
    studentId?: number;
}

export interface ChangeMyEmailAddressRequest {
    newEmail?: string;
}

export interface ChangeMyNameRequest {
    newName?: string;
}

export interface ChangeMyPhoneNumberRequest {
    newPhone?: string;
}

export interface GetStudentDetailsRequest {
    studentId: number;
}

export interface ListMyExportsAsStudentRequest {
    lastCreatedAt?: Date;
}

export interface LoginGoogleAsStudentRequest {
    nameSurname?: string;
    email?: string;
}

export interface LoginWithDirectAuthAsStudentRequest {
    email?: string;
    password?: string;
}

export interface RegisterAsStudentRequest {
    nameSurname?: string;
    email?: string;
    phoneNumber?: string;
    password?: string;
    accent?: string;
    languageLevel?: string;
}

export interface ReportStudentRequest {
    studentId?: number;
    content?: string;
}

export interface UnblockStudentRequest {
    studentId?: number;
}

export interface UpdateProfilePhotoAsStudentRequest {
    photo?: Blob;
}

export interface UpdateStudentSpecalitiesRequest {
    studentCommandsUpdateMySpecalitiesParemeters?: StudentCommandsUpdateMySpecalitiesParemeters;
}

/**
 * 
 */
export class StudentApi extends runtime.BaseAPI {

    /**
     * Öğretmenin öğrenciyi engellemesini sağlar.
     */
    async blockStudentRaw(requestParameters: BlockStudentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.studentId !== undefined) {
            queryParameters['StudentId'] = requestParameters.studentId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Student/Block`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Öğretmenin öğrenciyi engellemesini sağlar.
     */
    async blockStudent(requestParameters: BlockStudentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.blockStudentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Öğrencinin kendi e-posta adresini değiştirebilmesini sağlar.
     */
    async changeMyEmailAddressRaw(requestParameters: ChangeMyEmailAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.newEmail !== undefined) {
            queryParameters['NewEmail'] = requestParameters.newEmail;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Student/ChangeMyEmailAddress`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Öğrencinin kendi e-posta adresini değiştirebilmesini sağlar.
     */
    async changeMyEmailAddress(requestParameters: ChangeMyEmailAddressRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changeMyEmailAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Öğrencinin kendi ismini değiştirebilmesini sağlar.
     */
    async changeMyNameRaw(requestParameters: ChangeMyNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.newName !== undefined) {
            queryParameters['NewName'] = requestParameters.newName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Student/ChangeMyName`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Öğrencinin kendi ismini değiştirebilmesini sağlar.
     */
    async changeMyName(requestParameters: ChangeMyNameRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changeMyNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Öğrencinin kendi telefon numarasını değiştirebilmesini sağlar.
     */
    async changeMyPhoneNumberRaw(requestParameters: ChangeMyPhoneNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.newPhone !== undefined) {
            queryParameters['NewPhone'] = requestParameters.newPhone;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Student/ChangeMyPhoneNumber`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Öğrencinin kendi telefon numarasını değiştirebilmesini sağlar.
     */
    async changeMyPhoneNumber(requestParameters: ChangeMyPhoneNumberRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changeMyPhoneNumberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Öğrencinin hesabının silme isteğini admine mail olarak iletir.
     */
    async deleteMyAccountAsStudentRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Student/DeleteMyAccount`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Öğrencinin hesabının silme isteğini admine mail olarak iletir.
     */
    async deleteMyAccountAsStudent(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteMyAccountAsStudentRaw(initOverrides);
        return await response.value();
    }

    /**
     * Öğrencinin kendi detayını getirir.
     */
    async getMyDetailsAsStudentRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StudentQueriesGetMyDetailsQueryResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Student/GetMyDetails`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudentQueriesGetMyDetailsQueryResultFromJSON(jsonValue));
    }

    /**
     * Öğrencinin kendi detayını getirir.
     */
    async getMyDetailsAsStudent(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StudentQueriesGetMyDetailsQueryResult> {
        const response = await this.getMyDetailsAsStudentRaw(initOverrides);
        return await response.value();
    }

    /**
     * Öğrencinin detayını getirir.
     */
    async getStudentDetailsRaw(requestParameters: GetStudentDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StudentQueriesGetDetailsQueryResult>> {
        if (requestParameters.studentId === null || requestParameters.studentId === undefined) {
            throw new runtime.RequiredError('studentId','Required parameter requestParameters.studentId was null or undefined when calling getStudentDetails.');
        }

        const queryParameters: any = {};

        if (requestParameters.studentId !== undefined) {
            queryParameters['StudentId'] = requestParameters.studentId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Student/GetDetails`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudentQueriesGetDetailsQueryResultFromJSON(jsonValue));
    }

    /**
     * Öğrencinin detayını getirir.
     */
    async getStudentDetails(requestParameters: GetStudentDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StudentQueriesGetDetailsQueryResult> {
        const response = await this.getStudentDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Öğrencinin dışa aktarılmaya hazır verilerini listeler.
     */
    async listMyExportsAsStudentRaw(requestParameters: ListMyExportsAsStudentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StudentQueriesListMyExportsQueryResult>> {
        const queryParameters: any = {};

        if (requestParameters.lastCreatedAt !== undefined) {
            queryParameters['LastCreatedAt'] = (requestParameters.lastCreatedAt as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Student/ListMyExports`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudentQueriesListMyExportsQueryResultFromJSON(jsonValue));
    }

    /**
     * Öğrencinin dışa aktarılmaya hazır verilerini listeler.
     */
    async listMyExportsAsStudent(requestParameters: ListMyExportsAsStudentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StudentQueriesListMyExportsQueryResult> {
        const response = await this.listMyExportsAsStudentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async loginGoogleAsStudentRaw(requestParameters: LoginGoogleAsStudentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StudentCommandsRegisterCommandResult>> {
        const queryParameters: any = {};

        if (requestParameters.nameSurname !== undefined) {
            queryParameters['NameSurname'] = requestParameters.nameSurname;
        }

        if (requestParameters.email !== undefined) {
            queryParameters['Email'] = requestParameters.email;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Student/LoginGoogleStudent`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudentCommandsRegisterCommandResultFromJSON(jsonValue));
    }

    /**
     */
    async loginGoogleAsStudent(requestParameters: LoginGoogleAsStudentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StudentCommandsRegisterCommandResult> {
        const response = await this.loginGoogleAsStudentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Apple login işlevini öğrenci hesabı için gerçekleştirir.
     */
    async loginWithAppleAsStudentRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Student/LoginWithApple`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Apple login işlevini öğrenci hesabı için gerçekleştirir.
     */
    async loginWithAppleAsStudent(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.loginWithAppleAsStudentRaw(initOverrides);
    }

    /**
     * Öğrenci olarak giriş yapmayı sağlar.
     */
    async loginWithDirectAuthAsStudentRaw(requestParameters: LoginWithDirectAuthAsStudentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StudentCommandsLoginWithDirectAuthCommandResult>> {
        const queryParameters: any = {};

        if (requestParameters.email !== undefined) {
            queryParameters['Email'] = requestParameters.email;
        }

        if (requestParameters.password !== undefined) {
            queryParameters['Password'] = requestParameters.password;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Student/LoginWithDirectAuth`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudentCommandsLoginWithDirectAuthCommandResultFromJSON(jsonValue));
    }

    /**
     * Öğrenci olarak giriş yapmayı sağlar.
     */
    async loginWithDirectAuthAsStudent(requestParameters: LoginWithDirectAuthAsStudentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StudentCommandsLoginWithDirectAuthCommandResult> {
        const response = await this.loginWithDirectAuthAsStudentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Facebook login işlevini öğrenci hesabı için gerçekleştirir.
     */
    async loginWithFacebookAsStudentRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Student/LoginWithFacebook`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Facebook login işlevini öğrenci hesabı için gerçekleştirir.
     */
    async loginWithFacebookAsStudent(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.loginWithFacebookAsStudentRaw(initOverrides);
    }

    /**
     * Google login işlevini öğrenci hesabı için gerçekleştirir.
     */
    async loginWithGoogleAsStudentRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Student/LoginWithGoogle`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Google login işlevini öğrenci hesabı için gerçekleştirir.
     */
    async loginWithGoogleAsStudent(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.loginWithGoogleAsStudentRaw(initOverrides);
    }

    /**
     * E-posta ve şifre ile öğrenci kaydı yapılabilmesini sağlar.
     */
    async registerAsStudentRaw(requestParameters: RegisterAsStudentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StudentCommandsRegisterCommandResult>> {
        const queryParameters: any = {};

        if (requestParameters.nameSurname !== undefined) {
            queryParameters['NameSurname'] = requestParameters.nameSurname;
        }

        if (requestParameters.email !== undefined) {
            queryParameters['Email'] = requestParameters.email;
        }

        if (requestParameters.phoneNumber !== undefined) {
            queryParameters['PhoneNumber'] = requestParameters.phoneNumber;
        }

        if (requestParameters.password !== undefined) {
            queryParameters['Password'] = requestParameters.password;
        }

        if (requestParameters.accent !== undefined) {
            queryParameters['Accent'] = requestParameters.accent;
        }

        if (requestParameters.languageLevel !== undefined) {
            queryParameters['LanguageLevel'] = requestParameters.languageLevel;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Student/Register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudentCommandsRegisterCommandResultFromJSON(jsonValue));
    }

    /**
     * E-posta ve şifre ile öğrenci kaydı yapılabilmesini sağlar.
     */
    async registerAsStudent(requestParameters: RegisterAsStudentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StudentCommandsRegisterCommandResult> {
        const response = await this.registerAsStudentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Öğretmenin öğrenciyi rapor etmesini sağlar.
     */
    async reportStudentRaw(requestParameters: ReportStudentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.studentId !== undefined) {
            queryParameters['StudentId'] = requestParameters.studentId;
        }

        if (requestParameters.content !== undefined) {
            queryParameters['Content'] = requestParameters.content;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Student/Report`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Öğretmenin öğrenciyi rapor etmesini sağlar.
     */
    async reportStudent(requestParameters: ReportStudentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.reportStudentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Öğrencinin tüm verisini dışarı aktarma işlemini başlatır. Halihazırda dışa aktarım dosyaları hazırlanıyorsa hata vermelidir.
     */
    async startToExportMyAllInformationsAsStudentRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StudentCommandsStartToExportMyAllInformationsCommandResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Student/StartToExportMyAllInformations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudentCommandsStartToExportMyAllInformationsCommandResultFromJSON(jsonValue));
    }

    /**
     * Öğrencinin tüm verisini dışarı aktarma işlemini başlatır. Halihazırda dışa aktarım dosyaları hazırlanıyorsa hata vermelidir.
     */
    async startToExportMyAllInformationsAsStudent(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StudentCommandsStartToExportMyAllInformationsCommandResult> {
        const response = await this.startToExportMyAllInformationsAsStudentRaw(initOverrides);
        return await response.value();
    }

    /**
     * Öğretmenin öğrencinin engelini kaldırmasını sağlar.
     */
    async unblockStudentRaw(requestParameters: UnblockStudentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.studentId !== undefined) {
            queryParameters['StudentId'] = requestParameters.studentId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Student/Unblock`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Öğretmenin öğrencinin engelini kaldırmasını sağlar.
     */
    async unblockStudent(requestParameters: UnblockStudentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.unblockStudentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Öğrencinin profil fotoğrafını değiştirmesini sağlar.
     */
    async updateProfilePhotoAsStudentRaw(requestParameters: UpdateProfilePhotoAsStudentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StudentCommandsUpdateProfilePhotoCommandResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.photo !== undefined) {
            formParams.append('Photo', requestParameters.photo as any);
        }

        const response = await this.request({
            path: `/api/Student/UpdateProfilePhoto`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudentCommandsUpdateProfilePhotoCommandResultFromJSON(jsonValue));
    }

    /**
     * Öğrencinin profil fotoğrafını değiştirmesini sağlar.
     */
    async updateProfilePhotoAsStudent(requestParameters: UpdateProfilePhotoAsStudentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StudentCommandsUpdateProfilePhotoCommandResult> {
        const response = await this.updateProfilePhotoAsStudentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateStudentSpecalitiesRaw(requestParameters: UpdateStudentSpecalitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Student/UpdateStudentSpecalities`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StudentCommandsUpdateMySpecalitiesParemetersToJSON(requestParameters.studentCommandsUpdateMySpecalitiesParemeters),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async updateStudentSpecalities(requestParameters: UpdateStudentSpecalitiesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.updateStudentSpecalitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
