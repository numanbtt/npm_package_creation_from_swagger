/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FluentValidationResultsValidationFailure,
  StudentCreditCommandsCreateCommand,
  StudentCreditCommandsCreateCommandResult,
  StudentCreditCommandsUpdateCommand,
  StudentCreditQueriesCommonDropdown,
  StudentCreditQueriesListQueryResult,
  StudentCreditQueriesStudentCreditDetails,
} from '../models/index';
import {
    FluentValidationResultsValidationFailureFromJSON,
    FluentValidationResultsValidationFailureToJSON,
    StudentCreditCommandsCreateCommandFromJSON,
    StudentCreditCommandsCreateCommandToJSON,
    StudentCreditCommandsCreateCommandResultFromJSON,
    StudentCreditCommandsCreateCommandResultToJSON,
    StudentCreditCommandsUpdateCommandFromJSON,
    StudentCreditCommandsUpdateCommandToJSON,
    StudentCreditQueriesCommonDropdownFromJSON,
    StudentCreditQueriesCommonDropdownToJSON,
    StudentCreditQueriesListQueryResultFromJSON,
    StudentCreditQueriesListQueryResultToJSON,
    StudentCreditQueriesStudentCreditDetailsFromJSON,
    StudentCreditQueriesStudentCreditDetailsToJSON,
} from '../models/index';

export interface CreateCreditsRequest {
    studentCreditCommandsCreateCommand?: StudentCreditCommandsCreateCommand;
}

export interface GetDetailsByIdCreditsRequest {
    id?: number;
}

export interface ListStudentCreditsRequest {
    page?: number;
    itemPerPage?: number;
    searchKeyword?: string;
}

export interface UpdateCreditsRequest {
    studentCreditCommandsUpdateCommand?: StudentCreditCommandsUpdateCommand;
}

/**
 * 
 */
export class StudentCreditsApi extends runtime.BaseAPI {

    /**
     */
    async createCreditsRaw(requestParameters: CreateCreditsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StudentCreditCommandsCreateCommandResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/StudentCredits/Create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StudentCreditCommandsCreateCommandToJSON(requestParameters.studentCreditCommandsCreateCommand),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudentCreditCommandsCreateCommandResultFromJSON(jsonValue));
    }

    /**
     */
    async createCredits(requestParameters: CreateCreditsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StudentCreditCommandsCreateCommandResult> {
        const response = await this.createCreditsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDetailsByIdCreditsRaw(requestParameters: GetDetailsByIdCreditsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StudentCreditQueriesStudentCreditDetails>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/StudentCredits/GetDetailsById`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudentCreditQueriesStudentCreditDetailsFromJSON(jsonValue));
    }

    /**
     */
    async getDetailsByIdCredits(requestParameters: GetDetailsByIdCreditsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StudentCreditQueriesStudentCreditDetails> {
        const response = await this.getDetailsByIdCreditsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDropDownStudentsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<StudentCreditQueriesCommonDropdown>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/StudentCredits/GetDropDownStudents`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StudentCreditQueriesCommonDropdownFromJSON));
    }

    /**
     */
    async getDropDownStudents(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<StudentCreditQueriesCommonDropdown>> {
        const response = await this.getDropDownStudentsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async listStudentCreditsRaw(requestParameters: ListStudentCreditsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StudentCreditQueriesListQueryResult>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.itemPerPage !== undefined) {
            queryParameters['ItemPerPage'] = requestParameters.itemPerPage;
        }

        if (requestParameters.searchKeyword !== undefined) {
            queryParameters['SearchKeyword'] = requestParameters.searchKeyword;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/StudentCredits/List`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudentCreditQueriesListQueryResultFromJSON(jsonValue));
    }

    /**
     */
    async listStudentCredits(requestParameters: ListStudentCreditsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StudentCreditQueriesListQueryResult> {
        const response = await this.listStudentCreditsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateCreditsRaw(requestParameters: UpdateCreditsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StudentCreditCommandsCreateCommandResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/StudentCredits/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StudentCreditCommandsUpdateCommandToJSON(requestParameters.studentCreditCommandsUpdateCommand),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudentCreditCommandsCreateCommandResultFromJSON(jsonValue));
    }

    /**
     */
    async updateCredits(requestParameters: UpdateCreditsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StudentCreditCommandsCreateCommandResult> {
        const response = await this.updateCreditsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
