/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FluentValidationResultsValidationFailure } from '../models';
// @ts-ignore
import { WordTutorialCategoryQueriesGetDetailsQueryResult } from '../models';
// @ts-ignore
import { WordTutorialCategoryQueriesListQueryResult } from '../models';
// @ts-ignore
import { WordTutorialCategoryQueriesRefreshWordTutorialsInCategoryQueryResult } from '../models';
// @ts-ignore
import { WordTutorialCategoryQueriesSearchQueryResult } from '../models';
/**
 * WordTutorialCategoryApi - axios parameter creator
 * @export
 */
export const WordTutorialCategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Bir kelime eğitiminin detayını getirir.
         * @param {string} slug 
         * @param {string} [selectedWordTutorialSlug] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWordTutorialCategoryDetails: async (slug: string, selectedWordTutorialSlug?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('getWordTutorialCategoryDetails', 'slug', slug)
            const localVarPath = `/api/WordTutorialCategory/GetDetails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (slug !== undefined) {
                localVarQueryParameter['Slug'] = slug;
            }

            if (selectedWordTutorialSlug !== undefined) {
                localVarQueryParameter['SelectedWordTutorialSlug'] = selectedWordTutorialSlug;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Kelime eğitimi kategori listesini getirir.
         * @param {number} [lastId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWordTutorialCategories: async (lastId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/WordTutorialCategory/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (lastId !== undefined) {
                localVarQueryParameter['LastId'] = lastId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Varolan kelime eğitimi kategorisinin içerisinde gösterilen kelimeleri rastgele olarak yeniler.
         * @param {number} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshWordTutorialsInCategory: async (categoryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('refreshWordTutorialsInCategory', 'categoryId', categoryId)
            const localVarPath = `/api/WordTutorialCategory/RefreshWordTutorialsInCategory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (categoryId !== undefined) {
                localVarQueryParameter['CategoryId'] = categoryId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bulunulan kelime eğitimi kategorisinde kelime araması yapar.
         * @param {string} [wordTutorialCategorySlug] Kelime eğitimi kategorisinin slug\&#39;ıdır.
         * @param {string} [query] 
         * @param {number} [lastId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchInWordTutorialCategory: async (wordTutorialCategorySlug?: string, query?: string, lastId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/WordTutorialCategory/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (wordTutorialCategorySlug !== undefined) {
                localVarQueryParameter['WordTutorialCategorySlug'] = wordTutorialCategorySlug;
            }

            if (query !== undefined) {
                localVarQueryParameter['Query'] = query;
            }

            if (lastId !== undefined) {
                localVarQueryParameter['LastId'] = lastId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WordTutorialCategoryApi - functional programming interface
 * @export
 */
export const WordTutorialCategoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WordTutorialCategoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Bir kelime eğitiminin detayını getirir.
         * @param {string} slug 
         * @param {string} [selectedWordTutorialSlug] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWordTutorialCategoryDetails(slug: string, selectedWordTutorialSlug?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WordTutorialCategoryQueriesGetDetailsQueryResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWordTutorialCategoryDetails(slug, selectedWordTutorialSlug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Kelime eğitimi kategori listesini getirir.
         * @param {number} [lastId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listWordTutorialCategories(lastId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WordTutorialCategoryQueriesListQueryResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listWordTutorialCategories(lastId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Varolan kelime eğitimi kategorisinin içerisinde gösterilen kelimeleri rastgele olarak yeniler.
         * @param {number} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshWordTutorialsInCategory(categoryId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WordTutorialCategoryQueriesRefreshWordTutorialsInCategoryQueryResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshWordTutorialsInCategory(categoryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Bulunulan kelime eğitimi kategorisinde kelime araması yapar.
         * @param {string} [wordTutorialCategorySlug] Kelime eğitimi kategorisinin slug\&#39;ıdır.
         * @param {string} [query] 
         * @param {number} [lastId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchInWordTutorialCategory(wordTutorialCategorySlug?: string, query?: string, lastId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WordTutorialCategoryQueriesSearchQueryResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchInWordTutorialCategory(wordTutorialCategorySlug, query, lastId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WordTutorialCategoryApi - factory interface
 * @export
 */
export const WordTutorialCategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WordTutorialCategoryApiFp(configuration)
    return {
        /**
         * 
         * @summary Bir kelime eğitiminin detayını getirir.
         * @param {string} slug 
         * @param {string} [selectedWordTutorialSlug] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWordTutorialCategoryDetails(slug: string, selectedWordTutorialSlug?: string, options?: any): AxiosPromise<WordTutorialCategoryQueriesGetDetailsQueryResult> {
            return localVarFp.getWordTutorialCategoryDetails(slug, selectedWordTutorialSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Kelime eğitimi kategori listesini getirir.
         * @param {number} [lastId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWordTutorialCategories(lastId?: number, options?: any): AxiosPromise<WordTutorialCategoryQueriesListQueryResult> {
            return localVarFp.listWordTutorialCategories(lastId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Varolan kelime eğitimi kategorisinin içerisinde gösterilen kelimeleri rastgele olarak yeniler.
         * @param {number} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshWordTutorialsInCategory(categoryId: number, options?: any): AxiosPromise<WordTutorialCategoryQueriesRefreshWordTutorialsInCategoryQueryResult> {
            return localVarFp.refreshWordTutorialsInCategory(categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bulunulan kelime eğitimi kategorisinde kelime araması yapar.
         * @param {string} [wordTutorialCategorySlug] Kelime eğitimi kategorisinin slug\&#39;ıdır.
         * @param {string} [query] 
         * @param {number} [lastId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchInWordTutorialCategory(wordTutorialCategorySlug?: string, query?: string, lastId?: number, options?: any): AxiosPromise<WordTutorialCategoryQueriesSearchQueryResult> {
            return localVarFp.searchInWordTutorialCategory(wordTutorialCategorySlug, query, lastId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WordTutorialCategoryApi - interface
 * @export
 * @interface WordTutorialCategoryApi
 */
export interface WordTutorialCategoryApiInterface {
    /**
     * 
     * @summary Bir kelime eğitiminin detayını getirir.
     * @param {string} slug 
     * @param {string} [selectedWordTutorialSlug] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialCategoryApiInterface
     */
    getWordTutorialCategoryDetails(slug: string, selectedWordTutorialSlug?: string, options?: AxiosRequestConfig): AxiosPromise<WordTutorialCategoryQueriesGetDetailsQueryResult>;

    /**
     * 
     * @summary Kelime eğitimi kategori listesini getirir.
     * @param {number} [lastId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialCategoryApiInterface
     */
    listWordTutorialCategories(lastId?: number, options?: AxiosRequestConfig): AxiosPromise<WordTutorialCategoryQueriesListQueryResult>;

    /**
     * 
     * @summary Varolan kelime eğitimi kategorisinin içerisinde gösterilen kelimeleri rastgele olarak yeniler.
     * @param {number} categoryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialCategoryApiInterface
     */
    refreshWordTutorialsInCategory(categoryId: number, options?: AxiosRequestConfig): AxiosPromise<WordTutorialCategoryQueriesRefreshWordTutorialsInCategoryQueryResult>;

    /**
     * 
     * @summary Bulunulan kelime eğitimi kategorisinde kelime araması yapar.
     * @param {string} [wordTutorialCategorySlug] Kelime eğitimi kategorisinin slug\&#39;ıdır.
     * @param {string} [query] 
     * @param {number} [lastId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialCategoryApiInterface
     */
    searchInWordTutorialCategory(wordTutorialCategorySlug?: string, query?: string, lastId?: number, options?: AxiosRequestConfig): AxiosPromise<WordTutorialCategoryQueriesSearchQueryResult>;

}

/**
 * WordTutorialCategoryApi - object-oriented interface
 * @export
 * @class WordTutorialCategoryApi
 * @extends {BaseAPI}
 */
export class WordTutorialCategoryApi extends BaseAPI implements WordTutorialCategoryApiInterface {
    /**
     * 
     * @summary Bir kelime eğitiminin detayını getirir.
     * @param {string} slug 
     * @param {string} [selectedWordTutorialSlug] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialCategoryApi
     */
    public getWordTutorialCategoryDetails(slug: string, selectedWordTutorialSlug?: string, options?: AxiosRequestConfig) {
        return WordTutorialCategoryApiFp(this.configuration).getWordTutorialCategoryDetails(slug, selectedWordTutorialSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Kelime eğitimi kategori listesini getirir.
     * @param {number} [lastId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialCategoryApi
     */
    public listWordTutorialCategories(lastId?: number, options?: AxiosRequestConfig) {
        return WordTutorialCategoryApiFp(this.configuration).listWordTutorialCategories(lastId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Varolan kelime eğitimi kategorisinin içerisinde gösterilen kelimeleri rastgele olarak yeniler.
     * @param {number} categoryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialCategoryApi
     */
    public refreshWordTutorialsInCategory(categoryId: number, options?: AxiosRequestConfig) {
        return WordTutorialCategoryApiFp(this.configuration).refreshWordTutorialsInCategory(categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bulunulan kelime eğitimi kategorisinde kelime araması yapar.
     * @param {string} [wordTutorialCategorySlug] Kelime eğitimi kategorisinin slug\&#39;ıdır.
     * @param {string} [query] 
     * @param {number} [lastId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialCategoryApi
     */
    public searchInWordTutorialCategory(wordTutorialCategorySlug?: string, query?: string, lastId?: number, options?: AxiosRequestConfig) {
        return WordTutorialCategoryApiFp(this.configuration).searchInWordTutorialCategory(wordTutorialCategorySlug, query, lastId, options).then((request) => request(this.axios, this.basePath));
    }
}

