/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FluentValidationResultsValidationFailure } from '../models';
// @ts-ignore
import { IyzicoSubscriptionCommandsCreateCommand } from '../models';
// @ts-ignore
import { IyzicoSubscriptionCommandsCreateCommandResult } from '../models';
// @ts-ignore
import { IyzicoSubscriptionCommandsUpdateCommand } from '../models';
// @ts-ignore
import { IyzicoSubscriptionQueriesCommonSubscriptionDropdown } from '../models';
// @ts-ignore
import { IyzicoSubscriptionQueriesIyzicoSubscriptionDetails } from '../models';
// @ts-ignore
import { IyzicoSubscriptionQueriesListQueryResult } from '../models';
/**
 * IyzicoSubscriptionApi - axios parameter creator
 * @export
 */
export const IyzicoSubscriptionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {IyzicoSubscriptionCommandsCreateCommand} [iyzicoSubscriptionCommandsCreateCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubscription: async (iyzicoSubscriptionCommandsCreateCommand?: IyzicoSubscriptionCommandsCreateCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/IyzicoSubscription/Create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iyzicoSubscriptionCommandsCreateCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByIdSubscriptionPlan: async (id?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/IyzicoSubscription/DeleteSubscriptionPlan`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailsByIdSubscriptionPlan: async (id?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/IyzicoSubscription/GetDetailsById`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDropDownPackageDurationOptions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/IyzicoSubscription/GetDropDownPackageDurationOptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDropDownSubscriptionDayOptions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/IyzicoSubscription/GetDropDownSubscriptionDayOptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDropDownSubscriptionMinutesPerDayOptions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/IyzicoSubscription/GetDropDownSubscriptionMinutesPerDayOptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [itemPerPage] 
         * @param {string} [searchKeyword] Film kategorisinde arama yapılacak kelime
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionPlan: async (page?: number, itemPerPage?: number, searchKeyword?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/IyzicoSubscription/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (itemPerPage !== undefined) {
                localVarQueryParameter['ItemPerPage'] = itemPerPage;
            }

            if (searchKeyword !== undefined) {
                localVarQueryParameter['SearchKeyword'] = searchKeyword;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IyzicoSubscriptionCommandsUpdateCommand} [iyzicoSubscriptionCommandsUpdateCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscription: async (iyzicoSubscriptionCommandsUpdateCommand?: IyzicoSubscriptionCommandsUpdateCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/IyzicoSubscription/Update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iyzicoSubscriptionCommandsUpdateCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IyzicoSubscriptionApi - functional programming interface
 * @export
 */
export const IyzicoSubscriptionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IyzicoSubscriptionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {IyzicoSubscriptionCommandsCreateCommand} [iyzicoSubscriptionCommandsCreateCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSubscription(iyzicoSubscriptionCommandsCreateCommand?: IyzicoSubscriptionCommandsCreateCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IyzicoSubscriptionCommandsCreateCommandResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSubscription(iyzicoSubscriptionCommandsCreateCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteByIdSubscriptionPlan(id?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteByIdSubscriptionPlan(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetailsByIdSubscriptionPlan(id?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IyzicoSubscriptionQueriesIyzicoSubscriptionDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetailsByIdSubscriptionPlan(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDropDownPackageDurationOptions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IyzicoSubscriptionQueriesCommonSubscriptionDropdown>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDropDownPackageDurationOptions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDropDownSubscriptionDayOptions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IyzicoSubscriptionQueriesCommonSubscriptionDropdown>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDropDownSubscriptionDayOptions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDropDownSubscriptionMinutesPerDayOptions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IyzicoSubscriptionQueriesCommonSubscriptionDropdown>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDropDownSubscriptionMinutesPerDayOptions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [itemPerPage] 
         * @param {string} [searchKeyword] Film kategorisinde arama yapılacak kelime
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSubscriptionPlan(page?: number, itemPerPage?: number, searchKeyword?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IyzicoSubscriptionQueriesListQueryResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSubscriptionPlan(page, itemPerPage, searchKeyword, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IyzicoSubscriptionCommandsUpdateCommand} [iyzicoSubscriptionCommandsUpdateCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSubscription(iyzicoSubscriptionCommandsUpdateCommand?: IyzicoSubscriptionCommandsUpdateCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IyzicoSubscriptionCommandsCreateCommandResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSubscription(iyzicoSubscriptionCommandsUpdateCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IyzicoSubscriptionApi - factory interface
 * @export
 */
export const IyzicoSubscriptionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IyzicoSubscriptionApiFp(configuration)
    return {
        /**
         * 
         * @param {IyzicoSubscriptionCommandsCreateCommand} [iyzicoSubscriptionCommandsCreateCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubscription(iyzicoSubscriptionCommandsCreateCommand?: IyzicoSubscriptionCommandsCreateCommand, options?: any): AxiosPromise<IyzicoSubscriptionCommandsCreateCommandResult> {
            return localVarFp.createSubscription(iyzicoSubscriptionCommandsCreateCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByIdSubscriptionPlan(id?: number, options?: any): AxiosPromise<string> {
            return localVarFp.deleteByIdSubscriptionPlan(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailsByIdSubscriptionPlan(id?: number, options?: any): AxiosPromise<IyzicoSubscriptionQueriesIyzicoSubscriptionDetails> {
            return localVarFp.getDetailsByIdSubscriptionPlan(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDropDownPackageDurationOptions(options?: any): AxiosPromise<Array<IyzicoSubscriptionQueriesCommonSubscriptionDropdown>> {
            return localVarFp.getDropDownPackageDurationOptions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDropDownSubscriptionDayOptions(options?: any): AxiosPromise<Array<IyzicoSubscriptionQueriesCommonSubscriptionDropdown>> {
            return localVarFp.getDropDownSubscriptionDayOptions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDropDownSubscriptionMinutesPerDayOptions(options?: any): AxiosPromise<Array<IyzicoSubscriptionQueriesCommonSubscriptionDropdown>> {
            return localVarFp.getDropDownSubscriptionMinutesPerDayOptions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [itemPerPage] 
         * @param {string} [searchKeyword] Film kategorisinde arama yapılacak kelime
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionPlan(page?: number, itemPerPage?: number, searchKeyword?: string, options?: any): AxiosPromise<IyzicoSubscriptionQueriesListQueryResult> {
            return localVarFp.listSubscriptionPlan(page, itemPerPage, searchKeyword, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IyzicoSubscriptionCommandsUpdateCommand} [iyzicoSubscriptionCommandsUpdateCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscription(iyzicoSubscriptionCommandsUpdateCommand?: IyzicoSubscriptionCommandsUpdateCommand, options?: any): AxiosPromise<IyzicoSubscriptionCommandsCreateCommandResult> {
            return localVarFp.updateSubscription(iyzicoSubscriptionCommandsUpdateCommand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IyzicoSubscriptionApi - interface
 * @export
 * @interface IyzicoSubscriptionApi
 */
export interface IyzicoSubscriptionApiInterface {
    /**
     * 
     * @param {IyzicoSubscriptionCommandsCreateCommand} [iyzicoSubscriptionCommandsCreateCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IyzicoSubscriptionApiInterface
     */
    createSubscription(iyzicoSubscriptionCommandsCreateCommand?: IyzicoSubscriptionCommandsCreateCommand, options?: AxiosRequestConfig): AxiosPromise<IyzicoSubscriptionCommandsCreateCommandResult>;

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IyzicoSubscriptionApiInterface
     */
    deleteByIdSubscriptionPlan(id?: number, options?: AxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IyzicoSubscriptionApiInterface
     */
    getDetailsByIdSubscriptionPlan(id?: number, options?: AxiosRequestConfig): AxiosPromise<IyzicoSubscriptionQueriesIyzicoSubscriptionDetails>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IyzicoSubscriptionApiInterface
     */
    getDropDownPackageDurationOptions(options?: AxiosRequestConfig): AxiosPromise<Array<IyzicoSubscriptionQueriesCommonSubscriptionDropdown>>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IyzicoSubscriptionApiInterface
     */
    getDropDownSubscriptionDayOptions(options?: AxiosRequestConfig): AxiosPromise<Array<IyzicoSubscriptionQueriesCommonSubscriptionDropdown>>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IyzicoSubscriptionApiInterface
     */
    getDropDownSubscriptionMinutesPerDayOptions(options?: AxiosRequestConfig): AxiosPromise<Array<IyzicoSubscriptionQueriesCommonSubscriptionDropdown>>;

    /**
     * 
     * @param {number} [page] 
     * @param {number} [itemPerPage] 
     * @param {string} [searchKeyword] Film kategorisinde arama yapılacak kelime
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IyzicoSubscriptionApiInterface
     */
    listSubscriptionPlan(page?: number, itemPerPage?: number, searchKeyword?: string, options?: AxiosRequestConfig): AxiosPromise<IyzicoSubscriptionQueriesListQueryResult>;

    /**
     * 
     * @param {IyzicoSubscriptionCommandsUpdateCommand} [iyzicoSubscriptionCommandsUpdateCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IyzicoSubscriptionApiInterface
     */
    updateSubscription(iyzicoSubscriptionCommandsUpdateCommand?: IyzicoSubscriptionCommandsUpdateCommand, options?: AxiosRequestConfig): AxiosPromise<IyzicoSubscriptionCommandsCreateCommandResult>;

}

/**
 * IyzicoSubscriptionApi - object-oriented interface
 * @export
 * @class IyzicoSubscriptionApi
 * @extends {BaseAPI}
 */
export class IyzicoSubscriptionApi extends BaseAPI implements IyzicoSubscriptionApiInterface {
    /**
     * 
     * @param {IyzicoSubscriptionCommandsCreateCommand} [iyzicoSubscriptionCommandsCreateCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IyzicoSubscriptionApi
     */
    public createSubscription(iyzicoSubscriptionCommandsCreateCommand?: IyzicoSubscriptionCommandsCreateCommand, options?: AxiosRequestConfig) {
        return IyzicoSubscriptionApiFp(this.configuration).createSubscription(iyzicoSubscriptionCommandsCreateCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IyzicoSubscriptionApi
     */
    public deleteByIdSubscriptionPlan(id?: number, options?: AxiosRequestConfig) {
        return IyzicoSubscriptionApiFp(this.configuration).deleteByIdSubscriptionPlan(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IyzicoSubscriptionApi
     */
    public getDetailsByIdSubscriptionPlan(id?: number, options?: AxiosRequestConfig) {
        return IyzicoSubscriptionApiFp(this.configuration).getDetailsByIdSubscriptionPlan(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IyzicoSubscriptionApi
     */
    public getDropDownPackageDurationOptions(options?: AxiosRequestConfig) {
        return IyzicoSubscriptionApiFp(this.configuration).getDropDownPackageDurationOptions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IyzicoSubscriptionApi
     */
    public getDropDownSubscriptionDayOptions(options?: AxiosRequestConfig) {
        return IyzicoSubscriptionApiFp(this.configuration).getDropDownSubscriptionDayOptions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IyzicoSubscriptionApi
     */
    public getDropDownSubscriptionMinutesPerDayOptions(options?: AxiosRequestConfig) {
        return IyzicoSubscriptionApiFp(this.configuration).getDropDownSubscriptionMinutesPerDayOptions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] 
     * @param {number} [itemPerPage] 
     * @param {string} [searchKeyword] Film kategorisinde arama yapılacak kelime
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IyzicoSubscriptionApi
     */
    public listSubscriptionPlan(page?: number, itemPerPage?: number, searchKeyword?: string, options?: AxiosRequestConfig) {
        return IyzicoSubscriptionApiFp(this.configuration).listSubscriptionPlan(page, itemPerPage, searchKeyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IyzicoSubscriptionCommandsUpdateCommand} [iyzicoSubscriptionCommandsUpdateCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IyzicoSubscriptionApi
     */
    public updateSubscription(iyzicoSubscriptionCommandsUpdateCommand?: IyzicoSubscriptionCommandsUpdateCommand, options?: AxiosRequestConfig) {
        return IyzicoSubscriptionApiFp(this.configuration).updateSubscription(iyzicoSubscriptionCommandsUpdateCommand, options).then((request) => request(this.axios, this.basePath));
    }
}

