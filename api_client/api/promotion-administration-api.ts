/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FluentValidationResultsValidationFailure } from '../models';
// @ts-ignore
import { PromotionAdministrationCommandsCreateDiscountCommandResult } from '../models';
// @ts-ignore
import { PromotionAdministrationQueriesListDiscountsQueryResult } from '../models';
/**
 * PromotionAdministrationApi - axios parameter creator
 * @export
 */
export const PromotionAdministrationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary İndirimin aktiflik durumunu değiştirmeyi sağlar
         * @param {number} [discountId] 
         * @param {boolean} [newState] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeDiscountActiveState: async (discountId?: number, newState?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/PromotionAdministration/ChangeDiscountActiveState`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (discountId !== undefined) {
                localVarQueryParameter['DiscountId'] = discountId;
            }

            if (newState !== undefined) {
                localVarQueryParameter['NewState'] = newState;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Yeni indirim kodu oluşturmayı sağlar
         * @param {string} [discountCode] 
         * @param {number} [discountPercentage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDiscount: async (discountCode?: string, discountPercentage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/PromotionAdministration/CreateDiscount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (discountCode !== undefined) {
                localVarQueryParameter['DiscountCode'] = discountCode;
            }

            if (discountPercentage !== undefined) {
                localVarQueryParameter['DiscountPercentage'] = discountPercentage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary İndirim kodunu silmeye yarar
         * @param {number} [discountId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDiscount: async (discountId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/PromotionAdministration/DeleteDiscount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (discountId !== undefined) {
                localVarQueryParameter['DiscountId'] = discountId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary İndirim kodlarının listesini getirir
         * @param {number} [page] 
         * @param {number} [itemPerPage] 
         * @param {string} [searchKeyword] Discount listesinde arama yapılacak kelimeyi barındırır
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDiscounts: async (page?: number, itemPerPage?: number, searchKeyword?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/PromotionAdministration/ListDiscounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (itemPerPage !== undefined) {
                localVarQueryParameter['ItemPerPage'] = itemPerPage;
            }

            if (searchKeyword !== undefined) {
                localVarQueryParameter['SearchKeyword'] = searchKeyword;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PromotionAdministrationApi - functional programming interface
 * @export
 */
export const PromotionAdministrationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PromotionAdministrationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary İndirimin aktiflik durumunu değiştirmeyi sağlar
         * @param {number} [discountId] 
         * @param {boolean} [newState] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeDiscountActiveState(discountId?: number, newState?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeDiscountActiveState(discountId, newState, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Yeni indirim kodu oluşturmayı sağlar
         * @param {string} [discountCode] 
         * @param {number} [discountPercentage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDiscount(discountCode?: string, discountPercentage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PromotionAdministrationCommandsCreateDiscountCommandResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDiscount(discountCode, discountPercentage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary İndirim kodunu silmeye yarar
         * @param {number} [discountId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDiscount(discountId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDiscount(discountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary İndirim kodlarının listesini getirir
         * @param {number} [page] 
         * @param {number} [itemPerPage] 
         * @param {string} [searchKeyword] Discount listesinde arama yapılacak kelimeyi barındırır
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDiscounts(page?: number, itemPerPage?: number, searchKeyword?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PromotionAdministrationQueriesListDiscountsQueryResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDiscounts(page, itemPerPage, searchKeyword, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PromotionAdministrationApi - factory interface
 * @export
 */
export const PromotionAdministrationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PromotionAdministrationApiFp(configuration)
    return {
        /**
         * 
         * @summary İndirimin aktiflik durumunu değiştirmeyi sağlar
         * @param {number} [discountId] 
         * @param {boolean} [newState] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeDiscountActiveState(discountId?: number, newState?: boolean, options?: any): AxiosPromise<object> {
            return localVarFp.changeDiscountActiveState(discountId, newState, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Yeni indirim kodu oluşturmayı sağlar
         * @param {string} [discountCode] 
         * @param {number} [discountPercentage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDiscount(discountCode?: string, discountPercentage?: number, options?: any): AxiosPromise<PromotionAdministrationCommandsCreateDiscountCommandResult> {
            return localVarFp.createDiscount(discountCode, discountPercentage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary İndirim kodunu silmeye yarar
         * @param {number} [discountId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDiscount(discountId?: number, options?: any): AxiosPromise<object> {
            return localVarFp.deleteDiscount(discountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary İndirim kodlarının listesini getirir
         * @param {number} [page] 
         * @param {number} [itemPerPage] 
         * @param {string} [searchKeyword] Discount listesinde arama yapılacak kelimeyi barındırır
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDiscounts(page?: number, itemPerPage?: number, searchKeyword?: string, options?: any): AxiosPromise<PromotionAdministrationQueriesListDiscountsQueryResult> {
            return localVarFp.listDiscounts(page, itemPerPage, searchKeyword, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PromotionAdministrationApi - interface
 * @export
 * @interface PromotionAdministrationApi
 */
export interface PromotionAdministrationApiInterface {
    /**
     * 
     * @summary İndirimin aktiflik durumunu değiştirmeyi sağlar
     * @param {number} [discountId] 
     * @param {boolean} [newState] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionAdministrationApiInterface
     */
    changeDiscountActiveState(discountId?: number, newState?: boolean, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Yeni indirim kodu oluşturmayı sağlar
     * @param {string} [discountCode] 
     * @param {number} [discountPercentage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionAdministrationApiInterface
     */
    createDiscount(discountCode?: string, discountPercentage?: number, options?: AxiosRequestConfig): AxiosPromise<PromotionAdministrationCommandsCreateDiscountCommandResult>;

    /**
     * 
     * @summary İndirim kodunu silmeye yarar
     * @param {number} [discountId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionAdministrationApiInterface
     */
    deleteDiscount(discountId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary İndirim kodlarının listesini getirir
     * @param {number} [page] 
     * @param {number} [itemPerPage] 
     * @param {string} [searchKeyword] Discount listesinde arama yapılacak kelimeyi barındırır
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionAdministrationApiInterface
     */
    listDiscounts(page?: number, itemPerPage?: number, searchKeyword?: string, options?: AxiosRequestConfig): AxiosPromise<PromotionAdministrationQueriesListDiscountsQueryResult>;

}

/**
 * PromotionAdministrationApi - object-oriented interface
 * @export
 * @class PromotionAdministrationApi
 * @extends {BaseAPI}
 */
export class PromotionAdministrationApi extends BaseAPI implements PromotionAdministrationApiInterface {
    /**
     * 
     * @summary İndirimin aktiflik durumunu değiştirmeyi sağlar
     * @param {number} [discountId] 
     * @param {boolean} [newState] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionAdministrationApi
     */
    public changeDiscountActiveState(discountId?: number, newState?: boolean, options?: AxiosRequestConfig) {
        return PromotionAdministrationApiFp(this.configuration).changeDiscountActiveState(discountId, newState, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Yeni indirim kodu oluşturmayı sağlar
     * @param {string} [discountCode] 
     * @param {number} [discountPercentage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionAdministrationApi
     */
    public createDiscount(discountCode?: string, discountPercentage?: number, options?: AxiosRequestConfig) {
        return PromotionAdministrationApiFp(this.configuration).createDiscount(discountCode, discountPercentage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary İndirim kodunu silmeye yarar
     * @param {number} [discountId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionAdministrationApi
     */
    public deleteDiscount(discountId?: number, options?: AxiosRequestConfig) {
        return PromotionAdministrationApiFp(this.configuration).deleteDiscount(discountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary İndirim kodlarının listesini getirir
     * @param {number} [page] 
     * @param {number} [itemPerPage] 
     * @param {string} [searchKeyword] Discount listesinde arama yapılacak kelimeyi barındırır
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionAdministrationApi
     */
    public listDiscounts(page?: number, itemPerPage?: number, searchKeyword?: string, options?: AxiosRequestConfig) {
        return PromotionAdministrationApiFp(this.configuration).listDiscounts(page, itemPerPage, searchKeyword, options).then((request) => request(this.axios, this.basePath));
    }
}

