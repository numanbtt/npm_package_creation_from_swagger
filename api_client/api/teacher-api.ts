/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FluentValidationResultsValidationFailure } from '../models';
// @ts-ignore
import { TeacherCommandsLoginWithDirectAuthCommandResult } from '../models';
// @ts-ignore
import { TeacherCommandsRegisterCommandResult } from '../models';
// @ts-ignore
import { TeacherCommandsStartToExportMyAllInformationsCommandResult } from '../models';
// @ts-ignore
import { TeacherCommandsUpdateMySpecalitiesParemeters } from '../models';
// @ts-ignore
import { TeacherCommandsUpdateProfilePhotoCommandResult } from '../models';
// @ts-ignore
import { TeacherQueriesGetDetailsQueryResult } from '../models';
// @ts-ignore
import { TeacherQueriesGetMyDetailsQueryResult } from '../models';
// @ts-ignore
import { TeacherQueriesListMyExportsQueryResult } from '../models';
// @ts-ignore
import { TeacherQueriesListMyFavoritesQueryResult } from '../models';
// @ts-ignore
import { TeacherQueriesListQueryResult } from '../models';
// @ts-ignore
import { TeacherQueriesMyEarningsQueryResult } from '../models';
// @ts-ignore
import { TeacherQueriesMyRatingResultList } from '../models';
/**
 * TeacherApi - axios parameter creator
 * @export
 */
export const TeacherApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Öğretmene gelen anlık aramayı kabul etmesini sağlar.
         * @param {number} [callId] 
         * @param {number} [teacherId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptCall: async (callId?: number, teacherId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Teacher/AcceptCall`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (callId !== undefined) {
                localVarQueryParameter['CallId'] = callId;
            }

            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğrencinin öğretmeni engellemesini sağlar.
         * @param {number} [teacherId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blockTeacher: async (teacherId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Teacher/Block`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğretmenin açıklamasını değiştirir.
         * @param {string} [newDescription] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeMyDescription: async (newDescription?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Teacher/ChangeMyDescription`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (newDescription !== undefined) {
                localVarQueryParameter['NewDescription'] = newDescription;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğretmenin sisteme kayıtlı IBAN bilgisini değiştirir.
         * @param {string} [bankName] 
         * @param {string} [accountHolderName] 
         * @param {string} [iban] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeMyIbanNumber: async (bankName?: string, accountHolderName?: string, iban?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Teacher/ChangeMyIbanNumber`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (bankName !== undefined) {
                localVarQueryParameter['BankName'] = bankName;
            }

            if (accountHolderName !== undefined) {
                localVarQueryParameter['AccountHolderName'] = accountHolderName;
            }

            if (iban !== undefined) {
                localVarQueryParameter['Iban'] = iban;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğretmenin çevrimiçi/çevrimdışı durumunu değiştirir.
         * @param {boolean} [isOnline] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeMyOnlineStatus: async (isOnline?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Teacher/ChangeMyOnlineStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (isOnline !== undefined) {
                localVarQueryParameter['IsOnline'] = isOnline;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğretmenin youtube video linkini değiştirir.
         * @param {string} [youtubeVideoUrl] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeMyYoutubeVideoUrl: async (youtubeVideoUrl?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Teacher/ChangeMyYoutubeVideoUrl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (youtubeVideoUrl !== undefined) {
                localVarQueryParameter['YoutubeVideoUrl'] = youtubeVideoUrl;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [teacherId] 
         * @param {number} [studentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkStudentReview: async (teacherId?: number, studentId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Teacher/CheckStudentReview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }

            if (studentId !== undefined) {
                localVarQueryParameter['StudentId'] = studentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğretmenin hesabının silme isteğini admine mail olarak iletir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMyAccountAsTeacher: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Teacher/DeleteMyAccount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğrencinin öğretmeni favoriye eklemesini sağlar.
         * @param {number} [teacherId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        favoriteTeacher: async (teacherId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Teacher/Favorite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğretmenin kendi detayını getirir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyDetailsAsTeacher: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Teacher/GetMyDetails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğretmen\'in detayını getirir.
         * @param {number} teacherId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeacherDetails: async (teacherId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teacherId' is not null or undefined
            assertParamExists('getTeacherDetails', 'teacherId', teacherId)
            const localVarPath = `/api/Teacher/GetDetails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğretmenin dışa aktarılmaya hazır verilerini listeler.
         * @param {string} [lastCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMyExportsAsTeacher: async (lastCreatedAt?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Teacher/ListMyExports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (lastCreatedAt !== undefined) {
                localVarQueryParameter['LastCreatedAt'] = (lastCreatedAt as any instanceof Date) ?
                    (lastCreatedAt as any).toISOString() :
                    lastCreatedAt;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Favori öğretmenleri listeler. Ayrıca isimle arama filtresi uygulanabilir.
         * @param {number} [lastTeacherId] 
         * @param {string} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMyFavoriteTeachers: async (lastTeacherId?: number, query?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Teacher/ListMyFavorites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (lastTeacherId !== undefined) {
                localVarQueryParameter['LastTeacherId'] = lastTeacherId;
            }

            if (query !== undefined) {
                localVarQueryParameter['Query'] = query;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğretmenleri listeler. Ayrıca filtreler uygulanabilir.
         * @param {number} [lastId] 
         * @param {string} [filtersQuery] 
         * @param {Array<string>} [filtersTeachingStyles] Girilebilecek değerler:  KIND_AND_PATIENT,  FUN_AND_GREGARIOUS,  SCHOLARLY_AND_KNOWLEDGEABLE
         * @param {Array<string>} [filtersLessonTypes] Girilebilecek değerler:  PRONUNCIATION_LESSONS,  GRAMMAR_LESSONS,  LESSONS_WITH_MOVIES,  LESSONS_FOR_CHILDREN,  BUSINESS_ENGLISH,  UNIVERSITY_ENGLISH_PREPARATION,  EXAM,  TOEFL_PREPARATION,  IELTS_PREPARATION
         * @param {Array<string>} [filtersLanguageLevel] Girilebilecek değerler:  BEGINNER,  INTERMEDIATE,  ADVANCED
         * @param {Array<string>} [filtersAccentTypes] Girilebilecek değerler:  NATIVE_US,  NATIVE_BRITISH,  TURKISH,  OTHER
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeachers: async (lastId?: number, filtersQuery?: string, filtersTeachingStyles?: Array<string>, filtersLessonTypes?: Array<string>, filtersLanguageLevel?: Array<string>, filtersAccentTypes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Teacher/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (lastId !== undefined) {
                localVarQueryParameter['LastId'] = lastId;
            }

            if (filtersQuery !== undefined) {
                localVarQueryParameter['Filters.Query'] = filtersQuery;
            }

            if (filtersTeachingStyles) {
                localVarQueryParameter['Filters.TeachingStyles'] = filtersTeachingStyles;
            }

            if (filtersLessonTypes) {
                localVarQueryParameter['Filters.LessonTypes'] = filtersLessonTypes;
            }

            if (filtersLanguageLevel) {
                localVarQueryParameter['Filters.LanguageLevel'] = filtersLanguageLevel;
            }

            if (filtersAccentTypes) {
                localVarQueryParameter['Filters.AccentTypes'] = filtersAccentTypes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginOutWithDirectAuthAsTeacher: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Teacher/LoginOutWithDirectAuth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğretmenin eposta ve şifre ile giriş yapabilmesini sağlar.
         * @param {string} [email] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginWithDirectAuthAsTeacher: async (email?: string, password?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Teacher/LoginWithDirectAuth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['Email'] = email;
            }

            if (password !== undefined) {
                localVarQueryParameter['Password'] = password;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğretmenin kazanç durumunu getirir.  Kazanç hesaplaması neye göre ve nasıl olacak?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myEarnings: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Teacher/MyEarnings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Görüşme sonrasında öğretmeni puanlar.
         * @param {number} [appointmentId] 
         * @param {number} [rate] 
         * @param {string} [comment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rateTeacher: async (appointmentId?: number, rate?: number, comment?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Teacher/Rate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (appointmentId !== undefined) {
                localVarQueryParameter['AppointmentId'] = appointmentId;
            }

            if (rate !== undefined) {
                localVarQueryParameter['Rate'] = rate;
            }

            if (comment !== undefined) {
                localVarQueryParameter['comment'] = comment;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ratingDelete: async (id?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Teacher/RatingDelete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [teacherId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ratingList: async (teacherId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Teacher/RatingList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğretmen olarak kayıt olmayı sağlar
         * @param {File} [profilePhoto] 
         * @param {string} [nameSurname] 
         * @param {string} [eMail] 
         * @param {string} [password] 
         * @param {string} [phoneNumber] 
         * @param {string} [description] 
         * @param {string} [youtubeVideoUrl] 
         * @param {string} [accent] 
         * @param {string} [teachingStyles] 
         * @param {string} [lessonTypes] 
         * @param {string} [languageLevel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerAsTeacher: async (profilePhoto?: File, nameSurname?: string, eMail?: string, password?: string, phoneNumber?: string, description?: string, youtubeVideoUrl?: string, accent?: string, teachingStyles?: string, lessonTypes?: string, languageLevel?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Teacher/Register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (nameSurname !== undefined) {
                localVarQueryParameter['NameSurname'] = nameSurname;
            }

            if (eMail !== undefined) {
                localVarQueryParameter['EMail'] = eMail;
            }

            if (password !== undefined) {
                localVarQueryParameter['Password'] = password;
            }

            if (phoneNumber !== undefined) {
                localVarQueryParameter['PhoneNumber'] = phoneNumber;
            }

            if (description !== undefined) {
                localVarQueryParameter['Description'] = description;
            }

            if (youtubeVideoUrl !== undefined) {
                localVarQueryParameter['YoutubeVideoUrl'] = youtubeVideoUrl;
            }

            if (accent !== undefined) {
                localVarQueryParameter['Accent'] = accent;
            }

            if (teachingStyles !== undefined) {
                localVarQueryParameter['TeachingStyles'] = teachingStyles;
            }

            if (lessonTypes !== undefined) {
                localVarQueryParameter['LessonTypes'] = lessonTypes;
            }

            if (languageLevel !== undefined) {
                localVarQueryParameter['LanguageLevel'] = languageLevel;
            }


            if (profilePhoto !== undefined) { 
                localVarFormParams.append('ProfilePhoto', profilePhoto as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğretmene gelen anlık aramayı reddetmesini sağlar.
         * @param {number} [callId] 
         * @param {number} [teacherId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectCall: async (callId?: number, teacherId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Teacher/RejectCall`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (callId !== undefined) {
                localVarQueryParameter['CallId'] = callId;
            }

            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğrencinin öğretmeni rapor etmesini sağlar.
         * @param {number} [teacherId] 
         * @param {string} [content] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportTeacher: async (teacherId?: number, content?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Teacher/Report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }

            if (content !== undefined) {
                localVarQueryParameter['Content'] = content;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Kullanıcının tüm verisini dışarı aktarma işlemini başlatır. Halihazırda dışa aktarım dosyaları hazırlanıyorsa hata vermelidir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startToExportMyAllInformationsAsTeacher: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Teacher/StartToExportMyAllInformations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [teacherId] 
         * @param {number} [studentId] 
         * @param {number} [rate] 
         * @param {string} [comment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherRatePost: async (teacherId?: number, studentId?: number, rate?: number, comment?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Teacher/TeacherRatePost`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }

            if (studentId !== undefined) {
                localVarQueryParameter['StudentId'] = studentId;
            }

            if (rate !== undefined) {
                localVarQueryParameter['Rate'] = rate;
            }

            if (comment !== undefined) {
                localVarQueryParameter['comment'] = comment;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğrencinin öğretmenin engelini kaldırmasını sağlar.
         * @param {number} [teacherId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unblockTeacher: async (teacherId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Teacher/Unblock`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğrencinin öğretmeni favorilerinden kaldırmasını sağlar.
         * @param {number} [teacherId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unfavoriteTeacher: async (teacherId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Teacher/Unfavorite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğretmenin profil fotoğrafını değiştirmesini sağlar.
         * @param {File} [photo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMyProfilePhotoAsTeacher: async (photo?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Teacher/UpdateProfilePhoto`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (photo !== undefined) { 
                localVarFormParams.append('Photo', photo as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğretmen\'in kendi uzmanlıklarını güncelleyebilmesini sağlar.
         * @param {TeacherCommandsUpdateMySpecalitiesParemeters} [teacherCommandsUpdateMySpecalitiesParemeters] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMySpecalities: async (teacherCommandsUpdateMySpecalitiesParemeters?: TeacherCommandsUpdateMySpecalitiesParemeters, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Teacher/UpdateMySpecalities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(teacherCommandsUpdateMySpecalitiesParemeters, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeacherApi - functional programming interface
 * @export
 */
export const TeacherApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeacherApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Öğretmene gelen anlık aramayı kabul etmesini sağlar.
         * @param {number} [callId] 
         * @param {number} [teacherId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acceptCall(callId?: number, teacherId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acceptCall(callId, teacherId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğrencinin öğretmeni engellemesini sağlar.
         * @param {number} [teacherId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blockTeacher(teacherId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blockTeacher(teacherId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğretmenin açıklamasını değiştirir.
         * @param {string} [newDescription] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeMyDescription(newDescription?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeMyDescription(newDescription, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğretmenin sisteme kayıtlı IBAN bilgisini değiştirir.
         * @param {string} [bankName] 
         * @param {string} [accountHolderName] 
         * @param {string} [iban] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeMyIbanNumber(bankName?: string, accountHolderName?: string, iban?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeMyIbanNumber(bankName, accountHolderName, iban, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğretmenin çevrimiçi/çevrimdışı durumunu değiştirir.
         * @param {boolean} [isOnline] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeMyOnlineStatus(isOnline?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeMyOnlineStatus(isOnline, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğretmenin youtube video linkini değiştirir.
         * @param {string} [youtubeVideoUrl] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeMyYoutubeVideoUrl(youtubeVideoUrl?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeMyYoutubeVideoUrl(youtubeVideoUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [teacherId] 
         * @param {number} [studentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkStudentReview(teacherId?: number, studentId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkStudentReview(teacherId, studentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğretmenin hesabının silme isteğini admine mail olarak iletir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMyAccountAsTeacher(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMyAccountAsTeacher(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğrencinin öğretmeni favoriye eklemesini sağlar.
         * @param {number} [teacherId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async favoriteTeacher(teacherId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.favoriteTeacher(teacherId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğretmenin kendi detayını getirir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyDetailsAsTeacher(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherQueriesGetMyDetailsQueryResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyDetailsAsTeacher(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğretmen\'in detayını getirir.
         * @param {number} teacherId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeacherDetails(teacherId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherQueriesGetDetailsQueryResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeacherDetails(teacherId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğretmenin dışa aktarılmaya hazır verilerini listeler.
         * @param {string} [lastCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMyExportsAsTeacher(lastCreatedAt?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherQueriesListMyExportsQueryResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMyExportsAsTeacher(lastCreatedAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Favori öğretmenleri listeler. Ayrıca isimle arama filtresi uygulanabilir.
         * @param {number} [lastTeacherId] 
         * @param {string} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMyFavoriteTeachers(lastTeacherId?: number, query?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherQueriesListMyFavoritesQueryResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMyFavoriteTeachers(lastTeacherId, query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğretmenleri listeler. Ayrıca filtreler uygulanabilir.
         * @param {number} [lastId] 
         * @param {string} [filtersQuery] 
         * @param {Array<string>} [filtersTeachingStyles] Girilebilecek değerler:  KIND_AND_PATIENT,  FUN_AND_GREGARIOUS,  SCHOLARLY_AND_KNOWLEDGEABLE
         * @param {Array<string>} [filtersLessonTypes] Girilebilecek değerler:  PRONUNCIATION_LESSONS,  GRAMMAR_LESSONS,  LESSONS_WITH_MOVIES,  LESSONS_FOR_CHILDREN,  BUSINESS_ENGLISH,  UNIVERSITY_ENGLISH_PREPARATION,  EXAM,  TOEFL_PREPARATION,  IELTS_PREPARATION
         * @param {Array<string>} [filtersLanguageLevel] Girilebilecek değerler:  BEGINNER,  INTERMEDIATE,  ADVANCED
         * @param {Array<string>} [filtersAccentTypes] Girilebilecek değerler:  NATIVE_US,  NATIVE_BRITISH,  TURKISH,  OTHER
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTeachers(lastId?: number, filtersQuery?: string, filtersTeachingStyles?: Array<string>, filtersLessonTypes?: Array<string>, filtersLanguageLevel?: Array<string>, filtersAccentTypes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherQueriesListQueryResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTeachers(lastId, filtersQuery, filtersTeachingStyles, filtersLessonTypes, filtersLanguageLevel, filtersAccentTypes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginOutWithDirectAuthAsTeacher(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginOutWithDirectAuthAsTeacher(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğretmenin eposta ve şifre ile giriş yapabilmesini sağlar.
         * @param {string} [email] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginWithDirectAuthAsTeacher(email?: string, password?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherCommandsLoginWithDirectAuthCommandResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginWithDirectAuthAsTeacher(email, password, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğretmenin kazanç durumunu getirir.  Kazanç hesaplaması neye göre ve nasıl olacak?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async myEarnings(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherQueriesMyEarningsQueryResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.myEarnings(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Görüşme sonrasında öğretmeni puanlar.
         * @param {number} [appointmentId] 
         * @param {number} [rate] 
         * @param {string} [comment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rateTeacher(appointmentId?: number, rate?: number, comment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rateTeacher(appointmentId, rate, comment, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ratingDelete(id?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ratingDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [teacherId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ratingList(teacherId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TeacherQueriesMyRatingResultList>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ratingList(teacherId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğretmen olarak kayıt olmayı sağlar
         * @param {File} [profilePhoto] 
         * @param {string} [nameSurname] 
         * @param {string} [eMail] 
         * @param {string} [password] 
         * @param {string} [phoneNumber] 
         * @param {string} [description] 
         * @param {string} [youtubeVideoUrl] 
         * @param {string} [accent] 
         * @param {string} [teachingStyles] 
         * @param {string} [lessonTypes] 
         * @param {string} [languageLevel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerAsTeacher(profilePhoto?: File, nameSurname?: string, eMail?: string, password?: string, phoneNumber?: string, description?: string, youtubeVideoUrl?: string, accent?: string, teachingStyles?: string, lessonTypes?: string, languageLevel?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherCommandsRegisterCommandResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerAsTeacher(profilePhoto, nameSurname, eMail, password, phoneNumber, description, youtubeVideoUrl, accent, teachingStyles, lessonTypes, languageLevel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğretmene gelen anlık aramayı reddetmesini sağlar.
         * @param {number} [callId] 
         * @param {number} [teacherId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rejectCall(callId?: number, teacherId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rejectCall(callId, teacherId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğrencinin öğretmeni rapor etmesini sağlar.
         * @param {number} [teacherId] 
         * @param {string} [content] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportTeacher(teacherId?: number, content?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportTeacher(teacherId, content, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Kullanıcının tüm verisini dışarı aktarma işlemini başlatır. Halihazırda dışa aktarım dosyaları hazırlanıyorsa hata vermelidir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startToExportMyAllInformationsAsTeacher(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherCommandsStartToExportMyAllInformationsCommandResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startToExportMyAllInformationsAsTeacher(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [teacherId] 
         * @param {number} [studentId] 
         * @param {number} [rate] 
         * @param {string} [comment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teacherRatePost(teacherId?: number, studentId?: number, rate?: number, comment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teacherRatePost(teacherId, studentId, rate, comment, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğrencinin öğretmenin engelini kaldırmasını sağlar.
         * @param {number} [teacherId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unblockTeacher(teacherId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unblockTeacher(teacherId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğrencinin öğretmeni favorilerinden kaldırmasını sağlar.
         * @param {number} [teacherId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unfavoriteTeacher(teacherId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unfavoriteTeacher(teacherId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğretmenin profil fotoğrafını değiştirmesini sağlar.
         * @param {File} [photo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMyProfilePhotoAsTeacher(photo?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherCommandsUpdateProfilePhotoCommandResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMyProfilePhotoAsTeacher(photo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğretmen\'in kendi uzmanlıklarını güncelleyebilmesini sağlar.
         * @param {TeacherCommandsUpdateMySpecalitiesParemeters} [teacherCommandsUpdateMySpecalitiesParemeters] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMySpecalities(teacherCommandsUpdateMySpecalitiesParemeters?: TeacherCommandsUpdateMySpecalitiesParemeters, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMySpecalities(teacherCommandsUpdateMySpecalitiesParemeters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TeacherApi - factory interface
 * @export
 */
export const TeacherApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeacherApiFp(configuration)
    return {
        /**
         * 
         * @summary Öğretmene gelen anlık aramayı kabul etmesini sağlar.
         * @param {number} [callId] 
         * @param {number} [teacherId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptCall(callId?: number, teacherId?: number, options?: any): AxiosPromise<object> {
            return localVarFp.acceptCall(callId, teacherId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğrencinin öğretmeni engellemesini sağlar.
         * @param {number} [teacherId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blockTeacher(teacherId?: number, options?: any): AxiosPromise<object> {
            return localVarFp.blockTeacher(teacherId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğretmenin açıklamasını değiştirir.
         * @param {string} [newDescription] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeMyDescription(newDescription?: string, options?: any): AxiosPromise<object> {
            return localVarFp.changeMyDescription(newDescription, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğretmenin sisteme kayıtlı IBAN bilgisini değiştirir.
         * @param {string} [bankName] 
         * @param {string} [accountHolderName] 
         * @param {string} [iban] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeMyIbanNumber(bankName?: string, accountHolderName?: string, iban?: string, options?: any): AxiosPromise<object> {
            return localVarFp.changeMyIbanNumber(bankName, accountHolderName, iban, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğretmenin çevrimiçi/çevrimdışı durumunu değiştirir.
         * @param {boolean} [isOnline] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeMyOnlineStatus(isOnline?: boolean, options?: any): AxiosPromise<object> {
            return localVarFp.changeMyOnlineStatus(isOnline, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğretmenin youtube video linkini değiştirir.
         * @param {string} [youtubeVideoUrl] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeMyYoutubeVideoUrl(youtubeVideoUrl?: string, options?: any): AxiosPromise<object> {
            return localVarFp.changeMyYoutubeVideoUrl(youtubeVideoUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [teacherId] 
         * @param {number} [studentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkStudentReview(teacherId?: number, studentId?: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.checkStudentReview(teacherId, studentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğretmenin hesabının silme isteğini admine mail olarak iletir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMyAccountAsTeacher(options?: any): AxiosPromise<object> {
            return localVarFp.deleteMyAccountAsTeacher(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğrencinin öğretmeni favoriye eklemesini sağlar.
         * @param {number} [teacherId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        favoriteTeacher(teacherId?: number, options?: any): AxiosPromise<object> {
            return localVarFp.favoriteTeacher(teacherId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğretmenin kendi detayını getirir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyDetailsAsTeacher(options?: any): AxiosPromise<TeacherQueriesGetMyDetailsQueryResult> {
            return localVarFp.getMyDetailsAsTeacher(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğretmen\'in detayını getirir.
         * @param {number} teacherId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeacherDetails(teacherId: number, options?: any): AxiosPromise<TeacherQueriesGetDetailsQueryResult> {
            return localVarFp.getTeacherDetails(teacherId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğretmenin dışa aktarılmaya hazır verilerini listeler.
         * @param {string} [lastCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMyExportsAsTeacher(lastCreatedAt?: string, options?: any): AxiosPromise<TeacherQueriesListMyExportsQueryResult> {
            return localVarFp.listMyExportsAsTeacher(lastCreatedAt, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Favori öğretmenleri listeler. Ayrıca isimle arama filtresi uygulanabilir.
         * @param {number} [lastTeacherId] 
         * @param {string} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMyFavoriteTeachers(lastTeacherId?: number, query?: string, options?: any): AxiosPromise<TeacherQueriesListMyFavoritesQueryResult> {
            return localVarFp.listMyFavoriteTeachers(lastTeacherId, query, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğretmenleri listeler. Ayrıca filtreler uygulanabilir.
         * @param {number} [lastId] 
         * @param {string} [filtersQuery] 
         * @param {Array<string>} [filtersTeachingStyles] Girilebilecek değerler:  KIND_AND_PATIENT,  FUN_AND_GREGARIOUS,  SCHOLARLY_AND_KNOWLEDGEABLE
         * @param {Array<string>} [filtersLessonTypes] Girilebilecek değerler:  PRONUNCIATION_LESSONS,  GRAMMAR_LESSONS,  LESSONS_WITH_MOVIES,  LESSONS_FOR_CHILDREN,  BUSINESS_ENGLISH,  UNIVERSITY_ENGLISH_PREPARATION,  EXAM,  TOEFL_PREPARATION,  IELTS_PREPARATION
         * @param {Array<string>} [filtersLanguageLevel] Girilebilecek değerler:  BEGINNER,  INTERMEDIATE,  ADVANCED
         * @param {Array<string>} [filtersAccentTypes] Girilebilecek değerler:  NATIVE_US,  NATIVE_BRITISH,  TURKISH,  OTHER
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeachers(lastId?: number, filtersQuery?: string, filtersTeachingStyles?: Array<string>, filtersLessonTypes?: Array<string>, filtersLanguageLevel?: Array<string>, filtersAccentTypes?: Array<string>, options?: any): AxiosPromise<TeacherQueriesListQueryResult> {
            return localVarFp.listTeachers(lastId, filtersQuery, filtersTeachingStyles, filtersLessonTypes, filtersLanguageLevel, filtersAccentTypes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginOutWithDirectAuthAsTeacher(options?: any): AxiosPromise<object> {
            return localVarFp.loginOutWithDirectAuthAsTeacher(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğretmenin eposta ve şifre ile giriş yapabilmesini sağlar.
         * @param {string} [email] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginWithDirectAuthAsTeacher(email?: string, password?: string, options?: any): AxiosPromise<TeacherCommandsLoginWithDirectAuthCommandResult> {
            return localVarFp.loginWithDirectAuthAsTeacher(email, password, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğretmenin kazanç durumunu getirir.  Kazanç hesaplaması neye göre ve nasıl olacak?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myEarnings(options?: any): AxiosPromise<TeacherQueriesMyEarningsQueryResult> {
            return localVarFp.myEarnings(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Görüşme sonrasında öğretmeni puanlar.
         * @param {number} [appointmentId] 
         * @param {number} [rate] 
         * @param {string} [comment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rateTeacher(appointmentId?: number, rate?: number, comment?: string, options?: any): AxiosPromise<object> {
            return localVarFp.rateTeacher(appointmentId, rate, comment, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ratingDelete(id?: number, options?: any): AxiosPromise<object> {
            return localVarFp.ratingDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [teacherId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ratingList(teacherId?: number, options?: any): AxiosPromise<Array<TeacherQueriesMyRatingResultList>> {
            return localVarFp.ratingList(teacherId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğretmen olarak kayıt olmayı sağlar
         * @param {File} [profilePhoto] 
         * @param {string} [nameSurname] 
         * @param {string} [eMail] 
         * @param {string} [password] 
         * @param {string} [phoneNumber] 
         * @param {string} [description] 
         * @param {string} [youtubeVideoUrl] 
         * @param {string} [accent] 
         * @param {string} [teachingStyles] 
         * @param {string} [lessonTypes] 
         * @param {string} [languageLevel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerAsTeacher(profilePhoto?: File, nameSurname?: string, eMail?: string, password?: string, phoneNumber?: string, description?: string, youtubeVideoUrl?: string, accent?: string, teachingStyles?: string, lessonTypes?: string, languageLevel?: string, options?: any): AxiosPromise<TeacherCommandsRegisterCommandResult> {
            return localVarFp.registerAsTeacher(profilePhoto, nameSurname, eMail, password, phoneNumber, description, youtubeVideoUrl, accent, teachingStyles, lessonTypes, languageLevel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğretmene gelen anlık aramayı reddetmesini sağlar.
         * @param {number} [callId] 
         * @param {number} [teacherId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectCall(callId?: number, teacherId?: number, options?: any): AxiosPromise<object> {
            return localVarFp.rejectCall(callId, teacherId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğrencinin öğretmeni rapor etmesini sağlar.
         * @param {number} [teacherId] 
         * @param {string} [content] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportTeacher(teacherId?: number, content?: string, options?: any): AxiosPromise<object> {
            return localVarFp.reportTeacher(teacherId, content, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Kullanıcının tüm verisini dışarı aktarma işlemini başlatır. Halihazırda dışa aktarım dosyaları hazırlanıyorsa hata vermelidir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startToExportMyAllInformationsAsTeacher(options?: any): AxiosPromise<TeacherCommandsStartToExportMyAllInformationsCommandResult> {
            return localVarFp.startToExportMyAllInformationsAsTeacher(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [teacherId] 
         * @param {number} [studentId] 
         * @param {number} [rate] 
         * @param {string} [comment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherRatePost(teacherId?: number, studentId?: number, rate?: number, comment?: string, options?: any): AxiosPromise<object> {
            return localVarFp.teacherRatePost(teacherId, studentId, rate, comment, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğrencinin öğretmenin engelini kaldırmasını sağlar.
         * @param {number} [teacherId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unblockTeacher(teacherId?: number, options?: any): AxiosPromise<object> {
            return localVarFp.unblockTeacher(teacherId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğrencinin öğretmeni favorilerinden kaldırmasını sağlar.
         * @param {number} [teacherId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unfavoriteTeacher(teacherId?: number, options?: any): AxiosPromise<object> {
            return localVarFp.unfavoriteTeacher(teacherId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğretmenin profil fotoğrafını değiştirmesini sağlar.
         * @param {File} [photo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMyProfilePhotoAsTeacher(photo?: File, options?: any): AxiosPromise<TeacherCommandsUpdateProfilePhotoCommandResult> {
            return localVarFp.updateMyProfilePhotoAsTeacher(photo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğretmen\'in kendi uzmanlıklarını güncelleyebilmesini sağlar.
         * @param {TeacherCommandsUpdateMySpecalitiesParemeters} [teacherCommandsUpdateMySpecalitiesParemeters] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMySpecalities(teacherCommandsUpdateMySpecalitiesParemeters?: TeacherCommandsUpdateMySpecalitiesParemeters, options?: any): AxiosPromise<object> {
            return localVarFp.updateMySpecalities(teacherCommandsUpdateMySpecalitiesParemeters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TeacherApi - interface
 * @export
 * @interface TeacherApi
 */
export interface TeacherApiInterface {
    /**
     * 
     * @summary Öğretmene gelen anlık aramayı kabul etmesini sağlar.
     * @param {number} [callId] 
     * @param {number} [teacherId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    acceptCall(callId?: number, teacherId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Öğrencinin öğretmeni engellemesini sağlar.
     * @param {number} [teacherId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    blockTeacher(teacherId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Öğretmenin açıklamasını değiştirir.
     * @param {string} [newDescription] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    changeMyDescription(newDescription?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Öğretmenin sisteme kayıtlı IBAN bilgisini değiştirir.
     * @param {string} [bankName] 
     * @param {string} [accountHolderName] 
     * @param {string} [iban] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    changeMyIbanNumber(bankName?: string, accountHolderName?: string, iban?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Öğretmenin çevrimiçi/çevrimdışı durumunu değiştirir.
     * @param {boolean} [isOnline] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    changeMyOnlineStatus(isOnline?: boolean, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Öğretmenin youtube video linkini değiştirir.
     * @param {string} [youtubeVideoUrl] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    changeMyYoutubeVideoUrl(youtubeVideoUrl?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @param {number} [teacherId] 
     * @param {number} [studentId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    checkStudentReview(teacherId?: number, studentId?: number, options?: AxiosRequestConfig): AxiosPromise<boolean>;

    /**
     * 
     * @summary Öğretmenin hesabının silme isteğini admine mail olarak iletir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    deleteMyAccountAsTeacher(options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Öğrencinin öğretmeni favoriye eklemesini sağlar.
     * @param {number} [teacherId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    favoriteTeacher(teacherId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Öğretmenin kendi detayını getirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    getMyDetailsAsTeacher(options?: AxiosRequestConfig): AxiosPromise<TeacherQueriesGetMyDetailsQueryResult>;

    /**
     * 
     * @summary Öğretmen\'in detayını getirir.
     * @param {number} teacherId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    getTeacherDetails(teacherId: number, options?: AxiosRequestConfig): AxiosPromise<TeacherQueriesGetDetailsQueryResult>;

    /**
     * 
     * @summary Öğretmenin dışa aktarılmaya hazır verilerini listeler.
     * @param {string} [lastCreatedAt] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    listMyExportsAsTeacher(lastCreatedAt?: string, options?: AxiosRequestConfig): AxiosPromise<TeacherQueriesListMyExportsQueryResult>;

    /**
     * 
     * @summary Favori öğretmenleri listeler. Ayrıca isimle arama filtresi uygulanabilir.
     * @param {number} [lastTeacherId] 
     * @param {string} [query] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    listMyFavoriteTeachers(lastTeacherId?: number, query?: string, options?: AxiosRequestConfig): AxiosPromise<TeacherQueriesListMyFavoritesQueryResult>;

    /**
     * 
     * @summary Öğretmenleri listeler. Ayrıca filtreler uygulanabilir.
     * @param {number} [lastId] 
     * @param {string} [filtersQuery] 
     * @param {Array<string>} [filtersTeachingStyles] Girilebilecek değerler:  KIND_AND_PATIENT,  FUN_AND_GREGARIOUS,  SCHOLARLY_AND_KNOWLEDGEABLE
     * @param {Array<string>} [filtersLessonTypes] Girilebilecek değerler:  PRONUNCIATION_LESSONS,  GRAMMAR_LESSONS,  LESSONS_WITH_MOVIES,  LESSONS_FOR_CHILDREN,  BUSINESS_ENGLISH,  UNIVERSITY_ENGLISH_PREPARATION,  EXAM,  TOEFL_PREPARATION,  IELTS_PREPARATION
     * @param {Array<string>} [filtersLanguageLevel] Girilebilecek değerler:  BEGINNER,  INTERMEDIATE,  ADVANCED
     * @param {Array<string>} [filtersAccentTypes] Girilebilecek değerler:  NATIVE_US,  NATIVE_BRITISH,  TURKISH,  OTHER
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    listTeachers(lastId?: number, filtersQuery?: string, filtersTeachingStyles?: Array<string>, filtersLessonTypes?: Array<string>, filtersLanguageLevel?: Array<string>, filtersAccentTypes?: Array<string>, options?: AxiosRequestConfig): AxiosPromise<TeacherQueriesListQueryResult>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    loginOutWithDirectAuthAsTeacher(options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Öğretmenin eposta ve şifre ile giriş yapabilmesini sağlar.
     * @param {string} [email] 
     * @param {string} [password] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    loginWithDirectAuthAsTeacher(email?: string, password?: string, options?: AxiosRequestConfig): AxiosPromise<TeacherCommandsLoginWithDirectAuthCommandResult>;

    /**
     * 
     * @summary Öğretmenin kazanç durumunu getirir.  Kazanç hesaplaması neye göre ve nasıl olacak?
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    myEarnings(options?: AxiosRequestConfig): AxiosPromise<TeacherQueriesMyEarningsQueryResult>;

    /**
     * 
     * @summary Görüşme sonrasında öğretmeni puanlar.
     * @param {number} [appointmentId] 
     * @param {number} [rate] 
     * @param {string} [comment] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    rateTeacher(appointmentId?: number, rate?: number, comment?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    ratingDelete(id?: number, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @param {number} [teacherId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    ratingList(teacherId?: number, options?: AxiosRequestConfig): AxiosPromise<Array<TeacherQueriesMyRatingResultList>>;

    /**
     * 
     * @summary Öğretmen olarak kayıt olmayı sağlar
     * @param {File} [profilePhoto] 
     * @param {string} [nameSurname] 
     * @param {string} [eMail] 
     * @param {string} [password] 
     * @param {string} [phoneNumber] 
     * @param {string} [description] 
     * @param {string} [youtubeVideoUrl] 
     * @param {string} [accent] 
     * @param {string} [teachingStyles] 
     * @param {string} [lessonTypes] 
     * @param {string} [languageLevel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    registerAsTeacher(profilePhoto?: File, nameSurname?: string, eMail?: string, password?: string, phoneNumber?: string, description?: string, youtubeVideoUrl?: string, accent?: string, teachingStyles?: string, lessonTypes?: string, languageLevel?: string, options?: AxiosRequestConfig): AxiosPromise<TeacherCommandsRegisterCommandResult>;

    /**
     * 
     * @summary Öğretmene gelen anlık aramayı reddetmesini sağlar.
     * @param {number} [callId] 
     * @param {number} [teacherId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    rejectCall(callId?: number, teacherId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Öğrencinin öğretmeni rapor etmesini sağlar.
     * @param {number} [teacherId] 
     * @param {string} [content] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    reportTeacher(teacherId?: number, content?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Kullanıcının tüm verisini dışarı aktarma işlemini başlatır. Halihazırda dışa aktarım dosyaları hazırlanıyorsa hata vermelidir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    startToExportMyAllInformationsAsTeacher(options?: AxiosRequestConfig): AxiosPromise<TeacherCommandsStartToExportMyAllInformationsCommandResult>;

    /**
     * 
     * @param {number} [teacherId] 
     * @param {number} [studentId] 
     * @param {number} [rate] 
     * @param {string} [comment] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    teacherRatePost(teacherId?: number, studentId?: number, rate?: number, comment?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Öğrencinin öğretmenin engelini kaldırmasını sağlar.
     * @param {number} [teacherId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    unblockTeacher(teacherId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Öğrencinin öğretmeni favorilerinden kaldırmasını sağlar.
     * @param {number} [teacherId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    unfavoriteTeacher(teacherId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Öğretmenin profil fotoğrafını değiştirmesini sağlar.
     * @param {File} [photo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    updateMyProfilePhotoAsTeacher(photo?: File, options?: AxiosRequestConfig): AxiosPromise<TeacherCommandsUpdateProfilePhotoCommandResult>;

    /**
     * 
     * @summary Öğretmen\'in kendi uzmanlıklarını güncelleyebilmesini sağlar.
     * @param {TeacherCommandsUpdateMySpecalitiesParemeters} [teacherCommandsUpdateMySpecalitiesParemeters] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    updateMySpecalities(teacherCommandsUpdateMySpecalitiesParemeters?: TeacherCommandsUpdateMySpecalitiesParemeters, options?: AxiosRequestConfig): AxiosPromise<object>;

}

/**
 * TeacherApi - object-oriented interface
 * @export
 * @class TeacherApi
 * @extends {BaseAPI}
 */
export class TeacherApi extends BaseAPI implements TeacherApiInterface {
    /**
     * 
     * @summary Öğretmene gelen anlık aramayı kabul etmesini sağlar.
     * @param {number} [callId] 
     * @param {number} [teacherId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public acceptCall(callId?: number, teacherId?: number, options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).acceptCall(callId, teacherId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğrencinin öğretmeni engellemesini sağlar.
     * @param {number} [teacherId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public blockTeacher(teacherId?: number, options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).blockTeacher(teacherId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğretmenin açıklamasını değiştirir.
     * @param {string} [newDescription] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public changeMyDescription(newDescription?: string, options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).changeMyDescription(newDescription, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğretmenin sisteme kayıtlı IBAN bilgisini değiştirir.
     * @param {string} [bankName] 
     * @param {string} [accountHolderName] 
     * @param {string} [iban] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public changeMyIbanNumber(bankName?: string, accountHolderName?: string, iban?: string, options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).changeMyIbanNumber(bankName, accountHolderName, iban, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğretmenin çevrimiçi/çevrimdışı durumunu değiştirir.
     * @param {boolean} [isOnline] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public changeMyOnlineStatus(isOnline?: boolean, options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).changeMyOnlineStatus(isOnline, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğretmenin youtube video linkini değiştirir.
     * @param {string} [youtubeVideoUrl] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public changeMyYoutubeVideoUrl(youtubeVideoUrl?: string, options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).changeMyYoutubeVideoUrl(youtubeVideoUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [teacherId] 
     * @param {number} [studentId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public checkStudentReview(teacherId?: number, studentId?: number, options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).checkStudentReview(teacherId, studentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğretmenin hesabının silme isteğini admine mail olarak iletir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public deleteMyAccountAsTeacher(options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).deleteMyAccountAsTeacher(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğrencinin öğretmeni favoriye eklemesini sağlar.
     * @param {number} [teacherId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public favoriteTeacher(teacherId?: number, options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).favoriteTeacher(teacherId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğretmenin kendi detayını getirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public getMyDetailsAsTeacher(options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).getMyDetailsAsTeacher(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğretmen\'in detayını getirir.
     * @param {number} teacherId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public getTeacherDetails(teacherId: number, options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).getTeacherDetails(teacherId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğretmenin dışa aktarılmaya hazır verilerini listeler.
     * @param {string} [lastCreatedAt] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public listMyExportsAsTeacher(lastCreatedAt?: string, options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).listMyExportsAsTeacher(lastCreatedAt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Favori öğretmenleri listeler. Ayrıca isimle arama filtresi uygulanabilir.
     * @param {number} [lastTeacherId] 
     * @param {string} [query] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public listMyFavoriteTeachers(lastTeacherId?: number, query?: string, options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).listMyFavoriteTeachers(lastTeacherId, query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğretmenleri listeler. Ayrıca filtreler uygulanabilir.
     * @param {number} [lastId] 
     * @param {string} [filtersQuery] 
     * @param {Array<string>} [filtersTeachingStyles] Girilebilecek değerler:  KIND_AND_PATIENT,  FUN_AND_GREGARIOUS,  SCHOLARLY_AND_KNOWLEDGEABLE
     * @param {Array<string>} [filtersLessonTypes] Girilebilecek değerler:  PRONUNCIATION_LESSONS,  GRAMMAR_LESSONS,  LESSONS_WITH_MOVIES,  LESSONS_FOR_CHILDREN,  BUSINESS_ENGLISH,  UNIVERSITY_ENGLISH_PREPARATION,  EXAM,  TOEFL_PREPARATION,  IELTS_PREPARATION
     * @param {Array<string>} [filtersLanguageLevel] Girilebilecek değerler:  BEGINNER,  INTERMEDIATE,  ADVANCED
     * @param {Array<string>} [filtersAccentTypes] Girilebilecek değerler:  NATIVE_US,  NATIVE_BRITISH,  TURKISH,  OTHER
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public listTeachers(lastId?: number, filtersQuery?: string, filtersTeachingStyles?: Array<string>, filtersLessonTypes?: Array<string>, filtersLanguageLevel?: Array<string>, filtersAccentTypes?: Array<string>, options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).listTeachers(lastId, filtersQuery, filtersTeachingStyles, filtersLessonTypes, filtersLanguageLevel, filtersAccentTypes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public loginOutWithDirectAuthAsTeacher(options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).loginOutWithDirectAuthAsTeacher(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğretmenin eposta ve şifre ile giriş yapabilmesini sağlar.
     * @param {string} [email] 
     * @param {string} [password] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public loginWithDirectAuthAsTeacher(email?: string, password?: string, options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).loginWithDirectAuthAsTeacher(email, password, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğretmenin kazanç durumunu getirir.  Kazanç hesaplaması neye göre ve nasıl olacak?
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public myEarnings(options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).myEarnings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Görüşme sonrasında öğretmeni puanlar.
     * @param {number} [appointmentId] 
     * @param {number} [rate] 
     * @param {string} [comment] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public rateTeacher(appointmentId?: number, rate?: number, comment?: string, options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).rateTeacher(appointmentId, rate, comment, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public ratingDelete(id?: number, options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).ratingDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [teacherId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public ratingList(teacherId?: number, options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).ratingList(teacherId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğretmen olarak kayıt olmayı sağlar
     * @param {File} [profilePhoto] 
     * @param {string} [nameSurname] 
     * @param {string} [eMail] 
     * @param {string} [password] 
     * @param {string} [phoneNumber] 
     * @param {string} [description] 
     * @param {string} [youtubeVideoUrl] 
     * @param {string} [accent] 
     * @param {string} [teachingStyles] 
     * @param {string} [lessonTypes] 
     * @param {string} [languageLevel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public registerAsTeacher(profilePhoto?: File, nameSurname?: string, eMail?: string, password?: string, phoneNumber?: string, description?: string, youtubeVideoUrl?: string, accent?: string, teachingStyles?: string, lessonTypes?: string, languageLevel?: string, options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).registerAsTeacher(profilePhoto, nameSurname, eMail, password, phoneNumber, description, youtubeVideoUrl, accent, teachingStyles, lessonTypes, languageLevel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğretmene gelen anlık aramayı reddetmesini sağlar.
     * @param {number} [callId] 
     * @param {number} [teacherId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public rejectCall(callId?: number, teacherId?: number, options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).rejectCall(callId, teacherId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğrencinin öğretmeni rapor etmesini sağlar.
     * @param {number} [teacherId] 
     * @param {string} [content] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public reportTeacher(teacherId?: number, content?: string, options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).reportTeacher(teacherId, content, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Kullanıcının tüm verisini dışarı aktarma işlemini başlatır. Halihazırda dışa aktarım dosyaları hazırlanıyorsa hata vermelidir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public startToExportMyAllInformationsAsTeacher(options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).startToExportMyAllInformationsAsTeacher(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [teacherId] 
     * @param {number} [studentId] 
     * @param {number} [rate] 
     * @param {string} [comment] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public teacherRatePost(teacherId?: number, studentId?: number, rate?: number, comment?: string, options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).teacherRatePost(teacherId, studentId, rate, comment, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğrencinin öğretmenin engelini kaldırmasını sağlar.
     * @param {number} [teacherId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public unblockTeacher(teacherId?: number, options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).unblockTeacher(teacherId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğrencinin öğretmeni favorilerinden kaldırmasını sağlar.
     * @param {number} [teacherId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public unfavoriteTeacher(teacherId?: number, options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).unfavoriteTeacher(teacherId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğretmenin profil fotoğrafını değiştirmesini sağlar.
     * @param {File} [photo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public updateMyProfilePhotoAsTeacher(photo?: File, options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).updateMyProfilePhotoAsTeacher(photo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğretmen\'in kendi uzmanlıklarını güncelleyebilmesini sağlar.
     * @param {TeacherCommandsUpdateMySpecalitiesParemeters} [teacherCommandsUpdateMySpecalitiesParemeters] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public updateMySpecalities(teacherCommandsUpdateMySpecalitiesParemeters?: TeacherCommandsUpdateMySpecalitiesParemeters, options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).updateMySpecalities(teacherCommandsUpdateMySpecalitiesParemeters, options).then((request) => request(this.axios, this.basePath));
    }
}

