/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FluentValidationResultsValidationFailure } from '../models';
// @ts-ignore
import { SubscriptionAdministrationCommandsAddPackageDurationOptionCommandResult } from '../models';
// @ts-ignore
import { SubscriptionAdministrationQueriesListSubscriptionDropdownOptionsQueryResult } from '../models';
// @ts-ignore
import { SubscriptionAdministrationQueriesListSubscriptionOptionsQueryResult } from '../models';
/**
 * SubscriptionAdministrationApi - axios parameter creator
 * @export
 */
export const SubscriptionAdministrationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Haftada kaç günlük eğitim alınabileceğine dair paket seçeneklerine ekleme yapar.
         * @param {number} [day] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDayOptionToSubscriptionPackages: async (day?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SubscriptionAdministration/AddDayOption`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (day !== undefined) {
                localVarQueryParameter['Day'] = day;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Paket içerisinde günde kaç dakika eğitim alabileceği seçeneğini ekler.
         * @param {number} [minutes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMinutesPerDayOptionToSubscriptionPackages: async (minutes?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SubscriptionAdministration/AddMinutesPerDayOption`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (minutes !== undefined) {
                localVarQueryParameter['Minutes'] = minutes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Paket süresi seçeneği ekler.
         * @param {string} [durationName] 
         * @param {number} [durationAsMonth] 
         * @param {number} [discountRate] 
         * @param {string} [description] 
         * @param {number} [dayOptionId] 
         * @param {number} [minuteOptionId] 
         * @param {number} [pricePerMint] 
         * @param {number} [discountedAmount] 
         * @param {number} [total] 
         * @param {number} [totalDiscounted] 
         * @param {number} [totalMinutes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPackageDurationOptionToSubscriptionPackages: async (durationName?: string, durationAsMonth?: number, discountRate?: number, description?: string, dayOptionId?: number, minuteOptionId?: number, pricePerMint?: number, discountedAmount?: number, total?: number, totalDiscounted?: number, totalMinutes?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SubscriptionAdministration/AddPackageDurationOption`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (durationName !== undefined) {
                localVarQueryParameter['DurationName'] = durationName;
            }

            if (durationAsMonth !== undefined) {
                localVarQueryParameter['DurationAsMonth'] = durationAsMonth;
            }

            if (discountRate !== undefined) {
                localVarQueryParameter['DiscountRate'] = discountRate;
            }

            if (description !== undefined) {
                localVarQueryParameter['Description'] = description;
            }

            if (dayOptionId !== undefined) {
                localVarQueryParameter['DayOptionId'] = dayOptionId;
            }

            if (minuteOptionId !== undefined) {
                localVarQueryParameter['MinuteOptionId'] = minuteOptionId;
            }

            if (pricePerMint !== undefined) {
                localVarQueryParameter['PricePerMint'] = pricePerMint;
            }

            if (discountedAmount !== undefined) {
                localVarQueryParameter['DiscountedAmount'] = discountedAmount;
            }

            if (total !== undefined) {
                localVarQueryParameter['Total'] = total;
            }

            if (totalDiscounted !== undefined) {
                localVarQueryParameter['TotalDiscounted'] = totalDiscounted;
            }

            if (totalMinutes !== undefined) {
                localVarQueryParameter['TotalMinutes'] = totalMinutes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Dakika başına ücreti günceller.
         * @param {number} [price] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePricePerMinuteForSubscriptionPackages: async (price?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SubscriptionAdministration/ChangePricePerMinute`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (price !== undefined) {
                localVarQueryParameter['Price'] = price;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionDropdownOptions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SubscriptionAdministration/ListSubscriptionDropdownOptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Abonelik seçeneklerini getirir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionOptionsForManagement: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SubscriptionAdministration/ListSubscriptionOptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Haftada kaç günlük eğitim alınabileceğine dair paket seçeneklerinden bir öğeyi siler.
         * @param {number} [day] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeDayOptionFromSubscriptionPackages: async (day?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SubscriptionAdministration/RemoveDayOption`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (day !== undefined) {
                localVarQueryParameter['Day'] = day;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Paket içerisinde günde kaç dakika eğitim alabileceği seçeneğini siler.
         * @param {number} [day] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMinutesPerDayOptionFromSubscriptionPackages: async (day?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SubscriptionAdministration/RemoveMinutesPerDayOption`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (day !== undefined) {
                localVarQueryParameter['Day'] = day;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Paket süresi seçeneğini siler.
         * @param {number} [packageDurationId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePackageDurationOptionFromSubscriptionPackages: async (packageDurationId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SubscriptionAdministration/RemovePackageDurationOption`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (packageDurationId !== undefined) {
                localVarQueryParameter['PackageDurationId'] = packageDurationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubscriptionAdministrationApi - functional programming interface
 * @export
 */
export const SubscriptionAdministrationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubscriptionAdministrationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Haftada kaç günlük eğitim alınabileceğine dair paket seçeneklerine ekleme yapar.
         * @param {number} [day] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addDayOptionToSubscriptionPackages(day?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addDayOptionToSubscriptionPackages(day, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Paket içerisinde günde kaç dakika eğitim alabileceği seçeneğini ekler.
         * @param {number} [minutes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMinutesPerDayOptionToSubscriptionPackages(minutes?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMinutesPerDayOptionToSubscriptionPackages(minutes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Paket süresi seçeneği ekler.
         * @param {string} [durationName] 
         * @param {number} [durationAsMonth] 
         * @param {number} [discountRate] 
         * @param {string} [description] 
         * @param {number} [dayOptionId] 
         * @param {number} [minuteOptionId] 
         * @param {number} [pricePerMint] 
         * @param {number} [discountedAmount] 
         * @param {number} [total] 
         * @param {number} [totalDiscounted] 
         * @param {number} [totalMinutes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPackageDurationOptionToSubscriptionPackages(durationName?: string, durationAsMonth?: number, discountRate?: number, description?: string, dayOptionId?: number, minuteOptionId?: number, pricePerMint?: number, discountedAmount?: number, total?: number, totalDiscounted?: number, totalMinutes?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionAdministrationCommandsAddPackageDurationOptionCommandResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPackageDurationOptionToSubscriptionPackages(durationName, durationAsMonth, discountRate, description, dayOptionId, minuteOptionId, pricePerMint, discountedAmount, total, totalDiscounted, totalMinutes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Dakika başına ücreti günceller.
         * @param {number} [price] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePricePerMinuteForSubscriptionPackages(price?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changePricePerMinuteForSubscriptionPackages(price, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSubscriptionDropdownOptions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionAdministrationQueriesListSubscriptionDropdownOptionsQueryResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSubscriptionDropdownOptions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Abonelik seçeneklerini getirir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSubscriptionOptionsForManagement(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionAdministrationQueriesListSubscriptionOptionsQueryResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSubscriptionOptionsForManagement(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Haftada kaç günlük eğitim alınabileceğine dair paket seçeneklerinden bir öğeyi siler.
         * @param {number} [day] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeDayOptionFromSubscriptionPackages(day?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeDayOptionFromSubscriptionPackages(day, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Paket içerisinde günde kaç dakika eğitim alabileceği seçeneğini siler.
         * @param {number} [day] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeMinutesPerDayOptionFromSubscriptionPackages(day?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeMinutesPerDayOptionFromSubscriptionPackages(day, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Paket süresi seçeneğini siler.
         * @param {number} [packageDurationId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removePackageDurationOptionFromSubscriptionPackages(packageDurationId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removePackageDurationOptionFromSubscriptionPackages(packageDurationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SubscriptionAdministrationApi - factory interface
 * @export
 */
export const SubscriptionAdministrationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubscriptionAdministrationApiFp(configuration)
    return {
        /**
         * 
         * @summary Haftada kaç günlük eğitim alınabileceğine dair paket seçeneklerine ekleme yapar.
         * @param {number} [day] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDayOptionToSubscriptionPackages(day?: number, options?: any): AxiosPromise<object> {
            return localVarFp.addDayOptionToSubscriptionPackages(day, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Paket içerisinde günde kaç dakika eğitim alabileceği seçeneğini ekler.
         * @param {number} [minutes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMinutesPerDayOptionToSubscriptionPackages(minutes?: number, options?: any): AxiosPromise<object> {
            return localVarFp.addMinutesPerDayOptionToSubscriptionPackages(minutes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Paket süresi seçeneği ekler.
         * @param {string} [durationName] 
         * @param {number} [durationAsMonth] 
         * @param {number} [discountRate] 
         * @param {string} [description] 
         * @param {number} [dayOptionId] 
         * @param {number} [minuteOptionId] 
         * @param {number} [pricePerMint] 
         * @param {number} [discountedAmount] 
         * @param {number} [total] 
         * @param {number} [totalDiscounted] 
         * @param {number} [totalMinutes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPackageDurationOptionToSubscriptionPackages(durationName?: string, durationAsMonth?: number, discountRate?: number, description?: string, dayOptionId?: number, minuteOptionId?: number, pricePerMint?: number, discountedAmount?: number, total?: number, totalDiscounted?: number, totalMinutes?: number, options?: any): AxiosPromise<SubscriptionAdministrationCommandsAddPackageDurationOptionCommandResult> {
            return localVarFp.addPackageDurationOptionToSubscriptionPackages(durationName, durationAsMonth, discountRate, description, dayOptionId, minuteOptionId, pricePerMint, discountedAmount, total, totalDiscounted, totalMinutes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Dakika başına ücreti günceller.
         * @param {number} [price] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePricePerMinuteForSubscriptionPackages(price?: number, options?: any): AxiosPromise<object> {
            return localVarFp.changePricePerMinuteForSubscriptionPackages(price, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionDropdownOptions(options?: any): AxiosPromise<SubscriptionAdministrationQueriesListSubscriptionDropdownOptionsQueryResult> {
            return localVarFp.listSubscriptionDropdownOptions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Abonelik seçeneklerini getirir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionOptionsForManagement(options?: any): AxiosPromise<SubscriptionAdministrationQueriesListSubscriptionOptionsQueryResult> {
            return localVarFp.listSubscriptionOptionsForManagement(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Haftada kaç günlük eğitim alınabileceğine dair paket seçeneklerinden bir öğeyi siler.
         * @param {number} [day] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeDayOptionFromSubscriptionPackages(day?: number, options?: any): AxiosPromise<object> {
            return localVarFp.removeDayOptionFromSubscriptionPackages(day, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Paket içerisinde günde kaç dakika eğitim alabileceği seçeneğini siler.
         * @param {number} [day] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMinutesPerDayOptionFromSubscriptionPackages(day?: number, options?: any): AxiosPromise<object> {
            return localVarFp.removeMinutesPerDayOptionFromSubscriptionPackages(day, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Paket süresi seçeneğini siler.
         * @param {number} [packageDurationId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePackageDurationOptionFromSubscriptionPackages(packageDurationId?: number, options?: any): AxiosPromise<object> {
            return localVarFp.removePackageDurationOptionFromSubscriptionPackages(packageDurationId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SubscriptionAdministrationApi - interface
 * @export
 * @interface SubscriptionAdministrationApi
 */
export interface SubscriptionAdministrationApiInterface {
    /**
     * 
     * @summary Haftada kaç günlük eğitim alınabileceğine dair paket seçeneklerine ekleme yapar.
     * @param {number} [day] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionAdministrationApiInterface
     */
    addDayOptionToSubscriptionPackages(day?: number, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Paket içerisinde günde kaç dakika eğitim alabileceği seçeneğini ekler.
     * @param {number} [minutes] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionAdministrationApiInterface
     */
    addMinutesPerDayOptionToSubscriptionPackages(minutes?: number, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Paket süresi seçeneği ekler.
     * @param {string} [durationName] 
     * @param {number} [durationAsMonth] 
     * @param {number} [discountRate] 
     * @param {string} [description] 
     * @param {number} [dayOptionId] 
     * @param {number} [minuteOptionId] 
     * @param {number} [pricePerMint] 
     * @param {number} [discountedAmount] 
     * @param {number} [total] 
     * @param {number} [totalDiscounted] 
     * @param {number} [totalMinutes] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionAdministrationApiInterface
     */
    addPackageDurationOptionToSubscriptionPackages(durationName?: string, durationAsMonth?: number, discountRate?: number, description?: string, dayOptionId?: number, minuteOptionId?: number, pricePerMint?: number, discountedAmount?: number, total?: number, totalDiscounted?: number, totalMinutes?: number, options?: AxiosRequestConfig): AxiosPromise<SubscriptionAdministrationCommandsAddPackageDurationOptionCommandResult>;

    /**
     * 
     * @summary Dakika başına ücreti günceller.
     * @param {number} [price] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionAdministrationApiInterface
     */
    changePricePerMinuteForSubscriptionPackages(price?: number, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionAdministrationApiInterface
     */
    listSubscriptionDropdownOptions(options?: AxiosRequestConfig): AxiosPromise<SubscriptionAdministrationQueriesListSubscriptionDropdownOptionsQueryResult>;

    /**
     * 
     * @summary Abonelik seçeneklerini getirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionAdministrationApiInterface
     */
    listSubscriptionOptionsForManagement(options?: AxiosRequestConfig): AxiosPromise<SubscriptionAdministrationQueriesListSubscriptionOptionsQueryResult>;

    /**
     * 
     * @summary Haftada kaç günlük eğitim alınabileceğine dair paket seçeneklerinden bir öğeyi siler.
     * @param {number} [day] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionAdministrationApiInterface
     */
    removeDayOptionFromSubscriptionPackages(day?: number, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Paket içerisinde günde kaç dakika eğitim alabileceği seçeneğini siler.
     * @param {number} [day] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionAdministrationApiInterface
     */
    removeMinutesPerDayOptionFromSubscriptionPackages(day?: number, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Paket süresi seçeneğini siler.
     * @param {number} [packageDurationId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionAdministrationApiInterface
     */
    removePackageDurationOptionFromSubscriptionPackages(packageDurationId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;

}

/**
 * SubscriptionAdministrationApi - object-oriented interface
 * @export
 * @class SubscriptionAdministrationApi
 * @extends {BaseAPI}
 */
export class SubscriptionAdministrationApi extends BaseAPI implements SubscriptionAdministrationApiInterface {
    /**
     * 
     * @summary Haftada kaç günlük eğitim alınabileceğine dair paket seçeneklerine ekleme yapar.
     * @param {number} [day] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionAdministrationApi
     */
    public addDayOptionToSubscriptionPackages(day?: number, options?: AxiosRequestConfig) {
        return SubscriptionAdministrationApiFp(this.configuration).addDayOptionToSubscriptionPackages(day, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Paket içerisinde günde kaç dakika eğitim alabileceği seçeneğini ekler.
     * @param {number} [minutes] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionAdministrationApi
     */
    public addMinutesPerDayOptionToSubscriptionPackages(minutes?: number, options?: AxiosRequestConfig) {
        return SubscriptionAdministrationApiFp(this.configuration).addMinutesPerDayOptionToSubscriptionPackages(minutes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Paket süresi seçeneği ekler.
     * @param {string} [durationName] 
     * @param {number} [durationAsMonth] 
     * @param {number} [discountRate] 
     * @param {string} [description] 
     * @param {number} [dayOptionId] 
     * @param {number} [minuteOptionId] 
     * @param {number} [pricePerMint] 
     * @param {number} [discountedAmount] 
     * @param {number} [total] 
     * @param {number} [totalDiscounted] 
     * @param {number} [totalMinutes] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionAdministrationApi
     */
    public addPackageDurationOptionToSubscriptionPackages(durationName?: string, durationAsMonth?: number, discountRate?: number, description?: string, dayOptionId?: number, minuteOptionId?: number, pricePerMint?: number, discountedAmount?: number, total?: number, totalDiscounted?: number, totalMinutes?: number, options?: AxiosRequestConfig) {
        return SubscriptionAdministrationApiFp(this.configuration).addPackageDurationOptionToSubscriptionPackages(durationName, durationAsMonth, discountRate, description, dayOptionId, minuteOptionId, pricePerMint, discountedAmount, total, totalDiscounted, totalMinutes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Dakika başına ücreti günceller.
     * @param {number} [price] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionAdministrationApi
     */
    public changePricePerMinuteForSubscriptionPackages(price?: number, options?: AxiosRequestConfig) {
        return SubscriptionAdministrationApiFp(this.configuration).changePricePerMinuteForSubscriptionPackages(price, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionAdministrationApi
     */
    public listSubscriptionDropdownOptions(options?: AxiosRequestConfig) {
        return SubscriptionAdministrationApiFp(this.configuration).listSubscriptionDropdownOptions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Abonelik seçeneklerini getirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionAdministrationApi
     */
    public listSubscriptionOptionsForManagement(options?: AxiosRequestConfig) {
        return SubscriptionAdministrationApiFp(this.configuration).listSubscriptionOptionsForManagement(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Haftada kaç günlük eğitim alınabileceğine dair paket seçeneklerinden bir öğeyi siler.
     * @param {number} [day] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionAdministrationApi
     */
    public removeDayOptionFromSubscriptionPackages(day?: number, options?: AxiosRequestConfig) {
        return SubscriptionAdministrationApiFp(this.configuration).removeDayOptionFromSubscriptionPackages(day, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Paket içerisinde günde kaç dakika eğitim alabileceği seçeneğini siler.
     * @param {number} [day] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionAdministrationApi
     */
    public removeMinutesPerDayOptionFromSubscriptionPackages(day?: number, options?: AxiosRequestConfig) {
        return SubscriptionAdministrationApiFp(this.configuration).removeMinutesPerDayOptionFromSubscriptionPackages(day, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Paket süresi seçeneğini siler.
     * @param {number} [packageDurationId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionAdministrationApi
     */
    public removePackageDurationOptionFromSubscriptionPackages(packageDurationId?: number, options?: AxiosRequestConfig) {
        return SubscriptionAdministrationApiFp(this.configuration).removePackageDurationOptionFromSubscriptionPackages(packageDurationId, options).then((request) => request(this.axios, this.basePath));
    }
}

