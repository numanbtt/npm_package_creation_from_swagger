/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FluentValidationResultsValidationFailure } from '../models';
// @ts-ignore
import { LiveCommandsDirectCallCommandResult } from '../models';
// @ts-ignore
import { LiveCommandsJoinToRoomAsStudentCommandResult } from '../models';
// @ts-ignore
import { LiveCommandsJoinToRoomAsTeacherCommandResult } from '../models';
// @ts-ignore
import { LiveCommandsRequestFreeCallCommandResult } from '../models';
// @ts-ignore
import { LiveQueriesGetCallQueryResult } from '../models';
// @ts-ignore
import { LiveQueriesGetRoomInfoQueryResult } from '../models';
/**
 * LiveApi - axios parameter creator
 * @export
 */
export const LiveApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Öğrenci, ücretli görüşme talebinde bulunur. Görüşme başlangıcı ile birlikte oda kayıt altına alınmalıdır.
         * @param {number} [teacherId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        directCall: async (teacherId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Live/DirectCall`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Arama bilgilerini çekmeyi sağlar.
         * @param {number} callId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCall: async (callId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'callId' is not null or undefined
            assertParamExists('getCall', 'callId', callId)
            const localVarPath = `/api/Live/GetCall`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (callId !== undefined) {
                localVarQueryParameter['CallId'] = callId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Canlı yayın odasının bilgilerini çekmeyi sağlar.
         * @param {string} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoomInfo: async (roomId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('getRoomInfo', 'roomId', roomId)
            const localVarPath = `/api/Live/GetRoomInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (roomId !== undefined) {
                localVarQueryParameter['RoomId'] = roomId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğrencinin vakti gelmiş randevusuna katılım gerçekleştirmesini sağlar.
         * @param {number} [appointmentId] 
         * @param {boolean} [isScreenShare] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinToRoomAsStudent: async (appointmentId?: number, isScreenShare?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Live/JoinToRoomAsStudent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (appointmentId !== undefined) {
                localVarQueryParameter['AppointmentId'] = appointmentId;
            }

            if (isScreenShare !== undefined) {
                localVarQueryParameter['IsScreenShare'] = isScreenShare;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğretmenin vakti gelmiş randevusuna katılım gerçekleştirmesini sağlar.
         * @param {number} [appointmentId] 
         * @param {boolean} [isScreenShare] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinToRoomAsTeacher: async (appointmentId?: number, isScreenShare?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Live/JoinToRoomAsTeacher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (appointmentId !== undefined) {
                localVarQueryParameter['AppointmentId'] = appointmentId;
            }

            if (isScreenShare !== undefined) {
                localVarQueryParameter['IsScreenShare'] = isScreenShare;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğrencinin canlı yayından ayrılmasını sağlar.
         * @param {number} [appointmentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaveFromRoomAsStudent: async (appointmentId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Live/LeaveFromRoomAsStudent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (appointmentId !== undefined) {
                localVarQueryParameter['appointmentId'] = appointmentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğretmenin canlı yayından ayrılmasını sağlar.
         * @param {number} [appointmentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaveFromRoomAsTeacher: async (appointmentId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Live/LeaveFromRoomAsTeacher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (appointmentId !== undefined) {
                localVarQueryParameter['appointmentId'] = appointmentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğrenci, ücretsiz görüşme talebinde bulunur. Görüşme başlangıcı ile birlikte oda kayıt altına alınmalıdır.
         * @param {number} [teacherId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestFreeCall: async (teacherId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Live/RequestFreeCall`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LiveApi - functional programming interface
 * @export
 */
export const LiveApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LiveApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Öğrenci, ücretli görüşme talebinde bulunur. Görüşme başlangıcı ile birlikte oda kayıt altına alınmalıdır.
         * @param {number} [teacherId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async directCall(teacherId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiveCommandsDirectCallCommandResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.directCall(teacherId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Arama bilgilerini çekmeyi sağlar.
         * @param {number} callId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCall(callId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiveQueriesGetCallQueryResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCall(callId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Canlı yayın odasının bilgilerini çekmeyi sağlar.
         * @param {string} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoomInfo(roomId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiveQueriesGetRoomInfoQueryResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoomInfo(roomId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğrencinin vakti gelmiş randevusuna katılım gerçekleştirmesini sağlar.
         * @param {number} [appointmentId] 
         * @param {boolean} [isScreenShare] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async joinToRoomAsStudent(appointmentId?: number, isScreenShare?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiveCommandsJoinToRoomAsStudentCommandResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.joinToRoomAsStudent(appointmentId, isScreenShare, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğretmenin vakti gelmiş randevusuna katılım gerçekleştirmesini sağlar.
         * @param {number} [appointmentId] 
         * @param {boolean} [isScreenShare] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async joinToRoomAsTeacher(appointmentId?: number, isScreenShare?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiveCommandsJoinToRoomAsTeacherCommandResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.joinToRoomAsTeacher(appointmentId, isScreenShare, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğrencinin canlı yayından ayrılmasını sağlar.
         * @param {number} [appointmentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leaveFromRoomAsStudent(appointmentId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.leaveFromRoomAsStudent(appointmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğretmenin canlı yayından ayrılmasını sağlar.
         * @param {number} [appointmentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leaveFromRoomAsTeacher(appointmentId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.leaveFromRoomAsTeacher(appointmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğrenci, ücretsiz görüşme talebinde bulunur. Görüşme başlangıcı ile birlikte oda kayıt altına alınmalıdır.
         * @param {number} [teacherId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestFreeCall(teacherId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiveCommandsRequestFreeCallCommandResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestFreeCall(teacherId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LiveApi - factory interface
 * @export
 */
export const LiveApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LiveApiFp(configuration)
    return {
        /**
         * 
         * @summary Öğrenci, ücretli görüşme talebinde bulunur. Görüşme başlangıcı ile birlikte oda kayıt altına alınmalıdır.
         * @param {number} [teacherId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        directCall(teacherId?: number, options?: any): AxiosPromise<LiveCommandsDirectCallCommandResult> {
            return localVarFp.directCall(teacherId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Arama bilgilerini çekmeyi sağlar.
         * @param {number} callId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCall(callId: number, options?: any): AxiosPromise<LiveQueriesGetCallQueryResult> {
            return localVarFp.getCall(callId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Canlı yayın odasının bilgilerini çekmeyi sağlar.
         * @param {string} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoomInfo(roomId: string, options?: any): AxiosPromise<LiveQueriesGetRoomInfoQueryResult> {
            return localVarFp.getRoomInfo(roomId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğrencinin vakti gelmiş randevusuna katılım gerçekleştirmesini sağlar.
         * @param {number} [appointmentId] 
         * @param {boolean} [isScreenShare] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinToRoomAsStudent(appointmentId?: number, isScreenShare?: boolean, options?: any): AxiosPromise<LiveCommandsJoinToRoomAsStudentCommandResult> {
            return localVarFp.joinToRoomAsStudent(appointmentId, isScreenShare, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğretmenin vakti gelmiş randevusuna katılım gerçekleştirmesini sağlar.
         * @param {number} [appointmentId] 
         * @param {boolean} [isScreenShare] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinToRoomAsTeacher(appointmentId?: number, isScreenShare?: boolean, options?: any): AxiosPromise<LiveCommandsJoinToRoomAsTeacherCommandResult> {
            return localVarFp.joinToRoomAsTeacher(appointmentId, isScreenShare, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğrencinin canlı yayından ayrılmasını sağlar.
         * @param {number} [appointmentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaveFromRoomAsStudent(appointmentId?: number, options?: any): AxiosPromise<object> {
            return localVarFp.leaveFromRoomAsStudent(appointmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğretmenin canlı yayından ayrılmasını sağlar.
         * @param {number} [appointmentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaveFromRoomAsTeacher(appointmentId?: number, options?: any): AxiosPromise<object> {
            return localVarFp.leaveFromRoomAsTeacher(appointmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğrenci, ücretsiz görüşme talebinde bulunur. Görüşme başlangıcı ile birlikte oda kayıt altına alınmalıdır.
         * @param {number} [teacherId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestFreeCall(teacherId?: number, options?: any): AxiosPromise<LiveCommandsRequestFreeCallCommandResult> {
            return localVarFp.requestFreeCall(teacherId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LiveApi - interface
 * @export
 * @interface LiveApi
 */
export interface LiveApiInterface {
    /**
     * 
     * @summary Öğrenci, ücretli görüşme talebinde bulunur. Görüşme başlangıcı ile birlikte oda kayıt altına alınmalıdır.
     * @param {number} [teacherId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApiInterface
     */
    directCall(teacherId?: number, options?: AxiosRequestConfig): AxiosPromise<LiveCommandsDirectCallCommandResult>;

    /**
     * 
     * @summary Arama bilgilerini çekmeyi sağlar.
     * @param {number} callId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApiInterface
     */
    getCall(callId: number, options?: AxiosRequestConfig): AxiosPromise<LiveQueriesGetCallQueryResult>;

    /**
     * 
     * @summary Canlı yayın odasının bilgilerini çekmeyi sağlar.
     * @param {string} roomId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApiInterface
     */
    getRoomInfo(roomId: string, options?: AxiosRequestConfig): AxiosPromise<LiveQueriesGetRoomInfoQueryResult>;

    /**
     * 
     * @summary Öğrencinin vakti gelmiş randevusuna katılım gerçekleştirmesini sağlar.
     * @param {number} [appointmentId] 
     * @param {boolean} [isScreenShare] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApiInterface
     */
    joinToRoomAsStudent(appointmentId?: number, isScreenShare?: boolean, options?: AxiosRequestConfig): AxiosPromise<LiveCommandsJoinToRoomAsStudentCommandResult>;

    /**
     * 
     * @summary Öğretmenin vakti gelmiş randevusuna katılım gerçekleştirmesini sağlar.
     * @param {number} [appointmentId] 
     * @param {boolean} [isScreenShare] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApiInterface
     */
    joinToRoomAsTeacher(appointmentId?: number, isScreenShare?: boolean, options?: AxiosRequestConfig): AxiosPromise<LiveCommandsJoinToRoomAsTeacherCommandResult>;

    /**
     * 
     * @summary Öğrencinin canlı yayından ayrılmasını sağlar.
     * @param {number} [appointmentId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApiInterface
     */
    leaveFromRoomAsStudent(appointmentId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Öğretmenin canlı yayından ayrılmasını sağlar.
     * @param {number} [appointmentId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApiInterface
     */
    leaveFromRoomAsTeacher(appointmentId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Öğrenci, ücretsiz görüşme talebinde bulunur. Görüşme başlangıcı ile birlikte oda kayıt altına alınmalıdır.
     * @param {number} [teacherId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApiInterface
     */
    requestFreeCall(teacherId?: number, options?: AxiosRequestConfig): AxiosPromise<LiveCommandsRequestFreeCallCommandResult>;

}

/**
 * LiveApi - object-oriented interface
 * @export
 * @class LiveApi
 * @extends {BaseAPI}
 */
export class LiveApi extends BaseAPI implements LiveApiInterface {
    /**
     * 
     * @summary Öğrenci, ücretli görüşme talebinde bulunur. Görüşme başlangıcı ile birlikte oda kayıt altına alınmalıdır.
     * @param {number} [teacherId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApi
     */
    public directCall(teacherId?: number, options?: AxiosRequestConfig) {
        return LiveApiFp(this.configuration).directCall(teacherId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Arama bilgilerini çekmeyi sağlar.
     * @param {number} callId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApi
     */
    public getCall(callId: number, options?: AxiosRequestConfig) {
        return LiveApiFp(this.configuration).getCall(callId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Canlı yayın odasının bilgilerini çekmeyi sağlar.
     * @param {string} roomId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApi
     */
    public getRoomInfo(roomId: string, options?: AxiosRequestConfig) {
        return LiveApiFp(this.configuration).getRoomInfo(roomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğrencinin vakti gelmiş randevusuna katılım gerçekleştirmesini sağlar.
     * @param {number} [appointmentId] 
     * @param {boolean} [isScreenShare] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApi
     */
    public joinToRoomAsStudent(appointmentId?: number, isScreenShare?: boolean, options?: AxiosRequestConfig) {
        return LiveApiFp(this.configuration).joinToRoomAsStudent(appointmentId, isScreenShare, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğretmenin vakti gelmiş randevusuna katılım gerçekleştirmesini sağlar.
     * @param {number} [appointmentId] 
     * @param {boolean} [isScreenShare] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApi
     */
    public joinToRoomAsTeacher(appointmentId?: number, isScreenShare?: boolean, options?: AxiosRequestConfig) {
        return LiveApiFp(this.configuration).joinToRoomAsTeacher(appointmentId, isScreenShare, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğrencinin canlı yayından ayrılmasını sağlar.
     * @param {number} [appointmentId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApi
     */
    public leaveFromRoomAsStudent(appointmentId?: number, options?: AxiosRequestConfig) {
        return LiveApiFp(this.configuration).leaveFromRoomAsStudent(appointmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğretmenin canlı yayından ayrılmasını sağlar.
     * @param {number} [appointmentId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApi
     */
    public leaveFromRoomAsTeacher(appointmentId?: number, options?: AxiosRequestConfig) {
        return LiveApiFp(this.configuration).leaveFromRoomAsTeacher(appointmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğrenci, ücretsiz görüşme talebinde bulunur. Görüşme başlangıcı ile birlikte oda kayıt altına alınmalıdır.
     * @param {number} [teacherId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApi
     */
    public requestFreeCall(teacherId?: number, options?: AxiosRequestConfig) {
        return LiveApiFp(this.configuration).requestFreeCall(teacherId, options).then((request) => request(this.axios, this.basePath));
    }
}

