/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FluentValidationResultsValidationFailure } from '../models';
// @ts-ignore
import { PaymentCommandsSubscriptionCommandResult } from '../models';
// @ts-ignore
import { PaymentCommandsSubscriptionPackageDetails } from '../models';
// @ts-ignore
import { PaymentQueriesListDropDownSubscriptionOptionsQueryResult } from '../models';
// @ts-ignore
import { PaymentQueriesListSubscriptionOptionsQueryResult } from '../models';
/**
 * PaymentApi - axios parameter creator
 * @export
 */
export const PaymentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Kullanıcının şu anki aboneliğini iptal eder. Bu durumda kullanıcı ödeme dönemi sonuna kadar haklarından faydalanabilir veya aboneliğini tekrar aktif hale getirebilir.
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelCurrentSubscription: async (reason?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Payment/CancelCurrentSubscription`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDropDownSubscriptionOptions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Payment/ListDropDownSubscriptionOptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Abonelik seçeneklerini getirir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionOptions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Payment/ListSubscriptionOptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğrencinin abonelik başlatmasını veya abonelik tipini değiştirmesini sağlar.
         * @param {PaymentCommandsSubscriptionPackageDetails} [paymentCommandsSubscriptionPackageDetails] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscribe: async (paymentCommandsSubscriptionPackageDetails?: PaymentCommandsSubscriptionPackageDetails, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Payment/Subscribe`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paymentCommandsSubscriptionPackageDetails, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentApi - functional programming interface
 * @export
 */
export const PaymentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Kullanıcının şu anki aboneliğini iptal eder. Bu durumda kullanıcı ödeme dönemi sonuna kadar haklarından faydalanabilir veya aboneliğini tekrar aktif hale getirebilir.
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelCurrentSubscription(reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelCurrentSubscription(reason, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDropDownSubscriptionOptions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentQueriesListDropDownSubscriptionOptionsQueryResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDropDownSubscriptionOptions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Abonelik seçeneklerini getirir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSubscriptionOptions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentQueriesListSubscriptionOptionsQueryResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSubscriptionOptions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğrencinin abonelik başlatmasını veya abonelik tipini değiştirmesini sağlar.
         * @param {PaymentCommandsSubscriptionPackageDetails} [paymentCommandsSubscriptionPackageDetails] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscribe(paymentCommandsSubscriptionPackageDetails?: PaymentCommandsSubscriptionPackageDetails, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentCommandsSubscriptionCommandResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscribe(paymentCommandsSubscriptionPackageDetails, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PaymentApi - factory interface
 * @export
 */
export const PaymentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentApiFp(configuration)
    return {
        /**
         * 
         * @summary Kullanıcının şu anki aboneliğini iptal eder. Bu durumda kullanıcı ödeme dönemi sonuna kadar haklarından faydalanabilir veya aboneliğini tekrar aktif hale getirebilir.
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelCurrentSubscription(reason?: string, options?: any): AxiosPromise<object> {
            return localVarFp.cancelCurrentSubscription(reason, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDropDownSubscriptionOptions(options?: any): AxiosPromise<PaymentQueriesListDropDownSubscriptionOptionsQueryResult> {
            return localVarFp.listDropDownSubscriptionOptions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Abonelik seçeneklerini getirir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionOptions(options?: any): AxiosPromise<PaymentQueriesListSubscriptionOptionsQueryResult> {
            return localVarFp.listSubscriptionOptions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğrencinin abonelik başlatmasını veya abonelik tipini değiştirmesini sağlar.
         * @param {PaymentCommandsSubscriptionPackageDetails} [paymentCommandsSubscriptionPackageDetails] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscribe(paymentCommandsSubscriptionPackageDetails?: PaymentCommandsSubscriptionPackageDetails, options?: any): AxiosPromise<PaymentCommandsSubscriptionCommandResult> {
            return localVarFp.subscribe(paymentCommandsSubscriptionPackageDetails, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PaymentApi - interface
 * @export
 * @interface PaymentApi
 */
export interface PaymentApiInterface {
    /**
     * 
     * @summary Kullanıcının şu anki aboneliğini iptal eder. Bu durumda kullanıcı ödeme dönemi sonuna kadar haklarından faydalanabilir veya aboneliğini tekrar aktif hale getirebilir.
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiInterface
     */
    cancelCurrentSubscription(reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiInterface
     */
    listDropDownSubscriptionOptions(options?: AxiosRequestConfig): AxiosPromise<PaymentQueriesListDropDownSubscriptionOptionsQueryResult>;

    /**
     * 
     * @summary Abonelik seçeneklerini getirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiInterface
     */
    listSubscriptionOptions(options?: AxiosRequestConfig): AxiosPromise<PaymentQueriesListSubscriptionOptionsQueryResult>;

    /**
     * 
     * @summary Öğrencinin abonelik başlatmasını veya abonelik tipini değiştirmesini sağlar.
     * @param {PaymentCommandsSubscriptionPackageDetails} [paymentCommandsSubscriptionPackageDetails] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiInterface
     */
    subscribe(paymentCommandsSubscriptionPackageDetails?: PaymentCommandsSubscriptionPackageDetails, options?: AxiosRequestConfig): AxiosPromise<PaymentCommandsSubscriptionCommandResult>;

}

/**
 * PaymentApi - object-oriented interface
 * @export
 * @class PaymentApi
 * @extends {BaseAPI}
 */
export class PaymentApi extends BaseAPI implements PaymentApiInterface {
    /**
     * 
     * @summary Kullanıcının şu anki aboneliğini iptal eder. Bu durumda kullanıcı ödeme dönemi sonuna kadar haklarından faydalanabilir veya aboneliğini tekrar aktif hale getirebilir.
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public cancelCurrentSubscription(reason?: string, options?: AxiosRequestConfig) {
        return PaymentApiFp(this.configuration).cancelCurrentSubscription(reason, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public listDropDownSubscriptionOptions(options?: AxiosRequestConfig) {
        return PaymentApiFp(this.configuration).listDropDownSubscriptionOptions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Abonelik seçeneklerini getirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public listSubscriptionOptions(options?: AxiosRequestConfig) {
        return PaymentApiFp(this.configuration).listSubscriptionOptions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğrencinin abonelik başlatmasını veya abonelik tipini değiştirmesini sağlar.
     * @param {PaymentCommandsSubscriptionPackageDetails} [paymentCommandsSubscriptionPackageDetails] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public subscribe(paymentCommandsSubscriptionPackageDetails?: PaymentCommandsSubscriptionPackageDetails, options?: AxiosRequestConfig) {
        return PaymentApiFp(this.configuration).subscribe(paymentCommandsSubscriptionPackageDetails, options).then((request) => request(this.axios, this.basePath));
    }
}

