/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FluentValidationResultsValidationFailure } from '../models';
// @ts-ignore
import { LegalDocumentAdministrationQueriesGetAllQueryResult } from '../models';
/**
 * LegalDocumentAdministrationApi - axios parameter creator
 * @export
 */
export const LegalDocumentAdministrationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Belirlenen dökümanın içeriğini değiştirir.
         * @param {number} [legalDocumentId] 
         * @param {string} [content] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeContentOfTheLegalDocument: async (legalDocumentId?: number, content?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/LegalDocumentAdministration/ChangeContent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (legalDocumentId !== undefined) {
                localVarQueryParameter['LegalDocumentId'] = legalDocumentId;
            }

            if (content !== undefined) {
                localVarQueryParameter['Content'] = content;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Belirlenen dökümanın kısa adını değiştirir.
         * @param {number} [legalDocumentId] 
         * @param {string} [slug] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeSlugOfTheLegalDocument: async (legalDocumentId?: number, slug?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/LegalDocumentAdministration/ChangeSlug`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (legalDocumentId !== undefined) {
                localVarQueryParameter['LegalDocumentId'] = legalDocumentId;
            }

            if (slug !== undefined) {
                localVarQueryParameter['Slug'] = slug;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Belirlenen dökümanın başlığını değiştirir.
         * @param {number} [legalDocumentId] 
         * @param {string} [title] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTitleOfTheLegalDocument: async (legalDocumentId?: number, title?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/LegalDocumentAdministration/ChangeTitle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (legalDocumentId !== undefined) {
                localVarQueryParameter['LegalDocumentId'] = legalDocumentId;
            }

            if (title !== undefined) {
                localVarQueryParameter['Title'] = title;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sistemde kayıtlı tüm yasal dökümanları getirir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllLegalDocumentsForAdministration: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/LegalDocumentAdministration/GetAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LegalDocumentAdministrationApi - functional programming interface
 * @export
 */
export const LegalDocumentAdministrationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LegalDocumentAdministrationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Belirlenen dökümanın içeriğini değiştirir.
         * @param {number} [legalDocumentId] 
         * @param {string} [content] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeContentOfTheLegalDocument(legalDocumentId?: number, content?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeContentOfTheLegalDocument(legalDocumentId, content, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Belirlenen dökümanın kısa adını değiştirir.
         * @param {number} [legalDocumentId] 
         * @param {string} [slug] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeSlugOfTheLegalDocument(legalDocumentId?: number, slug?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeSlugOfTheLegalDocument(legalDocumentId, slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Belirlenen dökümanın başlığını değiştirir.
         * @param {number} [legalDocumentId] 
         * @param {string} [title] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeTitleOfTheLegalDocument(legalDocumentId?: number, title?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeTitleOfTheLegalDocument(legalDocumentId, title, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sistemde kayıtlı tüm yasal dökümanları getirir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllLegalDocumentsForAdministration(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LegalDocumentAdministrationQueriesGetAllQueryResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllLegalDocumentsForAdministration(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LegalDocumentAdministrationApi - factory interface
 * @export
 */
export const LegalDocumentAdministrationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LegalDocumentAdministrationApiFp(configuration)
    return {
        /**
         * 
         * @summary Belirlenen dökümanın içeriğini değiştirir.
         * @param {number} [legalDocumentId] 
         * @param {string} [content] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeContentOfTheLegalDocument(legalDocumentId?: number, content?: string, options?: any): AxiosPromise<object> {
            return localVarFp.changeContentOfTheLegalDocument(legalDocumentId, content, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Belirlenen dökümanın kısa adını değiştirir.
         * @param {number} [legalDocumentId] 
         * @param {string} [slug] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeSlugOfTheLegalDocument(legalDocumentId?: number, slug?: string, options?: any): AxiosPromise<object> {
            return localVarFp.changeSlugOfTheLegalDocument(legalDocumentId, slug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Belirlenen dökümanın başlığını değiştirir.
         * @param {number} [legalDocumentId] 
         * @param {string} [title] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTitleOfTheLegalDocument(legalDocumentId?: number, title?: string, options?: any): AxiosPromise<object> {
            return localVarFp.changeTitleOfTheLegalDocument(legalDocumentId, title, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sistemde kayıtlı tüm yasal dökümanları getirir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllLegalDocumentsForAdministration(options?: any): AxiosPromise<LegalDocumentAdministrationQueriesGetAllQueryResult> {
            return localVarFp.getAllLegalDocumentsForAdministration(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LegalDocumentAdministrationApi - interface
 * @export
 * @interface LegalDocumentAdministrationApi
 */
export interface LegalDocumentAdministrationApiInterface {
    /**
     * 
     * @summary Belirlenen dökümanın içeriğini değiştirir.
     * @param {number} [legalDocumentId] 
     * @param {string} [content] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalDocumentAdministrationApiInterface
     */
    changeContentOfTheLegalDocument(legalDocumentId?: number, content?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Belirlenen dökümanın kısa adını değiştirir.
     * @param {number} [legalDocumentId] 
     * @param {string} [slug] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalDocumentAdministrationApiInterface
     */
    changeSlugOfTheLegalDocument(legalDocumentId?: number, slug?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Belirlenen dökümanın başlığını değiştirir.
     * @param {number} [legalDocumentId] 
     * @param {string} [title] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalDocumentAdministrationApiInterface
     */
    changeTitleOfTheLegalDocument(legalDocumentId?: number, title?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Sistemde kayıtlı tüm yasal dökümanları getirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalDocumentAdministrationApiInterface
     */
    getAllLegalDocumentsForAdministration(options?: AxiosRequestConfig): AxiosPromise<LegalDocumentAdministrationQueriesGetAllQueryResult>;

}

/**
 * LegalDocumentAdministrationApi - object-oriented interface
 * @export
 * @class LegalDocumentAdministrationApi
 * @extends {BaseAPI}
 */
export class LegalDocumentAdministrationApi extends BaseAPI implements LegalDocumentAdministrationApiInterface {
    /**
     * 
     * @summary Belirlenen dökümanın içeriğini değiştirir.
     * @param {number} [legalDocumentId] 
     * @param {string} [content] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalDocumentAdministrationApi
     */
    public changeContentOfTheLegalDocument(legalDocumentId?: number, content?: string, options?: AxiosRequestConfig) {
        return LegalDocumentAdministrationApiFp(this.configuration).changeContentOfTheLegalDocument(legalDocumentId, content, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Belirlenen dökümanın kısa adını değiştirir.
     * @param {number} [legalDocumentId] 
     * @param {string} [slug] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalDocumentAdministrationApi
     */
    public changeSlugOfTheLegalDocument(legalDocumentId?: number, slug?: string, options?: AxiosRequestConfig) {
        return LegalDocumentAdministrationApiFp(this.configuration).changeSlugOfTheLegalDocument(legalDocumentId, slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Belirlenen dökümanın başlığını değiştirir.
     * @param {number} [legalDocumentId] 
     * @param {string} [title] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalDocumentAdministrationApi
     */
    public changeTitleOfTheLegalDocument(legalDocumentId?: number, title?: string, options?: AxiosRequestConfig) {
        return LegalDocumentAdministrationApiFp(this.configuration).changeTitleOfTheLegalDocument(legalDocumentId, title, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sistemde kayıtlı tüm yasal dökümanları getirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalDocumentAdministrationApi
     */
    public getAllLegalDocumentsForAdministration(options?: AxiosRequestConfig) {
        return LegalDocumentAdministrationApiFp(this.configuration).getAllLegalDocumentsForAdministration(options).then((request) => request(this.axios, this.basePath));
    }
}

