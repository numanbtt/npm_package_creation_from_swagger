/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FluentValidationResultsValidationFailure } from '../models';
// @ts-ignore
import { ReferralCommandsCreateCommand } from '../models';
// @ts-ignore
import { ReferralCommandsCreateCommandResult } from '../models';
// @ts-ignore
import { ReferralCommandsUpdateCommand } from '../models';
// @ts-ignore
import { ReferralCommandsUpdateStatusCommand } from '../models';
// @ts-ignore
import { ReferralQueriesListQueryResult } from '../models';
// @ts-ignore
import { ReferralQueriesListStudentQueryResult } from '../models';
// @ts-ignore
import { ReferralQueriesReferralDetails } from '../models';
// @ts-ignore
import { ReferralQueriesReferralDropdown } from '../models';
// @ts-ignore
import { ReferralQueriesReferralValidationDetails } from '../models';
/**
 * ReferralsApi - axios parameter creator
 * @export
 */
export const ReferralsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ReferralCommandsCreateCommand} [referralCommandsCreateCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReferral: async (referralCommandsCreateCommand?: ReferralCommandsCreateCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Referrals/Create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(referralCommandsCreateCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReferral: async (id?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Referrals/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailsByIdReferral: async (id?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Referrals/GetDetailsById`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDropDownReferral: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Referrals/GetDropdown`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [itemPerPage] 
         * @param {string} [searchKeyword] Film kategorisinde arama yapılacak kelime
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReferral: async (page?: number, itemPerPage?: number, searchKeyword?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Referrals/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (itemPerPage !== undefined) {
                localVarQueryParameter['ItemPerPage'] = itemPerPage;
            }

            if (searchKeyword !== undefined) {
                localVarQueryParameter['SearchKeyword'] = searchKeyword;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [itemPerPage] 
         * @param {string} [searchKeyword] Film kategorisinde arama yapılacak kelime
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReferralStudents: async (page?: number, itemPerPage?: number, searchKeyword?: string, id?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Referrals/ListStudents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (itemPerPage !== undefined) {
                localVarQueryParameter['ItemPerPage'] = itemPerPage;
            }

            if (searchKeyword !== undefined) {
                localVarQueryParameter['SearchKeyword'] = searchKeyword;
            }

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ReferralCommandsUpdateCommand} [referralCommandsUpdateCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReferral: async (referralCommandsUpdateCommand?: ReferralCommandsUpdateCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Referrals/Update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(referralCommandsUpdateCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ReferralCommandsUpdateStatusCommand} [referralCommandsUpdateStatusCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStatusReferral: async (referralCommandsUpdateStatusCommand?: ReferralCommandsUpdateStatusCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Referrals/UpdateStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(referralCommandsUpdateStatusCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [code] 
         * @param {number} [packageId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validationReferral: async (code?: string, packageId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Referrals/ValidationCode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (packageId !== undefined) {
                localVarQueryParameter['packageId'] = packageId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReferralsApi - functional programming interface
 * @export
 */
export const ReferralsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReferralsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ReferralCommandsCreateCommand} [referralCommandsCreateCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createReferral(referralCommandsCreateCommand?: ReferralCommandsCreateCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReferralCommandsCreateCommandResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createReferral(referralCommandsCreateCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteReferral(id?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteReferral(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetailsByIdReferral(id?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReferralQueriesReferralDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetailsByIdReferral(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDropDownReferral(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ReferralQueriesReferralDropdown>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDropDownReferral(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [itemPerPage] 
         * @param {string} [searchKeyword] Film kategorisinde arama yapılacak kelime
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listReferral(page?: number, itemPerPage?: number, searchKeyword?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReferralQueriesListQueryResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listReferral(page, itemPerPage, searchKeyword, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [itemPerPage] 
         * @param {string} [searchKeyword] Film kategorisinde arama yapılacak kelime
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listReferralStudents(page?: number, itemPerPage?: number, searchKeyword?: string, id?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReferralQueriesListStudentQueryResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listReferralStudents(page, itemPerPage, searchKeyword, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ReferralCommandsUpdateCommand} [referralCommandsUpdateCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateReferral(referralCommandsUpdateCommand?: ReferralCommandsUpdateCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReferralCommandsCreateCommandResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateReferral(referralCommandsUpdateCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ReferralCommandsUpdateStatusCommand} [referralCommandsUpdateStatusCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStatusReferral(referralCommandsUpdateStatusCommand?: ReferralCommandsUpdateStatusCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReferralCommandsCreateCommandResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStatusReferral(referralCommandsUpdateStatusCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [code] 
         * @param {number} [packageId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validationReferral(code?: string, packageId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReferralQueriesReferralValidationDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validationReferral(code, packageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReferralsApi - factory interface
 * @export
 */
export const ReferralsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReferralsApiFp(configuration)
    return {
        /**
         * 
         * @param {ReferralCommandsCreateCommand} [referralCommandsCreateCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReferral(referralCommandsCreateCommand?: ReferralCommandsCreateCommand, options?: any): AxiosPromise<ReferralCommandsCreateCommandResult> {
            return localVarFp.createReferral(referralCommandsCreateCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReferral(id?: number, options?: any): AxiosPromise<object> {
            return localVarFp.deleteReferral(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailsByIdReferral(id?: number, options?: any): AxiosPromise<ReferralQueriesReferralDetails> {
            return localVarFp.getDetailsByIdReferral(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDropDownReferral(options?: any): AxiosPromise<Array<ReferralQueriesReferralDropdown>> {
            return localVarFp.getDropDownReferral(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [itemPerPage] 
         * @param {string} [searchKeyword] Film kategorisinde arama yapılacak kelime
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReferral(page?: number, itemPerPage?: number, searchKeyword?: string, options?: any): AxiosPromise<ReferralQueriesListQueryResult> {
            return localVarFp.listReferral(page, itemPerPage, searchKeyword, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [itemPerPage] 
         * @param {string} [searchKeyword] Film kategorisinde arama yapılacak kelime
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReferralStudents(page?: number, itemPerPage?: number, searchKeyword?: string, id?: number, options?: any): AxiosPromise<ReferralQueriesListStudentQueryResult> {
            return localVarFp.listReferralStudents(page, itemPerPage, searchKeyword, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ReferralCommandsUpdateCommand} [referralCommandsUpdateCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReferral(referralCommandsUpdateCommand?: ReferralCommandsUpdateCommand, options?: any): AxiosPromise<ReferralCommandsCreateCommandResult> {
            return localVarFp.updateReferral(referralCommandsUpdateCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ReferralCommandsUpdateStatusCommand} [referralCommandsUpdateStatusCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStatusReferral(referralCommandsUpdateStatusCommand?: ReferralCommandsUpdateStatusCommand, options?: any): AxiosPromise<ReferralCommandsCreateCommandResult> {
            return localVarFp.updateStatusReferral(referralCommandsUpdateStatusCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [code] 
         * @param {number} [packageId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validationReferral(code?: string, packageId?: number, options?: any): AxiosPromise<ReferralQueriesReferralValidationDetails> {
            return localVarFp.validationReferral(code, packageId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReferralsApi - interface
 * @export
 * @interface ReferralsApi
 */
export interface ReferralsApiInterface {
    /**
     * 
     * @param {ReferralCommandsCreateCommand} [referralCommandsCreateCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApiInterface
     */
    createReferral(referralCommandsCreateCommand?: ReferralCommandsCreateCommand, options?: AxiosRequestConfig): AxiosPromise<ReferralCommandsCreateCommandResult>;

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApiInterface
     */
    deleteReferral(id?: number, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApiInterface
     */
    getDetailsByIdReferral(id?: number, options?: AxiosRequestConfig): AxiosPromise<ReferralQueriesReferralDetails>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApiInterface
     */
    getDropDownReferral(options?: AxiosRequestConfig): AxiosPromise<Array<ReferralQueriesReferralDropdown>>;

    /**
     * 
     * @param {number} [page] 
     * @param {number} [itemPerPage] 
     * @param {string} [searchKeyword] Film kategorisinde arama yapılacak kelime
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApiInterface
     */
    listReferral(page?: number, itemPerPage?: number, searchKeyword?: string, options?: AxiosRequestConfig): AxiosPromise<ReferralQueriesListQueryResult>;

    /**
     * 
     * @param {number} [page] 
     * @param {number} [itemPerPage] 
     * @param {string} [searchKeyword] Film kategorisinde arama yapılacak kelime
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApiInterface
     */
    listReferralStudents(page?: number, itemPerPage?: number, searchKeyword?: string, id?: number, options?: AxiosRequestConfig): AxiosPromise<ReferralQueriesListStudentQueryResult>;

    /**
     * 
     * @param {ReferralCommandsUpdateCommand} [referralCommandsUpdateCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApiInterface
     */
    updateReferral(referralCommandsUpdateCommand?: ReferralCommandsUpdateCommand, options?: AxiosRequestConfig): AxiosPromise<ReferralCommandsCreateCommandResult>;

    /**
     * 
     * @param {ReferralCommandsUpdateStatusCommand} [referralCommandsUpdateStatusCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApiInterface
     */
    updateStatusReferral(referralCommandsUpdateStatusCommand?: ReferralCommandsUpdateStatusCommand, options?: AxiosRequestConfig): AxiosPromise<ReferralCommandsCreateCommandResult>;

    /**
     * 
     * @param {string} [code] 
     * @param {number} [packageId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApiInterface
     */
    validationReferral(code?: string, packageId?: number, options?: AxiosRequestConfig): AxiosPromise<ReferralQueriesReferralValidationDetails>;

}

/**
 * ReferralsApi - object-oriented interface
 * @export
 * @class ReferralsApi
 * @extends {BaseAPI}
 */
export class ReferralsApi extends BaseAPI implements ReferralsApiInterface {
    /**
     * 
     * @param {ReferralCommandsCreateCommand} [referralCommandsCreateCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApi
     */
    public createReferral(referralCommandsCreateCommand?: ReferralCommandsCreateCommand, options?: AxiosRequestConfig) {
        return ReferralsApiFp(this.configuration).createReferral(referralCommandsCreateCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApi
     */
    public deleteReferral(id?: number, options?: AxiosRequestConfig) {
        return ReferralsApiFp(this.configuration).deleteReferral(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApi
     */
    public getDetailsByIdReferral(id?: number, options?: AxiosRequestConfig) {
        return ReferralsApiFp(this.configuration).getDetailsByIdReferral(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApi
     */
    public getDropDownReferral(options?: AxiosRequestConfig) {
        return ReferralsApiFp(this.configuration).getDropDownReferral(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] 
     * @param {number} [itemPerPage] 
     * @param {string} [searchKeyword] Film kategorisinde arama yapılacak kelime
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApi
     */
    public listReferral(page?: number, itemPerPage?: number, searchKeyword?: string, options?: AxiosRequestConfig) {
        return ReferralsApiFp(this.configuration).listReferral(page, itemPerPage, searchKeyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] 
     * @param {number} [itemPerPage] 
     * @param {string} [searchKeyword] Film kategorisinde arama yapılacak kelime
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApi
     */
    public listReferralStudents(page?: number, itemPerPage?: number, searchKeyword?: string, id?: number, options?: AxiosRequestConfig) {
        return ReferralsApiFp(this.configuration).listReferralStudents(page, itemPerPage, searchKeyword, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ReferralCommandsUpdateCommand} [referralCommandsUpdateCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApi
     */
    public updateReferral(referralCommandsUpdateCommand?: ReferralCommandsUpdateCommand, options?: AxiosRequestConfig) {
        return ReferralsApiFp(this.configuration).updateReferral(referralCommandsUpdateCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ReferralCommandsUpdateStatusCommand} [referralCommandsUpdateStatusCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApi
     */
    public updateStatusReferral(referralCommandsUpdateStatusCommand?: ReferralCommandsUpdateStatusCommand, options?: AxiosRequestConfig) {
        return ReferralsApiFp(this.configuration).updateStatusReferral(referralCommandsUpdateStatusCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [code] 
     * @param {number} [packageId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApi
     */
    public validationReferral(code?: string, packageId?: number, options?: AxiosRequestConfig) {
        return ReferralsApiFp(this.configuration).validationReferral(code, packageId, options).then((request) => request(this.axios, this.basePath));
    }
}

