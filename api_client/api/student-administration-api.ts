/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FluentValidationResultsValidationFailure } from '../models';
// @ts-ignore
import { StudentAdministrationCommandsChangeProfilePictureCommandResult } from '../models';
// @ts-ignore
import { StudentAdministrationQueriesGetStudentDetailsQueryResult } from '../models';
// @ts-ignore
import { StudentAdministrationQueriesListQueryResult } from '../models';
/**
 * StudentAdministrationApi - axios parameter creator
 * @export
 */
export const StudentAdministrationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Bir öğrencinin profil fotoğrafını onaylar.
         * @param {number} [studentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveStudentProfilePicture: async (studentId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/StudentAdministration/ApproveProfilePicture`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (studentId !== undefined) {
                localVarQueryParameter['StudentId'] = studentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bir öğrenciyi siteden yasaklar. Artık o hesap ve öğrencinin kullandığı ip\'ler siteye giriş yapamaz.
         * @param {number} [studentId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        banStudent: async (studentId?: number, reason?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/StudentAdministration/Ban`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (studentId !== undefined) {
                localVarQueryParameter['StudentId'] = studentId;
            }

            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bir öğrencinin e-posta adresini değiştirir.
         * @param {number} [studentId] 
         * @param {string} [newEmail] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeStudentEmail: async (studentId?: number, newEmail?: string, reason?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/StudentAdministration/ChangeEmail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (studentId !== undefined) {
                localVarQueryParameter['StudentId'] = studentId;
            }

            if (newEmail !== undefined) {
                localVarQueryParameter['NewEmail'] = newEmail;
            }

            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bir öğrencinin ismini değiştirir.
         * @param {number} [studentId] 
         * @param {string} [newName] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeStudentName: async (studentId?: number, newName?: string, reason?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/StudentAdministration/ChangeName`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (studentId !== undefined) {
                localVarQueryParameter['StudentId'] = studentId;
            }

            if (newName !== undefined) {
                localVarQueryParameter['NewName'] = newName;
            }

            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bir öğrencinin şifresini değiştirir.
         * @param {number} [studentId] 
         * @param {string} [reason] 
         * @param {string} [newPassword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeStudentPassword: async (studentId?: number, reason?: string, newPassword?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/StudentAdministration/ChangePassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (studentId !== undefined) {
                localVarQueryParameter['StudentId'] = studentId;
            }

            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }

            if (newPassword !== undefined) {
                localVarQueryParameter['NewPassword'] = newPassword;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bir öğrencinin telefon numarasını değiştirir.
         * @param {number} [studentId] 
         * @param {string} [newPhoneNumber] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeStudentPhoneNumber: async (studentId?: number, newPhoneNumber?: string, reason?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/StudentAdministration/ChangePhoneNumber`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (studentId !== undefined) {
                localVarQueryParameter['StudentId'] = studentId;
            }

            if (newPhoneNumber !== undefined) {
                localVarQueryParameter['NewPhoneNumber'] = newPhoneNumber;
            }

            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bir öğrencinin profil fotoğrafını değiştirir.
         * @param {File} [newProfilePicture] 
         * @param {number} [studentId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeStudentProfilePicture: async (newProfilePicture?: File, studentId?: number, reason?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/StudentAdministration/ChangeProfilePicture`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (studentId !== undefined) {
                localVarQueryParameter['StudentId'] = studentId;
            }

            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }


            if (newProfilePicture !== undefined) { 
                localVarFormParams.append('NewProfilePicture', newProfilePicture as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bir öğrencinin hesabını siteden siler.
         * @param {number} [studentId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudentAccountDueGDPR: async (studentId?: number, reason?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/StudentAdministration/DeleteAccountDueGDPR`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (studentId !== undefined) {
                localVarQueryParameter['StudentId'] = studentId;
            }

            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sistemdeki öğrencileri listeler
         * @param {number} studentId Öğrencinin hesap id\&#39;sidir
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentDetailsForAdministration: async (studentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studentId' is not null or undefined
            assertParamExists('getStudentDetailsForAdministration', 'studentId', studentId)
            const localVarPath = `/api/StudentAdministration/GetStudentDetails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (studentId !== undefined) {
                localVarQueryParameter['StudentId'] = studentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bir öğrencinin detaylarını getirir.
         * @param {string} [searchKeyword] Öğrenci ismiyle arama yapmayı sağlar.
         * @param {string} [approvementState] Öğrencinin onay durumuna göre aramayı sağlar.  Seçenekler:  ONLY_APPROVED_STUDENTS: Sadece onaylı öğrencileri listeye dahil eder.  ONLY_UNAPPROVED_STUDENTS: Sadece onaysız öğrencileri listeye dahil eder.
         * @param {number} [page] Gidilmek istenilen sayfa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudentsForManagement: async (searchKeyword?: string, approvementState?: string, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/StudentAdministration/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (searchKeyword !== undefined) {
                localVarQueryParameter['SearchKeyword'] = searchKeyword;
            }

            if (approvementState !== undefined) {
                localVarQueryParameter['ApprovementState'] = approvementState;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bir öğrenciyi siteden yasaklamasını Kaldırır.
         * @param {number} [studentId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unBanStudent: async (studentId?: number, reason?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/StudentAdministration/UnBan`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (studentId !== undefined) {
                localVarQueryParameter['StudentId'] = studentId;
            }

            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bir öğrencinin profil fotoğrafının onayını kaldırır.
         * @param {number} [studentId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unapproveStudentProfilePicture: async (studentId?: number, reason?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/StudentAdministration/UnapproveProfilePicture`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (studentId !== undefined) {
                localVarQueryParameter['StudentId'] = studentId;
            }

            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StudentAdministrationApi - functional programming interface
 * @export
 */
export const StudentAdministrationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StudentAdministrationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Bir öğrencinin profil fotoğrafını onaylar.
         * @param {number} [studentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approveStudentProfilePicture(studentId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.approveStudentProfilePicture(studentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Bir öğrenciyi siteden yasaklar. Artık o hesap ve öğrencinin kullandığı ip\'ler siteye giriş yapamaz.
         * @param {number} [studentId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async banStudent(studentId?: number, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.banStudent(studentId, reason, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Bir öğrencinin e-posta adresini değiştirir.
         * @param {number} [studentId] 
         * @param {string} [newEmail] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeStudentEmail(studentId?: number, newEmail?: string, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeStudentEmail(studentId, newEmail, reason, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Bir öğrencinin ismini değiştirir.
         * @param {number} [studentId] 
         * @param {string} [newName] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeStudentName(studentId?: number, newName?: string, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeStudentName(studentId, newName, reason, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Bir öğrencinin şifresini değiştirir.
         * @param {number} [studentId] 
         * @param {string} [reason] 
         * @param {string} [newPassword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeStudentPassword(studentId?: number, reason?: string, newPassword?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeStudentPassword(studentId, reason, newPassword, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Bir öğrencinin telefon numarasını değiştirir.
         * @param {number} [studentId] 
         * @param {string} [newPhoneNumber] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeStudentPhoneNumber(studentId?: number, newPhoneNumber?: string, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeStudentPhoneNumber(studentId, newPhoneNumber, reason, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Bir öğrencinin profil fotoğrafını değiştirir.
         * @param {File} [newProfilePicture] 
         * @param {number} [studentId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeStudentProfilePicture(newProfilePicture?: File, studentId?: number, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentAdministrationCommandsChangeProfilePictureCommandResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeStudentProfilePicture(newProfilePicture, studentId, reason, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Bir öğrencinin hesabını siteden siler.
         * @param {number} [studentId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteStudentAccountDueGDPR(studentId?: number, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteStudentAccountDueGDPR(studentId, reason, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sistemdeki öğrencileri listeler
         * @param {number} studentId Öğrencinin hesap id\&#39;sidir
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStudentDetailsForAdministration(studentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentAdministrationQueriesGetStudentDetailsQueryResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStudentDetailsForAdministration(studentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Bir öğrencinin detaylarını getirir.
         * @param {string} [searchKeyword] Öğrenci ismiyle arama yapmayı sağlar.
         * @param {string} [approvementState] Öğrencinin onay durumuna göre aramayı sağlar.  Seçenekler:  ONLY_APPROVED_STUDENTS: Sadece onaylı öğrencileri listeye dahil eder.  ONLY_UNAPPROVED_STUDENTS: Sadece onaysız öğrencileri listeye dahil eder.
         * @param {number} [page] Gidilmek istenilen sayfa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listStudentsForManagement(searchKeyword?: string, approvementState?: string, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentAdministrationQueriesListQueryResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listStudentsForManagement(searchKeyword, approvementState, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Bir öğrenciyi siteden yasaklamasını Kaldırır.
         * @param {number} [studentId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unBanStudent(studentId?: number, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unBanStudent(studentId, reason, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Bir öğrencinin profil fotoğrafının onayını kaldırır.
         * @param {number} [studentId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unapproveStudentProfilePicture(studentId?: number, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unapproveStudentProfilePicture(studentId, reason, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StudentAdministrationApi - factory interface
 * @export
 */
export const StudentAdministrationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StudentAdministrationApiFp(configuration)
    return {
        /**
         * 
         * @summary Bir öğrencinin profil fotoğrafını onaylar.
         * @param {number} [studentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveStudentProfilePicture(studentId?: number, options?: any): AxiosPromise<object> {
            return localVarFp.approveStudentProfilePicture(studentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bir öğrenciyi siteden yasaklar. Artık o hesap ve öğrencinin kullandığı ip\'ler siteye giriş yapamaz.
         * @param {number} [studentId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        banStudent(studentId?: number, reason?: string, options?: any): AxiosPromise<object> {
            return localVarFp.banStudent(studentId, reason, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bir öğrencinin e-posta adresini değiştirir.
         * @param {number} [studentId] 
         * @param {string} [newEmail] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeStudentEmail(studentId?: number, newEmail?: string, reason?: string, options?: any): AxiosPromise<object> {
            return localVarFp.changeStudentEmail(studentId, newEmail, reason, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bir öğrencinin ismini değiştirir.
         * @param {number} [studentId] 
         * @param {string} [newName] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeStudentName(studentId?: number, newName?: string, reason?: string, options?: any): AxiosPromise<object> {
            return localVarFp.changeStudentName(studentId, newName, reason, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bir öğrencinin şifresini değiştirir.
         * @param {number} [studentId] 
         * @param {string} [reason] 
         * @param {string} [newPassword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeStudentPassword(studentId?: number, reason?: string, newPassword?: string, options?: any): AxiosPromise<object> {
            return localVarFp.changeStudentPassword(studentId, reason, newPassword, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bir öğrencinin telefon numarasını değiştirir.
         * @param {number} [studentId] 
         * @param {string} [newPhoneNumber] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeStudentPhoneNumber(studentId?: number, newPhoneNumber?: string, reason?: string, options?: any): AxiosPromise<object> {
            return localVarFp.changeStudentPhoneNumber(studentId, newPhoneNumber, reason, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bir öğrencinin profil fotoğrafını değiştirir.
         * @param {File} [newProfilePicture] 
         * @param {number} [studentId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeStudentProfilePicture(newProfilePicture?: File, studentId?: number, reason?: string, options?: any): AxiosPromise<StudentAdministrationCommandsChangeProfilePictureCommandResult> {
            return localVarFp.changeStudentProfilePicture(newProfilePicture, studentId, reason, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bir öğrencinin hesabını siteden siler.
         * @param {number} [studentId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudentAccountDueGDPR(studentId?: number, reason?: string, options?: any): AxiosPromise<object> {
            return localVarFp.deleteStudentAccountDueGDPR(studentId, reason, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sistemdeki öğrencileri listeler
         * @param {number} studentId Öğrencinin hesap id\&#39;sidir
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentDetailsForAdministration(studentId: number, options?: any): AxiosPromise<StudentAdministrationQueriesGetStudentDetailsQueryResult> {
            return localVarFp.getStudentDetailsForAdministration(studentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bir öğrencinin detaylarını getirir.
         * @param {string} [searchKeyword] Öğrenci ismiyle arama yapmayı sağlar.
         * @param {string} [approvementState] Öğrencinin onay durumuna göre aramayı sağlar.  Seçenekler:  ONLY_APPROVED_STUDENTS: Sadece onaylı öğrencileri listeye dahil eder.  ONLY_UNAPPROVED_STUDENTS: Sadece onaysız öğrencileri listeye dahil eder.
         * @param {number} [page] Gidilmek istenilen sayfa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudentsForManagement(searchKeyword?: string, approvementState?: string, page?: number, options?: any): AxiosPromise<StudentAdministrationQueriesListQueryResult> {
            return localVarFp.listStudentsForManagement(searchKeyword, approvementState, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bir öğrenciyi siteden yasaklamasını Kaldırır.
         * @param {number} [studentId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unBanStudent(studentId?: number, reason?: string, options?: any): AxiosPromise<object> {
            return localVarFp.unBanStudent(studentId, reason, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bir öğrencinin profil fotoğrafının onayını kaldırır.
         * @param {number} [studentId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unapproveStudentProfilePicture(studentId?: number, reason?: string, options?: any): AxiosPromise<object> {
            return localVarFp.unapproveStudentProfilePicture(studentId, reason, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StudentAdministrationApi - interface
 * @export
 * @interface StudentAdministrationApi
 */
export interface StudentAdministrationApiInterface {
    /**
     * 
     * @summary Bir öğrencinin profil fotoğrafını onaylar.
     * @param {number} [studentId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApiInterface
     */
    approveStudentProfilePicture(studentId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Bir öğrenciyi siteden yasaklar. Artık o hesap ve öğrencinin kullandığı ip\'ler siteye giriş yapamaz.
     * @param {number} [studentId] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApiInterface
     */
    banStudent(studentId?: number, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Bir öğrencinin e-posta adresini değiştirir.
     * @param {number} [studentId] 
     * @param {string} [newEmail] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApiInterface
     */
    changeStudentEmail(studentId?: number, newEmail?: string, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Bir öğrencinin ismini değiştirir.
     * @param {number} [studentId] 
     * @param {string} [newName] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApiInterface
     */
    changeStudentName(studentId?: number, newName?: string, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Bir öğrencinin şifresini değiştirir.
     * @param {number} [studentId] 
     * @param {string} [reason] 
     * @param {string} [newPassword] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApiInterface
     */
    changeStudentPassword(studentId?: number, reason?: string, newPassword?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Bir öğrencinin telefon numarasını değiştirir.
     * @param {number} [studentId] 
     * @param {string} [newPhoneNumber] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApiInterface
     */
    changeStudentPhoneNumber(studentId?: number, newPhoneNumber?: string, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Bir öğrencinin profil fotoğrafını değiştirir.
     * @param {File} [newProfilePicture] 
     * @param {number} [studentId] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApiInterface
     */
    changeStudentProfilePicture(newProfilePicture?: File, studentId?: number, reason?: string, options?: AxiosRequestConfig): AxiosPromise<StudentAdministrationCommandsChangeProfilePictureCommandResult>;

    /**
     * 
     * @summary Bir öğrencinin hesabını siteden siler.
     * @param {number} [studentId] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApiInterface
     */
    deleteStudentAccountDueGDPR(studentId?: number, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Sistemdeki öğrencileri listeler
     * @param {number} studentId Öğrencinin hesap id\&#39;sidir
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApiInterface
     */
    getStudentDetailsForAdministration(studentId: number, options?: AxiosRequestConfig): AxiosPromise<StudentAdministrationQueriesGetStudentDetailsQueryResult>;

    /**
     * 
     * @summary Bir öğrencinin detaylarını getirir.
     * @param {string} [searchKeyword] Öğrenci ismiyle arama yapmayı sağlar.
     * @param {string} [approvementState] Öğrencinin onay durumuna göre aramayı sağlar.  Seçenekler:  ONLY_APPROVED_STUDENTS: Sadece onaylı öğrencileri listeye dahil eder.  ONLY_UNAPPROVED_STUDENTS: Sadece onaysız öğrencileri listeye dahil eder.
     * @param {number} [page] Gidilmek istenilen sayfa
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApiInterface
     */
    listStudentsForManagement(searchKeyword?: string, approvementState?: string, page?: number, options?: AxiosRequestConfig): AxiosPromise<StudentAdministrationQueriesListQueryResult>;

    /**
     * 
     * @summary Bir öğrenciyi siteden yasaklamasını Kaldırır.
     * @param {number} [studentId] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApiInterface
     */
    unBanStudent(studentId?: number, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Bir öğrencinin profil fotoğrafının onayını kaldırır.
     * @param {number} [studentId] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApiInterface
     */
    unapproveStudentProfilePicture(studentId?: number, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

}

/**
 * StudentAdministrationApi - object-oriented interface
 * @export
 * @class StudentAdministrationApi
 * @extends {BaseAPI}
 */
export class StudentAdministrationApi extends BaseAPI implements StudentAdministrationApiInterface {
    /**
     * 
     * @summary Bir öğrencinin profil fotoğrafını onaylar.
     * @param {number} [studentId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApi
     */
    public approveStudentProfilePicture(studentId?: number, options?: AxiosRequestConfig) {
        return StudentAdministrationApiFp(this.configuration).approveStudentProfilePicture(studentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bir öğrenciyi siteden yasaklar. Artık o hesap ve öğrencinin kullandığı ip\'ler siteye giriş yapamaz.
     * @param {number} [studentId] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApi
     */
    public banStudent(studentId?: number, reason?: string, options?: AxiosRequestConfig) {
        return StudentAdministrationApiFp(this.configuration).banStudent(studentId, reason, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bir öğrencinin e-posta adresini değiştirir.
     * @param {number} [studentId] 
     * @param {string} [newEmail] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApi
     */
    public changeStudentEmail(studentId?: number, newEmail?: string, reason?: string, options?: AxiosRequestConfig) {
        return StudentAdministrationApiFp(this.configuration).changeStudentEmail(studentId, newEmail, reason, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bir öğrencinin ismini değiştirir.
     * @param {number} [studentId] 
     * @param {string} [newName] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApi
     */
    public changeStudentName(studentId?: number, newName?: string, reason?: string, options?: AxiosRequestConfig) {
        return StudentAdministrationApiFp(this.configuration).changeStudentName(studentId, newName, reason, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bir öğrencinin şifresini değiştirir.
     * @param {number} [studentId] 
     * @param {string} [reason] 
     * @param {string} [newPassword] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApi
     */
    public changeStudentPassword(studentId?: number, reason?: string, newPassword?: string, options?: AxiosRequestConfig) {
        return StudentAdministrationApiFp(this.configuration).changeStudentPassword(studentId, reason, newPassword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bir öğrencinin telefon numarasını değiştirir.
     * @param {number} [studentId] 
     * @param {string} [newPhoneNumber] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApi
     */
    public changeStudentPhoneNumber(studentId?: number, newPhoneNumber?: string, reason?: string, options?: AxiosRequestConfig) {
        return StudentAdministrationApiFp(this.configuration).changeStudentPhoneNumber(studentId, newPhoneNumber, reason, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bir öğrencinin profil fotoğrafını değiştirir.
     * @param {File} [newProfilePicture] 
     * @param {number} [studentId] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApi
     */
    public changeStudentProfilePicture(newProfilePicture?: File, studentId?: number, reason?: string, options?: AxiosRequestConfig) {
        return StudentAdministrationApiFp(this.configuration).changeStudentProfilePicture(newProfilePicture, studentId, reason, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bir öğrencinin hesabını siteden siler.
     * @param {number} [studentId] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApi
     */
    public deleteStudentAccountDueGDPR(studentId?: number, reason?: string, options?: AxiosRequestConfig) {
        return StudentAdministrationApiFp(this.configuration).deleteStudentAccountDueGDPR(studentId, reason, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sistemdeki öğrencileri listeler
     * @param {number} studentId Öğrencinin hesap id\&#39;sidir
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApi
     */
    public getStudentDetailsForAdministration(studentId: number, options?: AxiosRequestConfig) {
        return StudentAdministrationApiFp(this.configuration).getStudentDetailsForAdministration(studentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bir öğrencinin detaylarını getirir.
     * @param {string} [searchKeyword] Öğrenci ismiyle arama yapmayı sağlar.
     * @param {string} [approvementState] Öğrencinin onay durumuna göre aramayı sağlar.  Seçenekler:  ONLY_APPROVED_STUDENTS: Sadece onaylı öğrencileri listeye dahil eder.  ONLY_UNAPPROVED_STUDENTS: Sadece onaysız öğrencileri listeye dahil eder.
     * @param {number} [page] Gidilmek istenilen sayfa
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApi
     */
    public listStudentsForManagement(searchKeyword?: string, approvementState?: string, page?: number, options?: AxiosRequestConfig) {
        return StudentAdministrationApiFp(this.configuration).listStudentsForManagement(searchKeyword, approvementState, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bir öğrenciyi siteden yasaklamasını Kaldırır.
     * @param {number} [studentId] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApi
     */
    public unBanStudent(studentId?: number, reason?: string, options?: AxiosRequestConfig) {
        return StudentAdministrationApiFp(this.configuration).unBanStudent(studentId, reason, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bir öğrencinin profil fotoğrafının onayını kaldırır.
     * @param {number} [studentId] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApi
     */
    public unapproveStudentProfilePicture(studentId?: number, reason?: string, options?: AxiosRequestConfig) {
        return StudentAdministrationApiFp(this.configuration).unapproveStudentProfilePicture(studentId, reason, options).then((request) => request(this.axios, this.basePath));
    }
}

