/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FluentValidationResultsValidationFailure } from '../models';
/**
 * AppInfoAdministrationApi - axios parameter creator
 * @export
 */
export const AppInfoAdministrationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Uygulamanın şu anki android versiyonunu değiştirir
         * @param {string} [currentAndroidVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeAppCurrentAndroidVersion: async (currentAndroidVersion?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/AppInfoAdministration/ChangeAppCurrentAndroidVersion`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (currentAndroidVersion !== undefined) {
                localVarQueryParameter['CurrentAndroidVersion'] = currentAndroidVersion;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Uygulamanın şu anki ios versiyonunu değiştirir
         * @param {string} [currentIOSVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeAppCurrentIOSVersion: async (currentIOSVersion?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/AppInfoAdministration/ChangeAppCurrentIOSVersion`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (currentIOSVersion !== undefined) {
                localVarQueryParameter['CurrentIOSVersion'] = currentIOSVersion;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Uygulamanın bakım durumunu değiştirmeyi sağlar
         * @param {boolean} [maintenanceStatus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeAppMaintenanceStatus: async (maintenanceStatus?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/AppInfoAdministration/ChangeAppMaintenanceStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (maintenanceStatus !== undefined) {
                localVarQueryParameter['MaintenanceStatus'] = maintenanceStatus;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Uygulamanın minimum android versiyonunu değiştirir
         * @param {string} [minimumAndroidVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeAppMinimumAndroidVersion: async (minimumAndroidVersion?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/AppInfoAdministration/ChangeAppMinimumAndroidVersion`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (minimumAndroidVersion !== undefined) {
                localVarQueryParameter['MinimumAndroidVersion'] = minimumAndroidVersion;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Uygulamanın minimum ios versiyonunu değiştirir
         * @param {string} [minimumIOSVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeAppMinimumIOSVersion: async (minimumIOSVersion?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/AppInfoAdministration/ChangeAppMinimumIOSVersion`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (minimumIOSVersion !== undefined) {
                localVarQueryParameter['MinimumIOSVersion'] = minimumIOSVersion;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppInfoAdministrationApi - functional programming interface
 * @export
 */
export const AppInfoAdministrationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppInfoAdministrationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Uygulamanın şu anki android versiyonunu değiştirir
         * @param {string} [currentAndroidVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeAppCurrentAndroidVersion(currentAndroidVersion?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeAppCurrentAndroidVersion(currentAndroidVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Uygulamanın şu anki ios versiyonunu değiştirir
         * @param {string} [currentIOSVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeAppCurrentIOSVersion(currentIOSVersion?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeAppCurrentIOSVersion(currentIOSVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Uygulamanın bakım durumunu değiştirmeyi sağlar
         * @param {boolean} [maintenanceStatus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeAppMaintenanceStatus(maintenanceStatus?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeAppMaintenanceStatus(maintenanceStatus, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Uygulamanın minimum android versiyonunu değiştirir
         * @param {string} [minimumAndroidVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeAppMinimumAndroidVersion(minimumAndroidVersion?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeAppMinimumAndroidVersion(minimumAndroidVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Uygulamanın minimum ios versiyonunu değiştirir
         * @param {string} [minimumIOSVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeAppMinimumIOSVersion(minimumIOSVersion?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeAppMinimumIOSVersion(minimumIOSVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AppInfoAdministrationApi - factory interface
 * @export
 */
export const AppInfoAdministrationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppInfoAdministrationApiFp(configuration)
    return {
        /**
         * 
         * @summary Uygulamanın şu anki android versiyonunu değiştirir
         * @param {string} [currentAndroidVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeAppCurrentAndroidVersion(currentAndroidVersion?: string, options?: any): AxiosPromise<object> {
            return localVarFp.changeAppCurrentAndroidVersion(currentAndroidVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Uygulamanın şu anki ios versiyonunu değiştirir
         * @param {string} [currentIOSVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeAppCurrentIOSVersion(currentIOSVersion?: string, options?: any): AxiosPromise<object> {
            return localVarFp.changeAppCurrentIOSVersion(currentIOSVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Uygulamanın bakım durumunu değiştirmeyi sağlar
         * @param {boolean} [maintenanceStatus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeAppMaintenanceStatus(maintenanceStatus?: boolean, options?: any): AxiosPromise<object> {
            return localVarFp.changeAppMaintenanceStatus(maintenanceStatus, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Uygulamanın minimum android versiyonunu değiştirir
         * @param {string} [minimumAndroidVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeAppMinimumAndroidVersion(minimumAndroidVersion?: string, options?: any): AxiosPromise<object> {
            return localVarFp.changeAppMinimumAndroidVersion(minimumAndroidVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Uygulamanın minimum ios versiyonunu değiştirir
         * @param {string} [minimumIOSVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeAppMinimumIOSVersion(minimumIOSVersion?: string, options?: any): AxiosPromise<object> {
            return localVarFp.changeAppMinimumIOSVersion(minimumIOSVersion, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AppInfoAdministrationApi - interface
 * @export
 * @interface AppInfoAdministrationApi
 */
export interface AppInfoAdministrationApiInterface {
    /**
     * 
     * @summary Uygulamanın şu anki android versiyonunu değiştirir
     * @param {string} [currentAndroidVersion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppInfoAdministrationApiInterface
     */
    changeAppCurrentAndroidVersion(currentAndroidVersion?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Uygulamanın şu anki ios versiyonunu değiştirir
     * @param {string} [currentIOSVersion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppInfoAdministrationApiInterface
     */
    changeAppCurrentIOSVersion(currentIOSVersion?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Uygulamanın bakım durumunu değiştirmeyi sağlar
     * @param {boolean} [maintenanceStatus] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppInfoAdministrationApiInterface
     */
    changeAppMaintenanceStatus(maintenanceStatus?: boolean, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Uygulamanın minimum android versiyonunu değiştirir
     * @param {string} [minimumAndroidVersion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppInfoAdministrationApiInterface
     */
    changeAppMinimumAndroidVersion(minimumAndroidVersion?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Uygulamanın minimum ios versiyonunu değiştirir
     * @param {string} [minimumIOSVersion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppInfoAdministrationApiInterface
     */
    changeAppMinimumIOSVersion(minimumIOSVersion?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

}

/**
 * AppInfoAdministrationApi - object-oriented interface
 * @export
 * @class AppInfoAdministrationApi
 * @extends {BaseAPI}
 */
export class AppInfoAdministrationApi extends BaseAPI implements AppInfoAdministrationApiInterface {
    /**
     * 
     * @summary Uygulamanın şu anki android versiyonunu değiştirir
     * @param {string} [currentAndroidVersion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppInfoAdministrationApi
     */
    public changeAppCurrentAndroidVersion(currentAndroidVersion?: string, options?: AxiosRequestConfig) {
        return AppInfoAdministrationApiFp(this.configuration).changeAppCurrentAndroidVersion(currentAndroidVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Uygulamanın şu anki ios versiyonunu değiştirir
     * @param {string} [currentIOSVersion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppInfoAdministrationApi
     */
    public changeAppCurrentIOSVersion(currentIOSVersion?: string, options?: AxiosRequestConfig) {
        return AppInfoAdministrationApiFp(this.configuration).changeAppCurrentIOSVersion(currentIOSVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Uygulamanın bakım durumunu değiştirmeyi sağlar
     * @param {boolean} [maintenanceStatus] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppInfoAdministrationApi
     */
    public changeAppMaintenanceStatus(maintenanceStatus?: boolean, options?: AxiosRequestConfig) {
        return AppInfoAdministrationApiFp(this.configuration).changeAppMaintenanceStatus(maintenanceStatus, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Uygulamanın minimum android versiyonunu değiştirir
     * @param {string} [minimumAndroidVersion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppInfoAdministrationApi
     */
    public changeAppMinimumAndroidVersion(minimumAndroidVersion?: string, options?: AxiosRequestConfig) {
        return AppInfoAdministrationApiFp(this.configuration).changeAppMinimumAndroidVersion(minimumAndroidVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Uygulamanın minimum ios versiyonunu değiştirir
     * @param {string} [minimumIOSVersion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppInfoAdministrationApi
     */
    public changeAppMinimumIOSVersion(minimumIOSVersion?: string, options?: AxiosRequestConfig) {
        return AppInfoAdministrationApiFp(this.configuration).changeAppMinimumIOSVersion(minimumIOSVersion, options).then((request) => request(this.axios, this.basePath));
    }
}

