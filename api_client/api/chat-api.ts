/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ChatCommandsReportChatAsStudentCommandResult } from '../models';
// @ts-ignore
import { ChatCommandsReportChatAsTeacherCommandResult } from '../models';
// @ts-ignore
import { ChatQueriesGetChatJwtQueryResult } from '../models';
// @ts-ignore
import { ChatQueriesGetUserInformationsQueryResult } from '../models';
// @ts-ignore
import { FluentValidationResultsValidationFailure } from '../models';
/**
 * ChatApi - axios parameter creator
 * @export
 */
export const ChatApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Chat sistemine giriş yapılabilmesi için sadece Fosh Chat\'te kullanılabilen özel bir jwt üretir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChatJwt: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Chat/GetChatJwt`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Chat sistemi sadece kullanıcı idlerini bilmekte. Bu yüzden kullanıcının diğer detaylarını bu komut ile çekeceğiz.
         * @param {Array<string>} userIdList Bilgileri öğrenilmek istenilen kullanıcıların guid id listesi
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInformations: async (userIdList: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userIdList' is not null or undefined
            assertParamExists('getUserInformations', 'userIdList', userIdList)
            const localVarPath = `/api/Chat/GetUserInformations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userIdList) {
                localVarQueryParameter['UserIdList'] = userIdList;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğrenci olarak chat\'i şikayet etmeye yarar.
         * @param {string} [chatSessionId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportChatAsStudent: async (chatSessionId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Chat/ReportChatAsStudent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (chatSessionId !== undefined) {
                localVarQueryParameter['ChatSessionId'] = chatSessionId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğretmen olarak chat\'i şikayet etmeye yarar.
         * @param {string} [chatSessionId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportChatAsTeacher: async (chatSessionId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Chat/ReportChatAsTeacher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (chatSessionId !== undefined) {
                localVarQueryParameter['ChatSessionId'] = chatSessionId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChatApi - functional programming interface
 * @export
 */
export const ChatApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChatApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Chat sistemine giriş yapılabilmesi için sadece Fosh Chat\'te kullanılabilen özel bir jwt üretir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChatJwt(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatQueriesGetChatJwtQueryResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChatJwt(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Chat sistemi sadece kullanıcı idlerini bilmekte. Bu yüzden kullanıcının diğer detaylarını bu komut ile çekeceğiz.
         * @param {Array<string>} userIdList Bilgileri öğrenilmek istenilen kullanıcıların guid id listesi
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserInformations(userIdList: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatQueriesGetUserInformationsQueryResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserInformations(userIdList, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğrenci olarak chat\'i şikayet etmeye yarar.
         * @param {string} [chatSessionId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportChatAsStudent(chatSessionId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatCommandsReportChatAsStudentCommandResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportChatAsStudent(chatSessionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğretmen olarak chat\'i şikayet etmeye yarar.
         * @param {string} [chatSessionId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportChatAsTeacher(chatSessionId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatCommandsReportChatAsTeacherCommandResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportChatAsTeacher(chatSessionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ChatApi - factory interface
 * @export
 */
export const ChatApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChatApiFp(configuration)
    return {
        /**
         * 
         * @summary Chat sistemine giriş yapılabilmesi için sadece Fosh Chat\'te kullanılabilen özel bir jwt üretir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChatJwt(options?: any): AxiosPromise<ChatQueriesGetChatJwtQueryResult> {
            return localVarFp.getChatJwt(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Chat sistemi sadece kullanıcı idlerini bilmekte. Bu yüzden kullanıcının diğer detaylarını bu komut ile çekeceğiz.
         * @param {Array<string>} userIdList Bilgileri öğrenilmek istenilen kullanıcıların guid id listesi
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInformations(userIdList: Array<string>, options?: any): AxiosPromise<ChatQueriesGetUserInformationsQueryResult> {
            return localVarFp.getUserInformations(userIdList, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğrenci olarak chat\'i şikayet etmeye yarar.
         * @param {string} [chatSessionId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportChatAsStudent(chatSessionId?: string, options?: any): AxiosPromise<ChatCommandsReportChatAsStudentCommandResult> {
            return localVarFp.reportChatAsStudent(chatSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğretmen olarak chat\'i şikayet etmeye yarar.
         * @param {string} [chatSessionId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportChatAsTeacher(chatSessionId?: string, options?: any): AxiosPromise<ChatCommandsReportChatAsTeacherCommandResult> {
            return localVarFp.reportChatAsTeacher(chatSessionId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChatApi - interface
 * @export
 * @interface ChatApi
 */
export interface ChatApiInterface {
    /**
     * 
     * @summary Chat sistemine giriş yapılabilmesi için sadece Fosh Chat\'te kullanılabilen özel bir jwt üretir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    getChatJwt(options?: AxiosRequestConfig): AxiosPromise<ChatQueriesGetChatJwtQueryResult>;

    /**
     * 
     * @summary Chat sistemi sadece kullanıcı idlerini bilmekte. Bu yüzden kullanıcının diğer detaylarını bu komut ile çekeceğiz.
     * @param {Array<string>} userIdList Bilgileri öğrenilmek istenilen kullanıcıların guid id listesi
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    getUserInformations(userIdList: Array<string>, options?: AxiosRequestConfig): AxiosPromise<ChatQueriesGetUserInformationsQueryResult>;

    /**
     * 
     * @summary Öğrenci olarak chat\'i şikayet etmeye yarar.
     * @param {string} [chatSessionId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    reportChatAsStudent(chatSessionId?: string, options?: AxiosRequestConfig): AxiosPromise<ChatCommandsReportChatAsStudentCommandResult>;

    /**
     * 
     * @summary Öğretmen olarak chat\'i şikayet etmeye yarar.
     * @param {string} [chatSessionId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    reportChatAsTeacher(chatSessionId?: string, options?: AxiosRequestConfig): AxiosPromise<ChatCommandsReportChatAsTeacherCommandResult>;

}

/**
 * ChatApi - object-oriented interface
 * @export
 * @class ChatApi
 * @extends {BaseAPI}
 */
export class ChatApi extends BaseAPI implements ChatApiInterface {
    /**
     * 
     * @summary Chat sistemine giriş yapılabilmesi için sadece Fosh Chat\'te kullanılabilen özel bir jwt üretir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public getChatJwt(options?: AxiosRequestConfig) {
        return ChatApiFp(this.configuration).getChatJwt(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Chat sistemi sadece kullanıcı idlerini bilmekte. Bu yüzden kullanıcının diğer detaylarını bu komut ile çekeceğiz.
     * @param {Array<string>} userIdList Bilgileri öğrenilmek istenilen kullanıcıların guid id listesi
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public getUserInformations(userIdList: Array<string>, options?: AxiosRequestConfig) {
        return ChatApiFp(this.configuration).getUserInformations(userIdList, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğrenci olarak chat\'i şikayet etmeye yarar.
     * @param {string} [chatSessionId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public reportChatAsStudent(chatSessionId?: string, options?: AxiosRequestConfig) {
        return ChatApiFp(this.configuration).reportChatAsStudent(chatSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğretmen olarak chat\'i şikayet etmeye yarar.
     * @param {string} [chatSessionId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public reportChatAsTeacher(chatSessionId?: string, options?: AxiosRequestConfig) {
        return ChatApiFp(this.configuration).reportChatAsTeacher(chatSessionId, options).then((request) => request(this.axios, this.basePath));
    }
}

