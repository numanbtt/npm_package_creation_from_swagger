/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FluentValidationResultsValidationFailure } from '../models';
/**
 * IyzicoApi - axios parameter creator
 * @export
 */
export const IyzicoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Iyzico subscribe result\'unda geri dönülen endpointtir
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iyzicoRedirectResult: async (token?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Iyzico/IyzicoRedirectResult`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (token !== undefined) { 
                localVarFormParams.append('token', token as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Iyzico subscribe webhook\'unun dürttüğü adrestir
         * @param {number} [iyziEventTime] 
         * @param {string} [iyziEventType] 
         * @param {string} [iyziReferenceCode] 
         * @param {string} [token] 
         * @param {string} [paymentId] 
         * @param {string} [paymentConversationId] 
         * @param {string} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iyzicoWebhookResult: async (iyziEventTime?: number, iyziEventType?: string, iyziReferenceCode?: string, token?: string, paymentId?: string, paymentConversationId?: string, status?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Iyzico/IyzicoWebhookResult`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (iyziEventTime !== undefined) { 
                localVarFormParams.append('IyziEventTime', iyziEventTime as any);
            }
    
            if (iyziEventType !== undefined) { 
                localVarFormParams.append('IyziEventType', iyziEventType as any);
            }
    
            if (iyziReferenceCode !== undefined) { 
                localVarFormParams.append('IyziReferenceCode', iyziReferenceCode as any);
            }
    
            if (token !== undefined) { 
                localVarFormParams.append('Token', token as any);
            }
    
            if (paymentId !== undefined) { 
                localVarFormParams.append('PaymentId', paymentId as any);
            }
    
            if (paymentConversationId !== undefined) { 
                localVarFormParams.append('PaymentConversationId', paymentConversationId as any);
            }
    
            if (status !== undefined) { 
                localVarFormParams.append('Status', status as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IyzicoApi - functional programming interface
 * @export
 */
export const IyzicoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IyzicoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Iyzico subscribe result\'unda geri dönülen endpointtir
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iyzicoRedirectResult(token?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iyzicoRedirectResult(token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Iyzico subscribe webhook\'unun dürttüğü adrestir
         * @param {number} [iyziEventTime] 
         * @param {string} [iyziEventType] 
         * @param {string} [iyziReferenceCode] 
         * @param {string} [token] 
         * @param {string} [paymentId] 
         * @param {string} [paymentConversationId] 
         * @param {string} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iyzicoWebhookResult(iyziEventTime?: number, iyziEventType?: string, iyziReferenceCode?: string, token?: string, paymentId?: string, paymentConversationId?: string, status?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iyzicoWebhookResult(iyziEventTime, iyziEventType, iyziReferenceCode, token, paymentId, paymentConversationId, status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IyzicoApi - factory interface
 * @export
 */
export const IyzicoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IyzicoApiFp(configuration)
    return {
        /**
         * 
         * @summary Iyzico subscribe result\'unda geri dönülen endpointtir
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iyzicoRedirectResult(token?: string, options?: any): AxiosPromise<void> {
            return localVarFp.iyzicoRedirectResult(token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Iyzico subscribe webhook\'unun dürttüğü adrestir
         * @param {number} [iyziEventTime] 
         * @param {string} [iyziEventType] 
         * @param {string} [iyziReferenceCode] 
         * @param {string} [token] 
         * @param {string} [paymentId] 
         * @param {string} [paymentConversationId] 
         * @param {string} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iyzicoWebhookResult(iyziEventTime?: number, iyziEventType?: string, iyziReferenceCode?: string, token?: string, paymentId?: string, paymentConversationId?: string, status?: string, options?: any): AxiosPromise<string> {
            return localVarFp.iyzicoWebhookResult(iyziEventTime, iyziEventType, iyziReferenceCode, token, paymentId, paymentConversationId, status, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IyzicoApi - interface
 * @export
 * @interface IyzicoApi
 */
export interface IyzicoApiInterface {
    /**
     * 
     * @summary Iyzico subscribe result\'unda geri dönülen endpointtir
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IyzicoApiInterface
     */
    iyzicoRedirectResult(token?: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Iyzico subscribe webhook\'unun dürttüğü adrestir
     * @param {number} [iyziEventTime] 
     * @param {string} [iyziEventType] 
     * @param {string} [iyziReferenceCode] 
     * @param {string} [token] 
     * @param {string} [paymentId] 
     * @param {string} [paymentConversationId] 
     * @param {string} [status] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IyzicoApiInterface
     */
    iyzicoWebhookResult(iyziEventTime?: number, iyziEventType?: string, iyziReferenceCode?: string, token?: string, paymentId?: string, paymentConversationId?: string, status?: string, options?: AxiosRequestConfig): AxiosPromise<string>;

}

/**
 * IyzicoApi - object-oriented interface
 * @export
 * @class IyzicoApi
 * @extends {BaseAPI}
 */
export class IyzicoApi extends BaseAPI implements IyzicoApiInterface {
    /**
     * 
     * @summary Iyzico subscribe result\'unda geri dönülen endpointtir
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IyzicoApi
     */
    public iyzicoRedirectResult(token?: string, options?: AxiosRequestConfig) {
        return IyzicoApiFp(this.configuration).iyzicoRedirectResult(token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Iyzico subscribe webhook\'unun dürttüğü adrestir
     * @param {number} [iyziEventTime] 
     * @param {string} [iyziEventType] 
     * @param {string} [iyziReferenceCode] 
     * @param {string} [token] 
     * @param {string} [paymentId] 
     * @param {string} [paymentConversationId] 
     * @param {string} [status] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IyzicoApi
     */
    public iyzicoWebhookResult(iyziEventTime?: number, iyziEventType?: string, iyziReferenceCode?: string, token?: string, paymentId?: string, paymentConversationId?: string, status?: string, options?: AxiosRequestConfig) {
        return IyzicoApiFp(this.configuration).iyzicoWebhookResult(iyziEventTime, iyziEventType, iyziReferenceCode, token, paymentId, paymentConversationId, status, options).then((request) => request(this.axios, this.basePath));
    }
}

