/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AdvancerCommonDropDownModelIntCustom } from '../models';
// @ts-ignore
import { FluentValidationResultsValidationFailure } from '../models';
// @ts-ignore
import { TeacherAdministrationCommandsChangeProfilePictureCommandResult } from '../models';
// @ts-ignore
import { TeacherAdministrationCommandsSpecalities } from '../models';
// @ts-ignore
import { TeacherAdministrationQueriesGetDetailsQueryResult } from '../models';
// @ts-ignore
import { TeacherAdministrationQueriesListQueryResult } from '../models';
// @ts-ignore
import { TeacherAdministrationQueriesListSalariesQueryResult } from '../models';
/**
 * TeacherAdministrationApi - axios parameter creator
 * @export
 */
export const TeacherAdministrationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Bir öğretmenin hesabını onaylar. Onaylanan öğretmen artık sisteme giriş yapabilir.
         * @param {number} [teacherId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveTeacherAccount: async (teacherId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TeacherAdministration/ApproveAccount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bir öğretmenin profil fotoğrafını onaylar.
         * @param {number} [teacherId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveTeacherProfilePicture: async (teacherId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TeacherAdministration/ApproveProfilePicture`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bir öğretmeni siteden yasaklar. Artık o hesap ve öğretmenin kullandığı ip\'ler siteye giriş yapamaz.
         * @param {number} [teacherId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        banTeacher: async (teacherId?: number, reason?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TeacherAdministration/Ban`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }

            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bir öğretmenin açıklamasını değiştirir.
         * @param {number} [teacherId] 
         * @param {string} [newDescription] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherDescription: async (teacherId?: number, newDescription?: string, reason?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TeacherAdministration/ChangeDescription`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }

            if (newDescription !== undefined) {
                localVarQueryParameter['NewDescription'] = newDescription;
            }

            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bir öğretmenin e-posta adresini değiştirir.
         * @param {number} [teacherId] 
         * @param {string} [newEmail] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherEmail: async (teacherId?: number, newEmail?: string, reason?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TeacherAdministration/ChangeEmail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }

            if (newEmail !== undefined) {
                localVarQueryParameter['NewEmail'] = newEmail;
            }

            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bir öğretmenin iban bilgilerini değiştirir.
         * @param {number} [teacherId] 
         * @param {string} [reason] 
         * @param {string} [bankName] 
         * @param {string} [accountHolderName] 
         * @param {string} [iban] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherIbanDetails: async (teacherId?: number, reason?: string, bankName?: string, accountHolderName?: string, iban?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TeacherAdministration/ChangeIbanDetails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }

            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }

            if (bankName !== undefined) {
                localVarQueryParameter['BankName'] = bankName;
            }

            if (accountHolderName !== undefined) {
                localVarQueryParameter['AccountHolderName'] = accountHolderName;
            }

            if (iban !== undefined) {
                localVarQueryParameter['Iban'] = iban;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bir öğretmenin ismini değiştirir.
         * @param {number} [teacherId] 
         * @param {string} [newName] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherName: async (teacherId?: number, newName?: string, reason?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TeacherAdministration/ChangeName`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }

            if (newName !== undefined) {
                localVarQueryParameter['NewName'] = newName;
            }

            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bir öğretmenin şifresini değiştirir.
         * @param {number} [teacherId] 
         * @param {string} [reason] 
         * @param {string} [newPassword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherPassword: async (teacherId?: number, reason?: string, newPassword?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TeacherAdministration/ChangePassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }

            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }

            if (newPassword !== undefined) {
                localVarQueryParameter['NewPassword'] = newPassword;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bir öğretmenin telefon numarasını değiştirir.
         * @param {number} [teacherId] 
         * @param {string} [newPhoneNumber] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherPhoneNumber: async (teacherId?: number, newPhoneNumber?: string, reason?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TeacherAdministration/ChangePhoneNumber`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }

            if (newPhoneNumber !== undefined) {
                localVarQueryParameter['NewPhoneNumber'] = newPhoneNumber;
            }

            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bir öğretmenin profil fotoğrafını değiştirir.
         * @param {File} [newProfilePicture] 
         * @param {number} [teacherId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherProfilePicture: async (newProfilePicture?: File, teacherId?: number, reason?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TeacherAdministration/ChangeProfilePicture`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }

            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }


            if (newProfilePicture !== undefined) { 
                localVarFormParams.append('NewProfilePicture', newProfilePicture as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bir öğretmenin uzmanlıklarını değiştirir.
         * @param {TeacherAdministrationCommandsSpecalities} [teacherAdministrationCommandsSpecalities] 
         * @param {number} [teacherId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherSpecalities: async (teacherAdministrationCommandsSpecalities?: TeacherAdministrationCommandsSpecalities, teacherId?: number, reason?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TeacherAdministration/ChangeSpecalities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }

            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(teacherAdministrationCommandsSpecalities, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bir öğretmenin görünen puanını değiştirir. 0.5 ve katları olması gerekir. Şayet 0 olarak ayarlanırsa gerçek puanı gösterilir.
         * @param {number} [teacherId] 
         * @param {string} [reason] 
         * @param {number} [newRate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherVisibleRate: async (teacherId?: number, reason?: string, newRate?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TeacherAdministration/ChangeVisibleRate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }

            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }

            if (newRate !== undefined) {
                localVarQueryParameter['NewRate'] = newRate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bir öğretmenin youtube video url\'sini değiştirir.
         * @param {number} [teacherId] 
         * @param {string} [reason] 
         * @param {string} [newYoutubeUrl] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherYoutubeUrl: async (teacherId?: number, reason?: string, newYoutubeUrl?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TeacherAdministration/ChangeYoutubeVideoUrl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }

            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }

            if (newYoutubeUrl !== undefined) {
                localVarQueryParameter['NewYoutubeUrl'] = newYoutubeUrl;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bir öğretmenin hesabını siteden siler.
         * @param {number} [teacherId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeacherAccountDueGDPR: async (teacherId?: number, reason?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TeacherAdministration/DeleteAccountDueGDPR`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }

            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğretmenin detayını getirir.
         * @param {number} teacherId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeacherDetailsForAdministration: async (teacherId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teacherId' is not null or undefined
            assertParamExists('getTeacherDetailsForAdministration', 'teacherId', teacherId)
            const localVarPath = `/api/TeacherAdministration/GetTeacherDetails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [searchKeyword] Öğretmen ismiyle arama yapmayı sağlar.
         * @param {number} [page] Gidilmek istenilen sayfa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeacherSalaries: async (searchKeyword?: string, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TeacherAdministration/ListTeacherSalaries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchKeyword !== undefined) {
                localVarQueryParameter['SearchKeyword'] = searchKeyword;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sistemdeki öğretmenleri listeler
         * @param {string} [searchKeyword] Öğretmen ismiyle arama yapmayı sağlar.
         * @param {string} [approvementState] Öğretmenin onay durumuna göre aramayı sağlar.  Seçenekler:  ONLY_APPROVED_TEACHERS: Sadece onaylı öğretmenleri listeye dahil eder.  ONLY_UNAPPROVED_TEACHERS: Sadece onaysız öğretmenleri listeye dahil eder.
         * @param {number} [page] Gidilmek istenilen sayfa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeachersForManagement: async (searchKeyword?: string, approvementState?: string, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TeacherAdministration/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (searchKeyword !== undefined) {
                localVarQueryParameter['SearchKeyword'] = searchKeyword;
            }

            if (approvementState !== undefined) {
                localVarQueryParameter['ApprovementState'] = approvementState;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bir öğretmenin hesabını kabul etmez. Öğretmene sebebiyle birlikte düzenleme bildirimi atılabilir.  Hesap silinebilir.
         * @param {number} [teacherId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectTeacherAccount: async (teacherId?: number, reason?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TeacherAdministration/RejectAccount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }

            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bir öğretmenin profil fotoğrafını kabul etmez.
         * @param {number} [teacherId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectTeacherProfilePicture: async (teacherId?: number, reason?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TeacherAdministration/RejectProfilePicture`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }

            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [teacherSalariesId] 
         * @param {string} [paymentStatus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salariesStatusUpdate: async (teacherSalariesId?: number, paymentStatus?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TeacherAdministration/SalariesStatusUpdate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (teacherSalariesId !== undefined) {
                localVarQueryParameter['TeacherSalariesId'] = teacherSalariesId;
            }

            if (paymentStatus !== undefined) {
                localVarQueryParameter['paymentStatus'] = paymentStatus;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [teacherId] 
         * @param {number} [hourlyRate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherHourlyRate: async (teacherId?: number, hourlyRate?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TeacherAdministration/TeacherHourlyRate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }

            if (hourlyRate !== undefined) {
                localVarQueryParameter['HourlyRate'] = hourlyRate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [teacherId] 
         * @param {number} [mints] 
         * @param {number} [hours] 
         * @param {number} [hourlyRate] 
         * @param {number} [amount] 
         * @param {string} [paymentStatus] 
         * @param {string} [appointmentDetail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherPay: async (teacherId?: number, mints?: number, hours?: number, hourlyRate?: number, amount?: number, paymentStatus?: string, appointmentDetail?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TeacherAdministration/TeacherPay`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }

            if (mints !== undefined) {
                localVarQueryParameter['Mints'] = mints;
            }

            if (hours !== undefined) {
                localVarQueryParameter['Hours'] = hours;
            }

            if (hourlyRate !== undefined) {
                localVarQueryParameter['HourlyRate'] = hourlyRate;
            }

            if (amount !== undefined) {
                localVarQueryParameter['Amount'] = amount;
            }

            if (paymentStatus !== undefined) {
                localVarQueryParameter['PaymentStatus'] = paymentStatus;
            }

            if (appointmentDetail !== undefined) {
                localVarQueryParameter['AppointmentDetail'] = appointmentDetail;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teachersDropdown: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TeacherAdministration/TeachersDropdown`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bir öğretmeni siteden yasaklamasını kaldırır.
         * @param {number} [teacherId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unBanTeacher: async (teacherId?: number, reason?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TeacherAdministration/UnBan`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }

            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [teacherId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zoomCreateAccount: async (teacherId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TeacherAdministration/ZoomCreateAccount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeacherAdministrationApi - functional programming interface
 * @export
 */
export const TeacherAdministrationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeacherAdministrationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Bir öğretmenin hesabını onaylar. Onaylanan öğretmen artık sisteme giriş yapabilir.
         * @param {number} [teacherId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approveTeacherAccount(teacherId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.approveTeacherAccount(teacherId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Bir öğretmenin profil fotoğrafını onaylar.
         * @param {number} [teacherId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approveTeacherProfilePicture(teacherId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.approveTeacherProfilePicture(teacherId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Bir öğretmeni siteden yasaklar. Artık o hesap ve öğretmenin kullandığı ip\'ler siteye giriş yapamaz.
         * @param {number} [teacherId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async banTeacher(teacherId?: number, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.banTeacher(teacherId, reason, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Bir öğretmenin açıklamasını değiştirir.
         * @param {number} [teacherId] 
         * @param {string} [newDescription] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeTeacherDescription(teacherId?: number, newDescription?: string, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeTeacherDescription(teacherId, newDescription, reason, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Bir öğretmenin e-posta adresini değiştirir.
         * @param {number} [teacherId] 
         * @param {string} [newEmail] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeTeacherEmail(teacherId?: number, newEmail?: string, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeTeacherEmail(teacherId, newEmail, reason, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Bir öğretmenin iban bilgilerini değiştirir.
         * @param {number} [teacherId] 
         * @param {string} [reason] 
         * @param {string} [bankName] 
         * @param {string} [accountHolderName] 
         * @param {string} [iban] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeTeacherIbanDetails(teacherId?: number, reason?: string, bankName?: string, accountHolderName?: string, iban?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeTeacherIbanDetails(teacherId, reason, bankName, accountHolderName, iban, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Bir öğretmenin ismini değiştirir.
         * @param {number} [teacherId] 
         * @param {string} [newName] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeTeacherName(teacherId?: number, newName?: string, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeTeacherName(teacherId, newName, reason, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Bir öğretmenin şifresini değiştirir.
         * @param {number} [teacherId] 
         * @param {string} [reason] 
         * @param {string} [newPassword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeTeacherPassword(teacherId?: number, reason?: string, newPassword?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeTeacherPassword(teacherId, reason, newPassword, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Bir öğretmenin telefon numarasını değiştirir.
         * @param {number} [teacherId] 
         * @param {string} [newPhoneNumber] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeTeacherPhoneNumber(teacherId?: number, newPhoneNumber?: string, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeTeacherPhoneNumber(teacherId, newPhoneNumber, reason, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Bir öğretmenin profil fotoğrafını değiştirir.
         * @param {File} [newProfilePicture] 
         * @param {number} [teacherId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeTeacherProfilePicture(newProfilePicture?: File, teacherId?: number, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherAdministrationCommandsChangeProfilePictureCommandResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeTeacherProfilePicture(newProfilePicture, teacherId, reason, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Bir öğretmenin uzmanlıklarını değiştirir.
         * @param {TeacherAdministrationCommandsSpecalities} [teacherAdministrationCommandsSpecalities] 
         * @param {number} [teacherId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeTeacherSpecalities(teacherAdministrationCommandsSpecalities?: TeacherAdministrationCommandsSpecalities, teacherId?: number, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeTeacherSpecalities(teacherAdministrationCommandsSpecalities, teacherId, reason, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Bir öğretmenin görünen puanını değiştirir. 0.5 ve katları olması gerekir. Şayet 0 olarak ayarlanırsa gerçek puanı gösterilir.
         * @param {number} [teacherId] 
         * @param {string} [reason] 
         * @param {number} [newRate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeTeacherVisibleRate(teacherId?: number, reason?: string, newRate?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeTeacherVisibleRate(teacherId, reason, newRate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Bir öğretmenin youtube video url\'sini değiştirir.
         * @param {number} [teacherId] 
         * @param {string} [reason] 
         * @param {string} [newYoutubeUrl] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeTeacherYoutubeUrl(teacherId?: number, reason?: string, newYoutubeUrl?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeTeacherYoutubeUrl(teacherId, reason, newYoutubeUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Bir öğretmenin hesabını siteden siler.
         * @param {number} [teacherId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTeacherAccountDueGDPR(teacherId?: number, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTeacherAccountDueGDPR(teacherId, reason, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğretmenin detayını getirir.
         * @param {number} teacherId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeacherDetailsForAdministration(teacherId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherAdministrationQueriesGetDetailsQueryResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeacherDetailsForAdministration(teacherId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [searchKeyword] Öğretmen ismiyle arama yapmayı sağlar.
         * @param {number} [page] Gidilmek istenilen sayfa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTeacherSalaries(searchKeyword?: string, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherAdministrationQueriesListSalariesQueryResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTeacherSalaries(searchKeyword, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sistemdeki öğretmenleri listeler
         * @param {string} [searchKeyword] Öğretmen ismiyle arama yapmayı sağlar.
         * @param {string} [approvementState] Öğretmenin onay durumuna göre aramayı sağlar.  Seçenekler:  ONLY_APPROVED_TEACHERS: Sadece onaylı öğretmenleri listeye dahil eder.  ONLY_UNAPPROVED_TEACHERS: Sadece onaysız öğretmenleri listeye dahil eder.
         * @param {number} [page] Gidilmek istenilen sayfa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTeachersForManagement(searchKeyword?: string, approvementState?: string, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherAdministrationQueriesListQueryResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTeachersForManagement(searchKeyword, approvementState, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Bir öğretmenin hesabını kabul etmez. Öğretmene sebebiyle birlikte düzenleme bildirimi atılabilir.  Hesap silinebilir.
         * @param {number} [teacherId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rejectTeacherAccount(teacherId?: number, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rejectTeacherAccount(teacherId, reason, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Bir öğretmenin profil fotoğrafını kabul etmez.
         * @param {number} [teacherId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rejectTeacherProfilePicture(teacherId?: number, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rejectTeacherProfilePicture(teacherId, reason, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [teacherSalariesId] 
         * @param {string} [paymentStatus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salariesStatusUpdate(teacherSalariesId?: number, paymentStatus?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salariesStatusUpdate(teacherSalariesId, paymentStatus, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [teacherId] 
         * @param {number} [hourlyRate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teacherHourlyRate(teacherId?: number, hourlyRate?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teacherHourlyRate(teacherId, hourlyRate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [teacherId] 
         * @param {number} [mints] 
         * @param {number} [hours] 
         * @param {number} [hourlyRate] 
         * @param {number} [amount] 
         * @param {string} [paymentStatus] 
         * @param {string} [appointmentDetail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teacherPay(teacherId?: number, mints?: number, hours?: number, hourlyRate?: number, amount?: number, paymentStatus?: string, appointmentDetail?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teacherPay(teacherId, mints, hours, hourlyRate, amount, paymentStatus, appointmentDetail, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teachersDropdown(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AdvancerCommonDropDownModelIntCustom>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teachersDropdown(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Bir öğretmeni siteden yasaklamasını kaldırır.
         * @param {number} [teacherId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unBanTeacher(teacherId?: number, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unBanTeacher(teacherId, reason, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [teacherId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoomCreateAccount(teacherId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.zoomCreateAccount(teacherId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TeacherAdministrationApi - factory interface
 * @export
 */
export const TeacherAdministrationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeacherAdministrationApiFp(configuration)
    return {
        /**
         * 
         * @summary Bir öğretmenin hesabını onaylar. Onaylanan öğretmen artık sisteme giriş yapabilir.
         * @param {number} [teacherId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveTeacherAccount(teacherId?: number, options?: any): AxiosPromise<object> {
            return localVarFp.approveTeacherAccount(teacherId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bir öğretmenin profil fotoğrafını onaylar.
         * @param {number} [teacherId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveTeacherProfilePicture(teacherId?: number, options?: any): AxiosPromise<object> {
            return localVarFp.approveTeacherProfilePicture(teacherId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bir öğretmeni siteden yasaklar. Artık o hesap ve öğretmenin kullandığı ip\'ler siteye giriş yapamaz.
         * @param {number} [teacherId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        banTeacher(teacherId?: number, reason?: string, options?: any): AxiosPromise<object> {
            return localVarFp.banTeacher(teacherId, reason, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bir öğretmenin açıklamasını değiştirir.
         * @param {number} [teacherId] 
         * @param {string} [newDescription] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherDescription(teacherId?: number, newDescription?: string, reason?: string, options?: any): AxiosPromise<object> {
            return localVarFp.changeTeacherDescription(teacherId, newDescription, reason, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bir öğretmenin e-posta adresini değiştirir.
         * @param {number} [teacherId] 
         * @param {string} [newEmail] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherEmail(teacherId?: number, newEmail?: string, reason?: string, options?: any): AxiosPromise<object> {
            return localVarFp.changeTeacherEmail(teacherId, newEmail, reason, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bir öğretmenin iban bilgilerini değiştirir.
         * @param {number} [teacherId] 
         * @param {string} [reason] 
         * @param {string} [bankName] 
         * @param {string} [accountHolderName] 
         * @param {string} [iban] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherIbanDetails(teacherId?: number, reason?: string, bankName?: string, accountHolderName?: string, iban?: string, options?: any): AxiosPromise<object> {
            return localVarFp.changeTeacherIbanDetails(teacherId, reason, bankName, accountHolderName, iban, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bir öğretmenin ismini değiştirir.
         * @param {number} [teacherId] 
         * @param {string} [newName] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherName(teacherId?: number, newName?: string, reason?: string, options?: any): AxiosPromise<object> {
            return localVarFp.changeTeacherName(teacherId, newName, reason, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bir öğretmenin şifresini değiştirir.
         * @param {number} [teacherId] 
         * @param {string} [reason] 
         * @param {string} [newPassword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherPassword(teacherId?: number, reason?: string, newPassword?: string, options?: any): AxiosPromise<object> {
            return localVarFp.changeTeacherPassword(teacherId, reason, newPassword, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bir öğretmenin telefon numarasını değiştirir.
         * @param {number} [teacherId] 
         * @param {string} [newPhoneNumber] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherPhoneNumber(teacherId?: number, newPhoneNumber?: string, reason?: string, options?: any): AxiosPromise<object> {
            return localVarFp.changeTeacherPhoneNumber(teacherId, newPhoneNumber, reason, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bir öğretmenin profil fotoğrafını değiştirir.
         * @param {File} [newProfilePicture] 
         * @param {number} [teacherId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherProfilePicture(newProfilePicture?: File, teacherId?: number, reason?: string, options?: any): AxiosPromise<TeacherAdministrationCommandsChangeProfilePictureCommandResult> {
            return localVarFp.changeTeacherProfilePicture(newProfilePicture, teacherId, reason, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bir öğretmenin uzmanlıklarını değiştirir.
         * @param {TeacherAdministrationCommandsSpecalities} [teacherAdministrationCommandsSpecalities] 
         * @param {number} [teacherId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherSpecalities(teacherAdministrationCommandsSpecalities?: TeacherAdministrationCommandsSpecalities, teacherId?: number, reason?: string, options?: any): AxiosPromise<object> {
            return localVarFp.changeTeacherSpecalities(teacherAdministrationCommandsSpecalities, teacherId, reason, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bir öğretmenin görünen puanını değiştirir. 0.5 ve katları olması gerekir. Şayet 0 olarak ayarlanırsa gerçek puanı gösterilir.
         * @param {number} [teacherId] 
         * @param {string} [reason] 
         * @param {number} [newRate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherVisibleRate(teacherId?: number, reason?: string, newRate?: number, options?: any): AxiosPromise<object> {
            return localVarFp.changeTeacherVisibleRate(teacherId, reason, newRate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bir öğretmenin youtube video url\'sini değiştirir.
         * @param {number} [teacherId] 
         * @param {string} [reason] 
         * @param {string} [newYoutubeUrl] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherYoutubeUrl(teacherId?: number, reason?: string, newYoutubeUrl?: string, options?: any): AxiosPromise<object> {
            return localVarFp.changeTeacherYoutubeUrl(teacherId, reason, newYoutubeUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bir öğretmenin hesabını siteden siler.
         * @param {number} [teacherId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeacherAccountDueGDPR(teacherId?: number, reason?: string, options?: any): AxiosPromise<object> {
            return localVarFp.deleteTeacherAccountDueGDPR(teacherId, reason, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğretmenin detayını getirir.
         * @param {number} teacherId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeacherDetailsForAdministration(teacherId: number, options?: any): AxiosPromise<TeacherAdministrationQueriesGetDetailsQueryResult> {
            return localVarFp.getTeacherDetailsForAdministration(teacherId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [searchKeyword] Öğretmen ismiyle arama yapmayı sağlar.
         * @param {number} [page] Gidilmek istenilen sayfa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeacherSalaries(searchKeyword?: string, page?: number, options?: any): AxiosPromise<TeacherAdministrationQueriesListSalariesQueryResult> {
            return localVarFp.listTeacherSalaries(searchKeyword, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sistemdeki öğretmenleri listeler
         * @param {string} [searchKeyword] Öğretmen ismiyle arama yapmayı sağlar.
         * @param {string} [approvementState] Öğretmenin onay durumuna göre aramayı sağlar.  Seçenekler:  ONLY_APPROVED_TEACHERS: Sadece onaylı öğretmenleri listeye dahil eder.  ONLY_UNAPPROVED_TEACHERS: Sadece onaysız öğretmenleri listeye dahil eder.
         * @param {number} [page] Gidilmek istenilen sayfa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeachersForManagement(searchKeyword?: string, approvementState?: string, page?: number, options?: any): AxiosPromise<TeacherAdministrationQueriesListQueryResult> {
            return localVarFp.listTeachersForManagement(searchKeyword, approvementState, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bir öğretmenin hesabını kabul etmez. Öğretmene sebebiyle birlikte düzenleme bildirimi atılabilir.  Hesap silinebilir.
         * @param {number} [teacherId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectTeacherAccount(teacherId?: number, reason?: string, options?: any): AxiosPromise<object> {
            return localVarFp.rejectTeacherAccount(teacherId, reason, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bir öğretmenin profil fotoğrafını kabul etmez.
         * @param {number} [teacherId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectTeacherProfilePicture(teacherId?: number, reason?: string, options?: any): AxiosPromise<object> {
            return localVarFp.rejectTeacherProfilePicture(teacherId, reason, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [teacherSalariesId] 
         * @param {string} [paymentStatus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salariesStatusUpdate(teacherSalariesId?: number, paymentStatus?: string, options?: any): AxiosPromise<string> {
            return localVarFp.salariesStatusUpdate(teacherSalariesId, paymentStatus, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [teacherId] 
         * @param {number} [hourlyRate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherHourlyRate(teacherId?: number, hourlyRate?: number, options?: any): AxiosPromise<string> {
            return localVarFp.teacherHourlyRate(teacherId, hourlyRate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [teacherId] 
         * @param {number} [mints] 
         * @param {number} [hours] 
         * @param {number} [hourlyRate] 
         * @param {number} [amount] 
         * @param {string} [paymentStatus] 
         * @param {string} [appointmentDetail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherPay(teacherId?: number, mints?: number, hours?: number, hourlyRate?: number, amount?: number, paymentStatus?: string, appointmentDetail?: string, options?: any): AxiosPromise<string> {
            return localVarFp.teacherPay(teacherId, mints, hours, hourlyRate, amount, paymentStatus, appointmentDetail, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teachersDropdown(options?: any): AxiosPromise<Array<AdvancerCommonDropDownModelIntCustom>> {
            return localVarFp.teachersDropdown(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bir öğretmeni siteden yasaklamasını kaldırır.
         * @param {number} [teacherId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unBanTeacher(teacherId?: number, reason?: string, options?: any): AxiosPromise<object> {
            return localVarFp.unBanTeacher(teacherId, reason, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [teacherId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zoomCreateAccount(teacherId?: number, options?: any): AxiosPromise<string> {
            return localVarFp.zoomCreateAccount(teacherId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TeacherAdministrationApi - interface
 * @export
 * @interface TeacherAdministrationApi
 */
export interface TeacherAdministrationApiInterface {
    /**
     * 
     * @summary Bir öğretmenin hesabını onaylar. Onaylanan öğretmen artık sisteme giriş yapabilir.
     * @param {number} [teacherId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    approveTeacherAccount(teacherId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Bir öğretmenin profil fotoğrafını onaylar.
     * @param {number} [teacherId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    approveTeacherProfilePicture(teacherId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Bir öğretmeni siteden yasaklar. Artık o hesap ve öğretmenin kullandığı ip\'ler siteye giriş yapamaz.
     * @param {number} [teacherId] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    banTeacher(teacherId?: number, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Bir öğretmenin açıklamasını değiştirir.
     * @param {number} [teacherId] 
     * @param {string} [newDescription] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    changeTeacherDescription(teacherId?: number, newDescription?: string, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Bir öğretmenin e-posta adresini değiştirir.
     * @param {number} [teacherId] 
     * @param {string} [newEmail] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    changeTeacherEmail(teacherId?: number, newEmail?: string, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Bir öğretmenin iban bilgilerini değiştirir.
     * @param {number} [teacherId] 
     * @param {string} [reason] 
     * @param {string} [bankName] 
     * @param {string} [accountHolderName] 
     * @param {string} [iban] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    changeTeacherIbanDetails(teacherId?: number, reason?: string, bankName?: string, accountHolderName?: string, iban?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Bir öğretmenin ismini değiştirir.
     * @param {number} [teacherId] 
     * @param {string} [newName] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    changeTeacherName(teacherId?: number, newName?: string, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Bir öğretmenin şifresini değiştirir.
     * @param {number} [teacherId] 
     * @param {string} [reason] 
     * @param {string} [newPassword] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    changeTeacherPassword(teacherId?: number, reason?: string, newPassword?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Bir öğretmenin telefon numarasını değiştirir.
     * @param {number} [teacherId] 
     * @param {string} [newPhoneNumber] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    changeTeacherPhoneNumber(teacherId?: number, newPhoneNumber?: string, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Bir öğretmenin profil fotoğrafını değiştirir.
     * @param {File} [newProfilePicture] 
     * @param {number} [teacherId] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    changeTeacherProfilePicture(newProfilePicture?: File, teacherId?: number, reason?: string, options?: AxiosRequestConfig): AxiosPromise<TeacherAdministrationCommandsChangeProfilePictureCommandResult>;

    /**
     * 
     * @summary Bir öğretmenin uzmanlıklarını değiştirir.
     * @param {TeacherAdministrationCommandsSpecalities} [teacherAdministrationCommandsSpecalities] 
     * @param {number} [teacherId] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    changeTeacherSpecalities(teacherAdministrationCommandsSpecalities?: TeacherAdministrationCommandsSpecalities, teacherId?: number, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Bir öğretmenin görünen puanını değiştirir. 0.5 ve katları olması gerekir. Şayet 0 olarak ayarlanırsa gerçek puanı gösterilir.
     * @param {number} [teacherId] 
     * @param {string} [reason] 
     * @param {number} [newRate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    changeTeacherVisibleRate(teacherId?: number, reason?: string, newRate?: number, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Bir öğretmenin youtube video url\'sini değiştirir.
     * @param {number} [teacherId] 
     * @param {string} [reason] 
     * @param {string} [newYoutubeUrl] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    changeTeacherYoutubeUrl(teacherId?: number, reason?: string, newYoutubeUrl?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Bir öğretmenin hesabını siteden siler.
     * @param {number} [teacherId] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    deleteTeacherAccountDueGDPR(teacherId?: number, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Öğretmenin detayını getirir.
     * @param {number} teacherId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    getTeacherDetailsForAdministration(teacherId: number, options?: AxiosRequestConfig): AxiosPromise<TeacherAdministrationQueriesGetDetailsQueryResult>;

    /**
     * 
     * @param {string} [searchKeyword] Öğretmen ismiyle arama yapmayı sağlar.
     * @param {number} [page] Gidilmek istenilen sayfa
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    listTeacherSalaries(searchKeyword?: string, page?: number, options?: AxiosRequestConfig): AxiosPromise<TeacherAdministrationQueriesListSalariesQueryResult>;

    /**
     * 
     * @summary Sistemdeki öğretmenleri listeler
     * @param {string} [searchKeyword] Öğretmen ismiyle arama yapmayı sağlar.
     * @param {string} [approvementState] Öğretmenin onay durumuna göre aramayı sağlar.  Seçenekler:  ONLY_APPROVED_TEACHERS: Sadece onaylı öğretmenleri listeye dahil eder.  ONLY_UNAPPROVED_TEACHERS: Sadece onaysız öğretmenleri listeye dahil eder.
     * @param {number} [page] Gidilmek istenilen sayfa
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    listTeachersForManagement(searchKeyword?: string, approvementState?: string, page?: number, options?: AxiosRequestConfig): AxiosPromise<TeacherAdministrationQueriesListQueryResult>;

    /**
     * 
     * @summary Bir öğretmenin hesabını kabul etmez. Öğretmene sebebiyle birlikte düzenleme bildirimi atılabilir.  Hesap silinebilir.
     * @param {number} [teacherId] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    rejectTeacherAccount(teacherId?: number, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Bir öğretmenin profil fotoğrafını kabul etmez.
     * @param {number} [teacherId] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    rejectTeacherProfilePicture(teacherId?: number, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @param {number} [teacherSalariesId] 
     * @param {string} [paymentStatus] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    salariesStatusUpdate(teacherSalariesId?: number, paymentStatus?: string, options?: AxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {number} [teacherId] 
     * @param {number} [hourlyRate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    teacherHourlyRate(teacherId?: number, hourlyRate?: number, options?: AxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {number} [teacherId] 
     * @param {number} [mints] 
     * @param {number} [hours] 
     * @param {number} [hourlyRate] 
     * @param {number} [amount] 
     * @param {string} [paymentStatus] 
     * @param {string} [appointmentDetail] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    teacherPay(teacherId?: number, mints?: number, hours?: number, hourlyRate?: number, amount?: number, paymentStatus?: string, appointmentDetail?: string, options?: AxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    teachersDropdown(options?: AxiosRequestConfig): AxiosPromise<Array<AdvancerCommonDropDownModelIntCustom>>;

    /**
     * 
     * @summary Bir öğretmeni siteden yasaklamasını kaldırır.
     * @param {number} [teacherId] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    unBanTeacher(teacherId?: number, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @param {number} [teacherId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    zoomCreateAccount(teacherId?: number, options?: AxiosRequestConfig): AxiosPromise<string>;

}

/**
 * TeacherAdministrationApi - object-oriented interface
 * @export
 * @class TeacherAdministrationApi
 * @extends {BaseAPI}
 */
export class TeacherAdministrationApi extends BaseAPI implements TeacherAdministrationApiInterface {
    /**
     * 
     * @summary Bir öğretmenin hesabını onaylar. Onaylanan öğretmen artık sisteme giriş yapabilir.
     * @param {number} [teacherId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    public approveTeacherAccount(teacherId?: number, options?: AxiosRequestConfig) {
        return TeacherAdministrationApiFp(this.configuration).approveTeacherAccount(teacherId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bir öğretmenin profil fotoğrafını onaylar.
     * @param {number} [teacherId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    public approveTeacherProfilePicture(teacherId?: number, options?: AxiosRequestConfig) {
        return TeacherAdministrationApiFp(this.configuration).approveTeacherProfilePicture(teacherId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bir öğretmeni siteden yasaklar. Artık o hesap ve öğretmenin kullandığı ip\'ler siteye giriş yapamaz.
     * @param {number} [teacherId] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    public banTeacher(teacherId?: number, reason?: string, options?: AxiosRequestConfig) {
        return TeacherAdministrationApiFp(this.configuration).banTeacher(teacherId, reason, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bir öğretmenin açıklamasını değiştirir.
     * @param {number} [teacherId] 
     * @param {string} [newDescription] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    public changeTeacherDescription(teacherId?: number, newDescription?: string, reason?: string, options?: AxiosRequestConfig) {
        return TeacherAdministrationApiFp(this.configuration).changeTeacherDescription(teacherId, newDescription, reason, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bir öğretmenin e-posta adresini değiştirir.
     * @param {number} [teacherId] 
     * @param {string} [newEmail] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    public changeTeacherEmail(teacherId?: number, newEmail?: string, reason?: string, options?: AxiosRequestConfig) {
        return TeacherAdministrationApiFp(this.configuration).changeTeacherEmail(teacherId, newEmail, reason, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bir öğretmenin iban bilgilerini değiştirir.
     * @param {number} [teacherId] 
     * @param {string} [reason] 
     * @param {string} [bankName] 
     * @param {string} [accountHolderName] 
     * @param {string} [iban] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    public changeTeacherIbanDetails(teacherId?: number, reason?: string, bankName?: string, accountHolderName?: string, iban?: string, options?: AxiosRequestConfig) {
        return TeacherAdministrationApiFp(this.configuration).changeTeacherIbanDetails(teacherId, reason, bankName, accountHolderName, iban, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bir öğretmenin ismini değiştirir.
     * @param {number} [teacherId] 
     * @param {string} [newName] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    public changeTeacherName(teacherId?: number, newName?: string, reason?: string, options?: AxiosRequestConfig) {
        return TeacherAdministrationApiFp(this.configuration).changeTeacherName(teacherId, newName, reason, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bir öğretmenin şifresini değiştirir.
     * @param {number} [teacherId] 
     * @param {string} [reason] 
     * @param {string} [newPassword] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    public changeTeacherPassword(teacherId?: number, reason?: string, newPassword?: string, options?: AxiosRequestConfig) {
        return TeacherAdministrationApiFp(this.configuration).changeTeacherPassword(teacherId, reason, newPassword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bir öğretmenin telefon numarasını değiştirir.
     * @param {number} [teacherId] 
     * @param {string} [newPhoneNumber] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    public changeTeacherPhoneNumber(teacherId?: number, newPhoneNumber?: string, reason?: string, options?: AxiosRequestConfig) {
        return TeacherAdministrationApiFp(this.configuration).changeTeacherPhoneNumber(teacherId, newPhoneNumber, reason, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bir öğretmenin profil fotoğrafını değiştirir.
     * @param {File} [newProfilePicture] 
     * @param {number} [teacherId] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    public changeTeacherProfilePicture(newProfilePicture?: File, teacherId?: number, reason?: string, options?: AxiosRequestConfig) {
        return TeacherAdministrationApiFp(this.configuration).changeTeacherProfilePicture(newProfilePicture, teacherId, reason, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bir öğretmenin uzmanlıklarını değiştirir.
     * @param {TeacherAdministrationCommandsSpecalities} [teacherAdministrationCommandsSpecalities] 
     * @param {number} [teacherId] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    public changeTeacherSpecalities(teacherAdministrationCommandsSpecalities?: TeacherAdministrationCommandsSpecalities, teacherId?: number, reason?: string, options?: AxiosRequestConfig) {
        return TeacherAdministrationApiFp(this.configuration).changeTeacherSpecalities(teacherAdministrationCommandsSpecalities, teacherId, reason, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bir öğretmenin görünen puanını değiştirir. 0.5 ve katları olması gerekir. Şayet 0 olarak ayarlanırsa gerçek puanı gösterilir.
     * @param {number} [teacherId] 
     * @param {string} [reason] 
     * @param {number} [newRate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    public changeTeacherVisibleRate(teacherId?: number, reason?: string, newRate?: number, options?: AxiosRequestConfig) {
        return TeacherAdministrationApiFp(this.configuration).changeTeacherVisibleRate(teacherId, reason, newRate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bir öğretmenin youtube video url\'sini değiştirir.
     * @param {number} [teacherId] 
     * @param {string} [reason] 
     * @param {string} [newYoutubeUrl] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    public changeTeacherYoutubeUrl(teacherId?: number, reason?: string, newYoutubeUrl?: string, options?: AxiosRequestConfig) {
        return TeacherAdministrationApiFp(this.configuration).changeTeacherYoutubeUrl(teacherId, reason, newYoutubeUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bir öğretmenin hesabını siteden siler.
     * @param {number} [teacherId] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    public deleteTeacherAccountDueGDPR(teacherId?: number, reason?: string, options?: AxiosRequestConfig) {
        return TeacherAdministrationApiFp(this.configuration).deleteTeacherAccountDueGDPR(teacherId, reason, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğretmenin detayını getirir.
     * @param {number} teacherId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    public getTeacherDetailsForAdministration(teacherId: number, options?: AxiosRequestConfig) {
        return TeacherAdministrationApiFp(this.configuration).getTeacherDetailsForAdministration(teacherId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [searchKeyword] Öğretmen ismiyle arama yapmayı sağlar.
     * @param {number} [page] Gidilmek istenilen sayfa
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    public listTeacherSalaries(searchKeyword?: string, page?: number, options?: AxiosRequestConfig) {
        return TeacherAdministrationApiFp(this.configuration).listTeacherSalaries(searchKeyword, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sistemdeki öğretmenleri listeler
     * @param {string} [searchKeyword] Öğretmen ismiyle arama yapmayı sağlar.
     * @param {string} [approvementState] Öğretmenin onay durumuna göre aramayı sağlar.  Seçenekler:  ONLY_APPROVED_TEACHERS: Sadece onaylı öğretmenleri listeye dahil eder.  ONLY_UNAPPROVED_TEACHERS: Sadece onaysız öğretmenleri listeye dahil eder.
     * @param {number} [page] Gidilmek istenilen sayfa
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    public listTeachersForManagement(searchKeyword?: string, approvementState?: string, page?: number, options?: AxiosRequestConfig) {
        return TeacherAdministrationApiFp(this.configuration).listTeachersForManagement(searchKeyword, approvementState, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bir öğretmenin hesabını kabul etmez. Öğretmene sebebiyle birlikte düzenleme bildirimi atılabilir.  Hesap silinebilir.
     * @param {number} [teacherId] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    public rejectTeacherAccount(teacherId?: number, reason?: string, options?: AxiosRequestConfig) {
        return TeacherAdministrationApiFp(this.configuration).rejectTeacherAccount(teacherId, reason, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bir öğretmenin profil fotoğrafını kabul etmez.
     * @param {number} [teacherId] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    public rejectTeacherProfilePicture(teacherId?: number, reason?: string, options?: AxiosRequestConfig) {
        return TeacherAdministrationApiFp(this.configuration).rejectTeacherProfilePicture(teacherId, reason, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [teacherSalariesId] 
     * @param {string} [paymentStatus] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    public salariesStatusUpdate(teacherSalariesId?: number, paymentStatus?: string, options?: AxiosRequestConfig) {
        return TeacherAdministrationApiFp(this.configuration).salariesStatusUpdate(teacherSalariesId, paymentStatus, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [teacherId] 
     * @param {number} [hourlyRate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    public teacherHourlyRate(teacherId?: number, hourlyRate?: number, options?: AxiosRequestConfig) {
        return TeacherAdministrationApiFp(this.configuration).teacherHourlyRate(teacherId, hourlyRate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [teacherId] 
     * @param {number} [mints] 
     * @param {number} [hours] 
     * @param {number} [hourlyRate] 
     * @param {number} [amount] 
     * @param {string} [paymentStatus] 
     * @param {string} [appointmentDetail] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    public teacherPay(teacherId?: number, mints?: number, hours?: number, hourlyRate?: number, amount?: number, paymentStatus?: string, appointmentDetail?: string, options?: AxiosRequestConfig) {
        return TeacherAdministrationApiFp(this.configuration).teacherPay(teacherId, mints, hours, hourlyRate, amount, paymentStatus, appointmentDetail, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    public teachersDropdown(options?: AxiosRequestConfig) {
        return TeacherAdministrationApiFp(this.configuration).teachersDropdown(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bir öğretmeni siteden yasaklamasını kaldırır.
     * @param {number} [teacherId] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    public unBanTeacher(teacherId?: number, reason?: string, options?: AxiosRequestConfig) {
        return TeacherAdministrationApiFp(this.configuration).unBanTeacher(teacherId, reason, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [teacherId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    public zoomCreateAccount(teacherId?: number, options?: AxiosRequestConfig) {
        return TeacherAdministrationApiFp(this.configuration).zoomCreateAccount(teacherId, options).then((request) => request(this.axios, this.basePath));
    }
}

