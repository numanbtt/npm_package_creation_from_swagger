/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AppointmentAdministrationQueriesAppointmentsForPayResult } from '../models';
// @ts-ignore
import { AppointmentAdministrationQueriesListAppointmentsOfTheStudentQueryResult } from '../models';
// @ts-ignore
import { AppointmentAdministrationQueriesListAppointmentsOfTheTeacherQueryResult } from '../models';
// @ts-ignore
import { FluentValidationResultsValidationFailure } from '../models';
/**
 * AppointmentAdministrationApi - axios parameter creator
 * @export
 */
export const AppointmentAdministrationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Bir randevuyu iptal eder.
         * @param {number} [appointmentId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelAppointmentAsAdmin: async (appointmentId?: number, reason?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/AppointmentAdministration/CancelAppointment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (appointmentId !== undefined) {
                localVarQueryParameter['AppointmentId'] = appointmentId;
            }

            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bir öğrencinin tüm(geçmiş, gelecek) randevularını listeler.
         * @param {number} studentId 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAppointmentsOfTheStudent: async (studentId: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studentId' is not null or undefined
            assertParamExists('listAppointmentsOfTheStudent', 'studentId', studentId)
            const localVarPath = `/api/AppointmentAdministration/ListAppointmentsOfTheStudent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (studentId !== undefined) {
                localVarQueryParameter['StudentId'] = studentId;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bir öğretmenin tüm(geçmiş, gelecek) randevularını listeler.
         * @param {number} teacherId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAppointmentsOfTheTeacher: async (teacherId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teacherId' is not null or undefined
            assertParamExists('listAppointmentsOfTheTeacher', 'teacherId', teacherId)
            const localVarPath = `/api/AppointmentAdministration/ListAppointmentsOfTheTeacher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [teacherId] 
         * @param {string} [startdate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAppointmentsTeacherForPay: async (teacherId?: number, startdate?: string, endDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/AppointmentAdministration/ListAppointmentsTeacherForPay`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }

            if (startdate !== undefined) {
                localVarQueryParameter['Startdate'] = (startdate as any instanceof Date) ?
                    (startdate as any).toISOString() :
                    startdate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['EndDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [teacherSalaryId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPaidAppointmentDetail: async (teacherSalaryId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/AppointmentAdministration/ListPaidAppointmentDetail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (teacherSalaryId !== undefined) {
                localVarQueryParameter['TeacherSalaryId'] = teacherSalaryId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppointmentAdministrationApi - functional programming interface
 * @export
 */
export const AppointmentAdministrationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppointmentAdministrationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Bir randevuyu iptal eder.
         * @param {number} [appointmentId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelAppointmentAsAdmin(appointmentId?: number, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelAppointmentAsAdmin(appointmentId, reason, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Bir öğrencinin tüm(geçmiş, gelecek) randevularını listeler.
         * @param {number} studentId 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAppointmentsOfTheStudent(studentId: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppointmentAdministrationQueriesListAppointmentsOfTheStudentQueryResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAppointmentsOfTheStudent(studentId, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Bir öğretmenin tüm(geçmiş, gelecek) randevularını listeler.
         * @param {number} teacherId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAppointmentsOfTheTeacher(teacherId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppointmentAdministrationQueriesListAppointmentsOfTheTeacherQueryResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAppointmentsOfTheTeacher(teacherId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [teacherId] 
         * @param {string} [startdate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAppointmentsTeacherForPay(teacherId?: number, startdate?: string, endDate?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AppointmentAdministrationQueriesAppointmentsForPayResult>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAppointmentsTeacherForPay(teacherId, startdate, endDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [teacherSalaryId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPaidAppointmentDetail(teacherSalaryId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AppointmentAdministrationQueriesAppointmentsForPayResult>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPaidAppointmentDetail(teacherSalaryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AppointmentAdministrationApi - factory interface
 * @export
 */
export const AppointmentAdministrationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppointmentAdministrationApiFp(configuration)
    return {
        /**
         * 
         * @summary Bir randevuyu iptal eder.
         * @param {number} [appointmentId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelAppointmentAsAdmin(appointmentId?: number, reason?: string, options?: any): AxiosPromise<object> {
            return localVarFp.cancelAppointmentAsAdmin(appointmentId, reason, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bir öğrencinin tüm(geçmiş, gelecek) randevularını listeler.
         * @param {number} studentId 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAppointmentsOfTheStudent(studentId: number, page?: number, options?: any): AxiosPromise<AppointmentAdministrationQueriesListAppointmentsOfTheStudentQueryResult> {
            return localVarFp.listAppointmentsOfTheStudent(studentId, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bir öğretmenin tüm(geçmiş, gelecek) randevularını listeler.
         * @param {number} teacherId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAppointmentsOfTheTeacher(teacherId: number, options?: any): AxiosPromise<AppointmentAdministrationQueriesListAppointmentsOfTheTeacherQueryResult> {
            return localVarFp.listAppointmentsOfTheTeacher(teacherId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [teacherId] 
         * @param {string} [startdate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAppointmentsTeacherForPay(teacherId?: number, startdate?: string, endDate?: string, options?: any): AxiosPromise<Array<AppointmentAdministrationQueriesAppointmentsForPayResult>> {
            return localVarFp.listAppointmentsTeacherForPay(teacherId, startdate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [teacherSalaryId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPaidAppointmentDetail(teacherSalaryId?: number, options?: any): AxiosPromise<Array<AppointmentAdministrationQueriesAppointmentsForPayResult>> {
            return localVarFp.listPaidAppointmentDetail(teacherSalaryId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AppointmentAdministrationApi - interface
 * @export
 * @interface AppointmentAdministrationApi
 */
export interface AppointmentAdministrationApiInterface {
    /**
     * 
     * @summary Bir randevuyu iptal eder.
     * @param {number} [appointmentId] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentAdministrationApiInterface
     */
    cancelAppointmentAsAdmin(appointmentId?: number, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Bir öğrencinin tüm(geçmiş, gelecek) randevularını listeler.
     * @param {number} studentId 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentAdministrationApiInterface
     */
    listAppointmentsOfTheStudent(studentId: number, page?: number, options?: AxiosRequestConfig): AxiosPromise<AppointmentAdministrationQueriesListAppointmentsOfTheStudentQueryResult>;

    /**
     * 
     * @summary Bir öğretmenin tüm(geçmiş, gelecek) randevularını listeler.
     * @param {number} teacherId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentAdministrationApiInterface
     */
    listAppointmentsOfTheTeacher(teacherId: number, options?: AxiosRequestConfig): AxiosPromise<AppointmentAdministrationQueriesListAppointmentsOfTheTeacherQueryResult>;

    /**
     * 
     * @param {number} [teacherId] 
     * @param {string} [startdate] 
     * @param {string} [endDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentAdministrationApiInterface
     */
    listAppointmentsTeacherForPay(teacherId?: number, startdate?: string, endDate?: string, options?: AxiosRequestConfig): AxiosPromise<Array<AppointmentAdministrationQueriesAppointmentsForPayResult>>;

    /**
     * 
     * @param {number} [teacherSalaryId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentAdministrationApiInterface
     */
    listPaidAppointmentDetail(teacherSalaryId?: number, options?: AxiosRequestConfig): AxiosPromise<Array<AppointmentAdministrationQueriesAppointmentsForPayResult>>;

}

/**
 * AppointmentAdministrationApi - object-oriented interface
 * @export
 * @class AppointmentAdministrationApi
 * @extends {BaseAPI}
 */
export class AppointmentAdministrationApi extends BaseAPI implements AppointmentAdministrationApiInterface {
    /**
     * 
     * @summary Bir randevuyu iptal eder.
     * @param {number} [appointmentId] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentAdministrationApi
     */
    public cancelAppointmentAsAdmin(appointmentId?: number, reason?: string, options?: AxiosRequestConfig) {
        return AppointmentAdministrationApiFp(this.configuration).cancelAppointmentAsAdmin(appointmentId, reason, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bir öğrencinin tüm(geçmiş, gelecek) randevularını listeler.
     * @param {number} studentId 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentAdministrationApi
     */
    public listAppointmentsOfTheStudent(studentId: number, page?: number, options?: AxiosRequestConfig) {
        return AppointmentAdministrationApiFp(this.configuration).listAppointmentsOfTheStudent(studentId, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bir öğretmenin tüm(geçmiş, gelecek) randevularını listeler.
     * @param {number} teacherId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentAdministrationApi
     */
    public listAppointmentsOfTheTeacher(teacherId: number, options?: AxiosRequestConfig) {
        return AppointmentAdministrationApiFp(this.configuration).listAppointmentsOfTheTeacher(teacherId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [teacherId] 
     * @param {string} [startdate] 
     * @param {string} [endDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentAdministrationApi
     */
    public listAppointmentsTeacherForPay(teacherId?: number, startdate?: string, endDate?: string, options?: AxiosRequestConfig) {
        return AppointmentAdministrationApiFp(this.configuration).listAppointmentsTeacherForPay(teacherId, startdate, endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [teacherSalaryId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentAdministrationApi
     */
    public listPaidAppointmentDetail(teacherSalaryId?: number, options?: AxiosRequestConfig) {
        return AppointmentAdministrationApiFp(this.configuration).listPaidAppointmentDetail(teacherSalaryId, options).then((request) => request(this.axios, this.basePath));
    }
}

