/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AppointmentCommandsCreateCommandResult } from '../models';
// @ts-ignore
import { AppointmentCommandsReportAsStudentCommandResult } from '../models';
// @ts-ignore
import { AppointmentCommandsReportAsTeacherCommandResult } from '../models';
// @ts-ignore
import { AppointmentCommandsSelectedTimeRange } from '../models';
// @ts-ignore
import { AppointmentQueriesListMyAppointmentsQueryResult } from '../models';
// @ts-ignore
import { FluentValidationResultsValidationFailure } from '../models';
/**
 * AppointmentApi - axios parameter creator
 * @export
 */
export const AppointmentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Öğrencinin dahil olduğu bir randevuyu iptal etmesini sağlar. Randevunun başlangıcına minimum 1 saat kala iptal işlemi gerçekleştirilebilir.
         * @param {number} [appointmentId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelAppointmentAsStudent: async (appointmentId?: number, reason?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Appointment/CancelAsStudent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (appointmentId !== undefined) {
                localVarQueryParameter['AppointmentId'] = appointmentId;
            }

            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğretmenin dahil olduğu bir randevuyu iptal etmesini sağlar. Randevunun başlangıcına minimum 15 dakika kala iptal işlemi gerçekleştirilebilir.
         * @param {number} [appointmentId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelAppointmentAsTeacher: async (appointmentId?: number, reason?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Appointment/CancelAsTeacher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (appointmentId !== undefined) {
                localVarQueryParameter['AppointmentId'] = appointmentId;
            }

            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğrenci olarak randevu vaktini değiştirmeye yarar. Değiştirilebilmesi için randevuya minimum 1 saat kalmış olması gerekir. Aynı gün içinde, aynı randevu üzerinde sadece 1 kere değişiklik yapılabilir. Bunun dışındaki değişiklikler için sistem yöneticisiyle irtibata geçilmesi gerekir.
         * @param {number} [appointmentId] 
         * @param {string} [startTime] 
         * @param {string} [endTime] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeDateTimeAsStudent: async (appointmentId?: number, startTime?: string, endTime?: string, reason?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Appointment/ChangeDateTimeAsStudent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (appointmentId !== undefined) {
                localVarQueryParameter['AppointmentId'] = appointmentId;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['StartTime'] = (startTime as any instanceof Date) ?
                    (startTime as any).toISOString() :
                    startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['EndTime'] = (endTime as any instanceof Date) ?
                    (endTime as any).toISOString() :
                    endTime;
            }

            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Randevu vaktini değiştirmeye yarar. Değiştirilebilmesi için randevuya minimum 15 dakika kalmış olması gerekir. Aynı gün içinde, aynı randevu üzerinde sadece 1 kere değişiklik yapılabilir. Bunun dışındaki değişiklikler için sistem yöneticisiyle irtibata geçilmesi gerekir.
         * @param {number} [appointmentId] 
         * @param {string} [startTime] 
         * @param {string} [endTime] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeDateTimeAsTeacher: async (appointmentId?: number, startTime?: string, endTime?: string, reason?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Appointment/ChangeDateTimeAsTeacher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (appointmentId !== undefined) {
                localVarQueryParameter['AppointmentId'] = appointmentId;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['StartTime'] = (startTime as any instanceof Date) ?
                    (startTime as any).toISOString() :
                    startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['EndTime'] = (endTime as any instanceof Date) ?
                    (endTime as any).toISOString() :
                    endTime;
            }

            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğrencinin öğretmenden randevu almasını sağlar.
         * @param {AppointmentCommandsSelectedTimeRange} [appointmentCommandsSelectedTimeRange] 
         * @param {number} [teacherId] 
         * @param {string} [infoTimeZone] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAppointment: async (appointmentCommandsSelectedTimeRange?: AppointmentCommandsSelectedTimeRange, teacherId?: number, infoTimeZone?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Appointment/Create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }

            if (infoTimeZone !== undefined) {
                localVarQueryParameter['InfoTimeZone'] = infoTimeZone;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(appointmentCommandsSelectedTimeRange, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hesabın içinde bulunduğu randevuların listesini getirir.
         * @param {number} [lastId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMyAppointments: async (lastId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Appointment/ListMyAppointments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (lastId !== undefined) {
                localVarQueryParameter['LastId'] = lastId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğrencinin randevuyu şikayet etmesini sağlar.
         * @param {number} [appointmentId] 
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportAppointmentAsStudent: async (appointmentId?: number, title?: string, description?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Appointment/ReportAsStudent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (appointmentId !== undefined) {
                localVarQueryParameter['AppointmentId'] = appointmentId;
            }

            if (title !== undefined) {
                localVarQueryParameter['Title'] = title;
            }

            if (description !== undefined) {
                localVarQueryParameter['Description'] = description;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğretmenin randevuyu şikayet etmesini sağlar.
         * @param {number} [appointmentId] 
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportAppointmentAsTeacher: async (appointmentId?: number, title?: string, description?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Appointment/ReportAsTeacher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (appointmentId !== undefined) {
                localVarQueryParameter['AppointmentId'] = appointmentId;
            }

            if (title !== undefined) {
                localVarQueryParameter['Title'] = title;
            }

            if (description !== undefined) {
                localVarQueryParameter['Description'] = description;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppointmentApi - functional programming interface
 * @export
 */
export const AppointmentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppointmentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Öğrencinin dahil olduğu bir randevuyu iptal etmesini sağlar. Randevunun başlangıcına minimum 1 saat kala iptal işlemi gerçekleştirilebilir.
         * @param {number} [appointmentId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelAppointmentAsStudent(appointmentId?: number, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelAppointmentAsStudent(appointmentId, reason, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğretmenin dahil olduğu bir randevuyu iptal etmesini sağlar. Randevunun başlangıcına minimum 15 dakika kala iptal işlemi gerçekleştirilebilir.
         * @param {number} [appointmentId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelAppointmentAsTeacher(appointmentId?: number, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelAppointmentAsTeacher(appointmentId, reason, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğrenci olarak randevu vaktini değiştirmeye yarar. Değiştirilebilmesi için randevuya minimum 1 saat kalmış olması gerekir. Aynı gün içinde, aynı randevu üzerinde sadece 1 kere değişiklik yapılabilir. Bunun dışındaki değişiklikler için sistem yöneticisiyle irtibata geçilmesi gerekir.
         * @param {number} [appointmentId] 
         * @param {string} [startTime] 
         * @param {string} [endTime] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeDateTimeAsStudent(appointmentId?: number, startTime?: string, endTime?: string, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeDateTimeAsStudent(appointmentId, startTime, endTime, reason, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Randevu vaktini değiştirmeye yarar. Değiştirilebilmesi için randevuya minimum 15 dakika kalmış olması gerekir. Aynı gün içinde, aynı randevu üzerinde sadece 1 kere değişiklik yapılabilir. Bunun dışındaki değişiklikler için sistem yöneticisiyle irtibata geçilmesi gerekir.
         * @param {number} [appointmentId] 
         * @param {string} [startTime] 
         * @param {string} [endTime] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeDateTimeAsTeacher(appointmentId?: number, startTime?: string, endTime?: string, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeDateTimeAsTeacher(appointmentId, startTime, endTime, reason, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğrencinin öğretmenden randevu almasını sağlar.
         * @param {AppointmentCommandsSelectedTimeRange} [appointmentCommandsSelectedTimeRange] 
         * @param {number} [teacherId] 
         * @param {string} [infoTimeZone] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAppointment(appointmentCommandsSelectedTimeRange?: AppointmentCommandsSelectedTimeRange, teacherId?: number, infoTimeZone?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppointmentCommandsCreateCommandResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAppointment(appointmentCommandsSelectedTimeRange, teacherId, infoTimeZone, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Hesabın içinde bulunduğu randevuların listesini getirir.
         * @param {number} [lastId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMyAppointments(lastId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppointmentQueriesListMyAppointmentsQueryResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMyAppointments(lastId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğrencinin randevuyu şikayet etmesini sağlar.
         * @param {number} [appointmentId] 
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportAppointmentAsStudent(appointmentId?: number, title?: string, description?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppointmentCommandsReportAsStudentCommandResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportAppointmentAsStudent(appointmentId, title, description, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğretmenin randevuyu şikayet etmesini sağlar.
         * @param {number} [appointmentId] 
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportAppointmentAsTeacher(appointmentId?: number, title?: string, description?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppointmentCommandsReportAsTeacherCommandResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportAppointmentAsTeacher(appointmentId, title, description, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AppointmentApi - factory interface
 * @export
 */
export const AppointmentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppointmentApiFp(configuration)
    return {
        /**
         * 
         * @summary Öğrencinin dahil olduğu bir randevuyu iptal etmesini sağlar. Randevunun başlangıcına minimum 1 saat kala iptal işlemi gerçekleştirilebilir.
         * @param {number} [appointmentId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelAppointmentAsStudent(appointmentId?: number, reason?: string, options?: any): AxiosPromise<object> {
            return localVarFp.cancelAppointmentAsStudent(appointmentId, reason, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğretmenin dahil olduğu bir randevuyu iptal etmesini sağlar. Randevunun başlangıcına minimum 15 dakika kala iptal işlemi gerçekleştirilebilir.
         * @param {number} [appointmentId] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelAppointmentAsTeacher(appointmentId?: number, reason?: string, options?: any): AxiosPromise<object> {
            return localVarFp.cancelAppointmentAsTeacher(appointmentId, reason, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğrenci olarak randevu vaktini değiştirmeye yarar. Değiştirilebilmesi için randevuya minimum 1 saat kalmış olması gerekir. Aynı gün içinde, aynı randevu üzerinde sadece 1 kere değişiklik yapılabilir. Bunun dışındaki değişiklikler için sistem yöneticisiyle irtibata geçilmesi gerekir.
         * @param {number} [appointmentId] 
         * @param {string} [startTime] 
         * @param {string} [endTime] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeDateTimeAsStudent(appointmentId?: number, startTime?: string, endTime?: string, reason?: string, options?: any): AxiosPromise<object> {
            return localVarFp.changeDateTimeAsStudent(appointmentId, startTime, endTime, reason, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Randevu vaktini değiştirmeye yarar. Değiştirilebilmesi için randevuya minimum 15 dakika kalmış olması gerekir. Aynı gün içinde, aynı randevu üzerinde sadece 1 kere değişiklik yapılabilir. Bunun dışındaki değişiklikler için sistem yöneticisiyle irtibata geçilmesi gerekir.
         * @param {number} [appointmentId] 
         * @param {string} [startTime] 
         * @param {string} [endTime] 
         * @param {string} [reason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeDateTimeAsTeacher(appointmentId?: number, startTime?: string, endTime?: string, reason?: string, options?: any): AxiosPromise<object> {
            return localVarFp.changeDateTimeAsTeacher(appointmentId, startTime, endTime, reason, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğrencinin öğretmenden randevu almasını sağlar.
         * @param {AppointmentCommandsSelectedTimeRange} [appointmentCommandsSelectedTimeRange] 
         * @param {number} [teacherId] 
         * @param {string} [infoTimeZone] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAppointment(appointmentCommandsSelectedTimeRange?: AppointmentCommandsSelectedTimeRange, teacherId?: number, infoTimeZone?: string, options?: any): AxiosPromise<AppointmentCommandsCreateCommandResult> {
            return localVarFp.createAppointment(appointmentCommandsSelectedTimeRange, teacherId, infoTimeZone, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hesabın içinde bulunduğu randevuların listesini getirir.
         * @param {number} [lastId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMyAppointments(lastId?: number, options?: any): AxiosPromise<AppointmentQueriesListMyAppointmentsQueryResult> {
            return localVarFp.listMyAppointments(lastId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğrencinin randevuyu şikayet etmesini sağlar.
         * @param {number} [appointmentId] 
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportAppointmentAsStudent(appointmentId?: number, title?: string, description?: string, options?: any): AxiosPromise<AppointmentCommandsReportAsStudentCommandResult> {
            return localVarFp.reportAppointmentAsStudent(appointmentId, title, description, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğretmenin randevuyu şikayet etmesini sağlar.
         * @param {number} [appointmentId] 
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportAppointmentAsTeacher(appointmentId?: number, title?: string, description?: string, options?: any): AxiosPromise<AppointmentCommandsReportAsTeacherCommandResult> {
            return localVarFp.reportAppointmentAsTeacher(appointmentId, title, description, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AppointmentApi - interface
 * @export
 * @interface AppointmentApi
 */
export interface AppointmentApiInterface {
    /**
     * 
     * @summary Öğrencinin dahil olduğu bir randevuyu iptal etmesini sağlar. Randevunun başlangıcına minimum 1 saat kala iptal işlemi gerçekleştirilebilir.
     * @param {number} [appointmentId] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApiInterface
     */
    cancelAppointmentAsStudent(appointmentId?: number, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Öğretmenin dahil olduğu bir randevuyu iptal etmesini sağlar. Randevunun başlangıcına minimum 15 dakika kala iptal işlemi gerçekleştirilebilir.
     * @param {number} [appointmentId] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApiInterface
     */
    cancelAppointmentAsTeacher(appointmentId?: number, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Öğrenci olarak randevu vaktini değiştirmeye yarar. Değiştirilebilmesi için randevuya minimum 1 saat kalmış olması gerekir. Aynı gün içinde, aynı randevu üzerinde sadece 1 kere değişiklik yapılabilir. Bunun dışındaki değişiklikler için sistem yöneticisiyle irtibata geçilmesi gerekir.
     * @param {number} [appointmentId] 
     * @param {string} [startTime] 
     * @param {string} [endTime] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApiInterface
     */
    changeDateTimeAsStudent(appointmentId?: number, startTime?: string, endTime?: string, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Randevu vaktini değiştirmeye yarar. Değiştirilebilmesi için randevuya minimum 15 dakika kalmış olması gerekir. Aynı gün içinde, aynı randevu üzerinde sadece 1 kere değişiklik yapılabilir. Bunun dışındaki değişiklikler için sistem yöneticisiyle irtibata geçilmesi gerekir.
     * @param {number} [appointmentId] 
     * @param {string} [startTime] 
     * @param {string} [endTime] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApiInterface
     */
    changeDateTimeAsTeacher(appointmentId?: number, startTime?: string, endTime?: string, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Öğrencinin öğretmenden randevu almasını sağlar.
     * @param {AppointmentCommandsSelectedTimeRange} [appointmentCommandsSelectedTimeRange] 
     * @param {number} [teacherId] 
     * @param {string} [infoTimeZone] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApiInterface
     */
    createAppointment(appointmentCommandsSelectedTimeRange?: AppointmentCommandsSelectedTimeRange, teacherId?: number, infoTimeZone?: string, options?: AxiosRequestConfig): AxiosPromise<AppointmentCommandsCreateCommandResult>;

    /**
     * 
     * @summary Hesabın içinde bulunduğu randevuların listesini getirir.
     * @param {number} [lastId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApiInterface
     */
    listMyAppointments(lastId?: number, options?: AxiosRequestConfig): AxiosPromise<AppointmentQueriesListMyAppointmentsQueryResult>;

    /**
     * 
     * @summary Öğrencinin randevuyu şikayet etmesini sağlar.
     * @param {number} [appointmentId] 
     * @param {string} [title] 
     * @param {string} [description] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApiInterface
     */
    reportAppointmentAsStudent(appointmentId?: number, title?: string, description?: string, options?: AxiosRequestConfig): AxiosPromise<AppointmentCommandsReportAsStudentCommandResult>;

    /**
     * 
     * @summary Öğretmenin randevuyu şikayet etmesini sağlar.
     * @param {number} [appointmentId] 
     * @param {string} [title] 
     * @param {string} [description] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApiInterface
     */
    reportAppointmentAsTeacher(appointmentId?: number, title?: string, description?: string, options?: AxiosRequestConfig): AxiosPromise<AppointmentCommandsReportAsTeacherCommandResult>;

}

/**
 * AppointmentApi - object-oriented interface
 * @export
 * @class AppointmentApi
 * @extends {BaseAPI}
 */
export class AppointmentApi extends BaseAPI implements AppointmentApiInterface {
    /**
     * 
     * @summary Öğrencinin dahil olduğu bir randevuyu iptal etmesini sağlar. Randevunun başlangıcına minimum 1 saat kala iptal işlemi gerçekleştirilebilir.
     * @param {number} [appointmentId] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApi
     */
    public cancelAppointmentAsStudent(appointmentId?: number, reason?: string, options?: AxiosRequestConfig) {
        return AppointmentApiFp(this.configuration).cancelAppointmentAsStudent(appointmentId, reason, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğretmenin dahil olduğu bir randevuyu iptal etmesini sağlar. Randevunun başlangıcına minimum 15 dakika kala iptal işlemi gerçekleştirilebilir.
     * @param {number} [appointmentId] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApi
     */
    public cancelAppointmentAsTeacher(appointmentId?: number, reason?: string, options?: AxiosRequestConfig) {
        return AppointmentApiFp(this.configuration).cancelAppointmentAsTeacher(appointmentId, reason, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğrenci olarak randevu vaktini değiştirmeye yarar. Değiştirilebilmesi için randevuya minimum 1 saat kalmış olması gerekir. Aynı gün içinde, aynı randevu üzerinde sadece 1 kere değişiklik yapılabilir. Bunun dışındaki değişiklikler için sistem yöneticisiyle irtibata geçilmesi gerekir.
     * @param {number} [appointmentId] 
     * @param {string} [startTime] 
     * @param {string} [endTime] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApi
     */
    public changeDateTimeAsStudent(appointmentId?: number, startTime?: string, endTime?: string, reason?: string, options?: AxiosRequestConfig) {
        return AppointmentApiFp(this.configuration).changeDateTimeAsStudent(appointmentId, startTime, endTime, reason, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Randevu vaktini değiştirmeye yarar. Değiştirilebilmesi için randevuya minimum 15 dakika kalmış olması gerekir. Aynı gün içinde, aynı randevu üzerinde sadece 1 kere değişiklik yapılabilir. Bunun dışındaki değişiklikler için sistem yöneticisiyle irtibata geçilmesi gerekir.
     * @param {number} [appointmentId] 
     * @param {string} [startTime] 
     * @param {string} [endTime] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApi
     */
    public changeDateTimeAsTeacher(appointmentId?: number, startTime?: string, endTime?: string, reason?: string, options?: AxiosRequestConfig) {
        return AppointmentApiFp(this.configuration).changeDateTimeAsTeacher(appointmentId, startTime, endTime, reason, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğrencinin öğretmenden randevu almasını sağlar.
     * @param {AppointmentCommandsSelectedTimeRange} [appointmentCommandsSelectedTimeRange] 
     * @param {number} [teacherId] 
     * @param {string} [infoTimeZone] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApi
     */
    public createAppointment(appointmentCommandsSelectedTimeRange?: AppointmentCommandsSelectedTimeRange, teacherId?: number, infoTimeZone?: string, options?: AxiosRequestConfig) {
        return AppointmentApiFp(this.configuration).createAppointment(appointmentCommandsSelectedTimeRange, teacherId, infoTimeZone, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hesabın içinde bulunduğu randevuların listesini getirir.
     * @param {number} [lastId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApi
     */
    public listMyAppointments(lastId?: number, options?: AxiosRequestConfig) {
        return AppointmentApiFp(this.configuration).listMyAppointments(lastId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğrencinin randevuyu şikayet etmesini sağlar.
     * @param {number} [appointmentId] 
     * @param {string} [title] 
     * @param {string} [description] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApi
     */
    public reportAppointmentAsStudent(appointmentId?: number, title?: string, description?: string, options?: AxiosRequestConfig) {
        return AppointmentApiFp(this.configuration).reportAppointmentAsStudent(appointmentId, title, description, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğretmenin randevuyu şikayet etmesini sağlar.
     * @param {number} [appointmentId] 
     * @param {string} [title] 
     * @param {string} [description] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApi
     */
    public reportAppointmentAsTeacher(appointmentId?: number, title?: string, description?: string, options?: AxiosRequestConfig) {
        return AppointmentApiFp(this.configuration).reportAppointmentAsTeacher(appointmentId, title, description, options).then((request) => request(this.axios, this.basePath));
    }
}

