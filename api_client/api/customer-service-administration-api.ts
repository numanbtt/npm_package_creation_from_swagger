/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CustomerServiceAdministrationQueriesGetComplaintQueryResult } from '../models';
// @ts-ignore
import { CustomerServiceAdministrationQueriesListComplaintsQueryResult } from '../models';
// @ts-ignore
import { FluentValidationResultsValidationFailure } from '../models';
/**
 * CustomerServiceAdministrationApi - axios parameter creator
 * @export
 */
export const CustomerServiceAdministrationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Şikayetin durumunu tamamlandı olarak değiştirmeyi sağlar
         * @param {number} [complaintId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeComplaintStateToCompleted: async (complaintId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/CustomerServiceAdministration/ChangeComplaintStateToCompleted`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (complaintId !== undefined) {
                localVarQueryParameter['ComplaintId'] = complaintId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Şikayetin durumunu henüz işlem yapılmadı olarak değiştirmeyi sağlar
         * @param {number} [complaintId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeComplaintStateToNotSeenYet: async (complaintId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/CustomerServiceAdministration/ChangeComplaintStateToNotSeenYet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (complaintId !== undefined) {
                localVarQueryParameter['ComplaintId'] = complaintId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Şikayetin durumunu reddedildi olarak değiştirmeyi sağlar
         * @param {number} [complaintId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeComplaintStateToRejected: async (complaintId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/CustomerServiceAdministration/ChangeComplaintStateToRejected`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (complaintId !== undefined) {
                localVarQueryParameter['ComplaintId'] = complaintId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Şikayetin durumunu görüldü olarak değiştirmeyi sağlar
         * @param {number} [complaintId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeComplaintStateToSeen: async (complaintId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/CustomerServiceAdministration/ChangeComplaintStateToSeen`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (complaintId !== undefined) {
                localVarQueryParameter['ComplaintId'] = complaintId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Şikayetin detayını getirmeyi sağlar
         * @param {number} complaintId Şikayet Id sini barındırır
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComplaint: async (complaintId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'complaintId' is not null or undefined
            assertParamExists('getComplaint', 'complaintId', complaintId)
            const localVarPath = `/api/CustomerServiceAdministration/GetComplaint`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (complaintId !== undefined) {
                localVarQueryParameter['ComplaintId'] = complaintId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Şikayetlerin listesini getirmeyi sağlar
         * @param {number} [page] 
         * @param {number} [itemPerPage] 
         * @param {string} [filtersSearchKeyword] Şikayetler listesinin arama kelimesini barındırır
         * @param {string} [filtersListComplaintsRoles] Listelenilecek şikayetlerin rollerini belirtir
         * @param {string} [filtersListComplaintsStates] Listelenicek şikayetlerin durumunu belirtir
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listComplaints: async (page?: number, itemPerPage?: number, filtersSearchKeyword?: string, filtersListComplaintsRoles?: string, filtersListComplaintsStates?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/CustomerServiceAdministration/ListComplaints`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (itemPerPage !== undefined) {
                localVarQueryParameter['ItemPerPage'] = itemPerPage;
            }

            if (filtersSearchKeyword !== undefined) {
                localVarQueryParameter['Filters.SearchKeyword'] = filtersSearchKeyword;
            }

            if (filtersListComplaintsRoles !== undefined) {
                localVarQueryParameter['Filters.ListComplaintsRoles'] = filtersListComplaintsRoles;
            }

            if (filtersListComplaintsStates !== undefined) {
                localVarQueryParameter['Filters.ListComplaintsStates'] = filtersListComplaintsStates;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerServiceAdministrationApi - functional programming interface
 * @export
 */
export const CustomerServiceAdministrationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerServiceAdministrationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Şikayetin durumunu tamamlandı olarak değiştirmeyi sağlar
         * @param {number} [complaintId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeComplaintStateToCompleted(complaintId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeComplaintStateToCompleted(complaintId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Şikayetin durumunu henüz işlem yapılmadı olarak değiştirmeyi sağlar
         * @param {number} [complaintId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeComplaintStateToNotSeenYet(complaintId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeComplaintStateToNotSeenYet(complaintId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Şikayetin durumunu reddedildi olarak değiştirmeyi sağlar
         * @param {number} [complaintId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeComplaintStateToRejected(complaintId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeComplaintStateToRejected(complaintId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Şikayetin durumunu görüldü olarak değiştirmeyi sağlar
         * @param {number} [complaintId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeComplaintStateToSeen(complaintId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeComplaintStateToSeen(complaintId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Şikayetin detayını getirmeyi sağlar
         * @param {number} complaintId Şikayet Id sini barındırır
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getComplaint(complaintId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerServiceAdministrationQueriesGetComplaintQueryResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getComplaint(complaintId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Şikayetlerin listesini getirmeyi sağlar
         * @param {number} [page] 
         * @param {number} [itemPerPage] 
         * @param {string} [filtersSearchKeyword] Şikayetler listesinin arama kelimesini barındırır
         * @param {string} [filtersListComplaintsRoles] Listelenilecek şikayetlerin rollerini belirtir
         * @param {string} [filtersListComplaintsStates] Listelenicek şikayetlerin durumunu belirtir
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listComplaints(page?: number, itemPerPage?: number, filtersSearchKeyword?: string, filtersListComplaintsRoles?: string, filtersListComplaintsStates?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerServiceAdministrationQueriesListComplaintsQueryResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listComplaints(page, itemPerPage, filtersSearchKeyword, filtersListComplaintsRoles, filtersListComplaintsStates, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomerServiceAdministrationApi - factory interface
 * @export
 */
export const CustomerServiceAdministrationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerServiceAdministrationApiFp(configuration)
    return {
        /**
         * 
         * @summary Şikayetin durumunu tamamlandı olarak değiştirmeyi sağlar
         * @param {number} [complaintId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeComplaintStateToCompleted(complaintId?: number, options?: any): AxiosPromise<object> {
            return localVarFp.changeComplaintStateToCompleted(complaintId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Şikayetin durumunu henüz işlem yapılmadı olarak değiştirmeyi sağlar
         * @param {number} [complaintId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeComplaintStateToNotSeenYet(complaintId?: number, options?: any): AxiosPromise<object> {
            return localVarFp.changeComplaintStateToNotSeenYet(complaintId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Şikayetin durumunu reddedildi olarak değiştirmeyi sağlar
         * @param {number} [complaintId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeComplaintStateToRejected(complaintId?: number, options?: any): AxiosPromise<object> {
            return localVarFp.changeComplaintStateToRejected(complaintId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Şikayetin durumunu görüldü olarak değiştirmeyi sağlar
         * @param {number} [complaintId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeComplaintStateToSeen(complaintId?: number, options?: any): AxiosPromise<object> {
            return localVarFp.changeComplaintStateToSeen(complaintId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Şikayetin detayını getirmeyi sağlar
         * @param {number} complaintId Şikayet Id sini barındırır
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComplaint(complaintId: number, options?: any): AxiosPromise<CustomerServiceAdministrationQueriesGetComplaintQueryResult> {
            return localVarFp.getComplaint(complaintId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Şikayetlerin listesini getirmeyi sağlar
         * @param {number} [page] 
         * @param {number} [itemPerPage] 
         * @param {string} [filtersSearchKeyword] Şikayetler listesinin arama kelimesini barındırır
         * @param {string} [filtersListComplaintsRoles] Listelenilecek şikayetlerin rollerini belirtir
         * @param {string} [filtersListComplaintsStates] Listelenicek şikayetlerin durumunu belirtir
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listComplaints(page?: number, itemPerPage?: number, filtersSearchKeyword?: string, filtersListComplaintsRoles?: string, filtersListComplaintsStates?: string, options?: any): AxiosPromise<CustomerServiceAdministrationQueriesListComplaintsQueryResult> {
            return localVarFp.listComplaints(page, itemPerPage, filtersSearchKeyword, filtersListComplaintsRoles, filtersListComplaintsStates, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerServiceAdministrationApi - interface
 * @export
 * @interface CustomerServiceAdministrationApi
 */
export interface CustomerServiceAdministrationApiInterface {
    /**
     * 
     * @summary Şikayetin durumunu tamamlandı olarak değiştirmeyi sağlar
     * @param {number} [complaintId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerServiceAdministrationApiInterface
     */
    changeComplaintStateToCompleted(complaintId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Şikayetin durumunu henüz işlem yapılmadı olarak değiştirmeyi sağlar
     * @param {number} [complaintId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerServiceAdministrationApiInterface
     */
    changeComplaintStateToNotSeenYet(complaintId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Şikayetin durumunu reddedildi olarak değiştirmeyi sağlar
     * @param {number} [complaintId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerServiceAdministrationApiInterface
     */
    changeComplaintStateToRejected(complaintId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Şikayetin durumunu görüldü olarak değiştirmeyi sağlar
     * @param {number} [complaintId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerServiceAdministrationApiInterface
     */
    changeComplaintStateToSeen(complaintId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Şikayetin detayını getirmeyi sağlar
     * @param {number} complaintId Şikayet Id sini barındırır
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerServiceAdministrationApiInterface
     */
    getComplaint(complaintId: number, options?: AxiosRequestConfig): AxiosPromise<CustomerServiceAdministrationQueriesGetComplaintQueryResult>;

    /**
     * 
     * @summary Şikayetlerin listesini getirmeyi sağlar
     * @param {number} [page] 
     * @param {number} [itemPerPage] 
     * @param {string} [filtersSearchKeyword] Şikayetler listesinin arama kelimesini barındırır
     * @param {string} [filtersListComplaintsRoles] Listelenilecek şikayetlerin rollerini belirtir
     * @param {string} [filtersListComplaintsStates] Listelenicek şikayetlerin durumunu belirtir
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerServiceAdministrationApiInterface
     */
    listComplaints(page?: number, itemPerPage?: number, filtersSearchKeyword?: string, filtersListComplaintsRoles?: string, filtersListComplaintsStates?: string, options?: AxiosRequestConfig): AxiosPromise<CustomerServiceAdministrationQueriesListComplaintsQueryResult>;

}

/**
 * CustomerServiceAdministrationApi - object-oriented interface
 * @export
 * @class CustomerServiceAdministrationApi
 * @extends {BaseAPI}
 */
export class CustomerServiceAdministrationApi extends BaseAPI implements CustomerServiceAdministrationApiInterface {
    /**
     * 
     * @summary Şikayetin durumunu tamamlandı olarak değiştirmeyi sağlar
     * @param {number} [complaintId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerServiceAdministrationApi
     */
    public changeComplaintStateToCompleted(complaintId?: number, options?: AxiosRequestConfig) {
        return CustomerServiceAdministrationApiFp(this.configuration).changeComplaintStateToCompleted(complaintId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Şikayetin durumunu henüz işlem yapılmadı olarak değiştirmeyi sağlar
     * @param {number} [complaintId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerServiceAdministrationApi
     */
    public changeComplaintStateToNotSeenYet(complaintId?: number, options?: AxiosRequestConfig) {
        return CustomerServiceAdministrationApiFp(this.configuration).changeComplaintStateToNotSeenYet(complaintId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Şikayetin durumunu reddedildi olarak değiştirmeyi sağlar
     * @param {number} [complaintId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerServiceAdministrationApi
     */
    public changeComplaintStateToRejected(complaintId?: number, options?: AxiosRequestConfig) {
        return CustomerServiceAdministrationApiFp(this.configuration).changeComplaintStateToRejected(complaintId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Şikayetin durumunu görüldü olarak değiştirmeyi sağlar
     * @param {number} [complaintId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerServiceAdministrationApi
     */
    public changeComplaintStateToSeen(complaintId?: number, options?: AxiosRequestConfig) {
        return CustomerServiceAdministrationApiFp(this.configuration).changeComplaintStateToSeen(complaintId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Şikayetin detayını getirmeyi sağlar
     * @param {number} complaintId Şikayet Id sini barındırır
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerServiceAdministrationApi
     */
    public getComplaint(complaintId: number, options?: AxiosRequestConfig) {
        return CustomerServiceAdministrationApiFp(this.configuration).getComplaint(complaintId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Şikayetlerin listesini getirmeyi sağlar
     * @param {number} [page] 
     * @param {number} [itemPerPage] 
     * @param {string} [filtersSearchKeyword] Şikayetler listesinin arama kelimesini barındırır
     * @param {string} [filtersListComplaintsRoles] Listelenilecek şikayetlerin rollerini belirtir
     * @param {string} [filtersListComplaintsStates] Listelenicek şikayetlerin durumunu belirtir
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerServiceAdministrationApi
     */
    public listComplaints(page?: number, itemPerPage?: number, filtersSearchKeyword?: string, filtersListComplaintsRoles?: string, filtersListComplaintsStates?: string, options?: AxiosRequestConfig) {
        return CustomerServiceAdministrationApiFp(this.configuration).listComplaints(page, itemPerPage, filtersSearchKeyword, filtersListComplaintsRoles, filtersListComplaintsStates, options).then((request) => request(this.axios, this.basePath));
    }
}

