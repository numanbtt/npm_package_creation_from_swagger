/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FluentValidationResultsValidationFailure } from '../models';
// @ts-ignore
import { WordTutorialAdministrationCommandsAddTranslationCommandResult } from '../models';
// @ts-ignore
import { WordTutorialAdministrationCommandsChangeYoutubeUrlCommandResult } from '../models';
// @ts-ignore
import { WordTutorialAdministrationCommandsCreateCommandResult } from '../models';
// @ts-ignore
import { WordTutorialAdministrationCommandsDeleteWordTutorialList } from '../models';
// @ts-ignore
import { WordTutorialAdministrationCommandsPostWordTutorialTranslation } from '../models';
// @ts-ignore
import { WordTutorialAdministrationQueriesListQueryResult } from '../models';
/**
 * WordTutorialAdministrationApi - axios parameter creator
 * @export
 */
export const WordTutorialAdministrationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Kelime eğitimine yeni bir çeviri ekler.
         * @param {number} [wordTutorialId] 
         * @param {string} [languageCode] 
         * @param {boolean} [isRtlLanguage] 
         * @param {string} [content] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTranslationToTheWordTutorial: async (wordTutorialId?: number, languageCode?: string, isRtlLanguage?: boolean, content?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/WordTutorialAdministration/AddTranslation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (wordTutorialId !== undefined) {
                localVarQueryParameter['WordTutorialId'] = wordTutorialId;
            }

            if (languageCode !== undefined) {
                localVarQueryParameter['LanguageCode'] = languageCode;
            }

            if (isRtlLanguage !== undefined) {
                localVarQueryParameter['IsRtlLanguage'] = isRtlLanguage;
            }

            if (content !== undefined) {
                localVarQueryParameter['Content'] = content;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Kelime eğitimlerinin silinmesini sağlar
         * @param {Array<WordTutorialAdministrationCommandsDeleteWordTutorialList>} [wordTutorialAdministrationCommandsDeleteWordTutorialList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkDeleteWordTutorials: async (wordTutorialAdministrationCommandsDeleteWordTutorialList?: Array<WordTutorialAdministrationCommandsDeleteWordTutorialList>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/WordTutorialAdministration/BulkDelete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(wordTutorialAdministrationCommandsDeleteWordTutorialList, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bir çevirinin içeriğinin değiştirilmesini sağlar.
         * @param {number} [wordTutorialId] 
         * @param {string} [translationLanguageCode] 
         * @param {string} [newContent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTranslationContentOfTheWordTutorial: async (wordTutorialId?: number, translationLanguageCode?: string, newContent?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/WordTutorialAdministration/ChangeTranslationContent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (wordTutorialId !== undefined) {
                localVarQueryParameter['WordTutorialId'] = wordTutorialId;
            }

            if (translationLanguageCode !== undefined) {
                localVarQueryParameter['TranslationLanguageCode'] = translationLanguageCode;
            }

            if (newContent !== undefined) {
                localVarQueryParameter['NewContent'] = newContent;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bir çevirinin yazım yönünü değiştirir.
         * @param {number} [wordTutorialTranslationId] 
         * @param {boolean} [isNewStateRightToLeft] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTranslationTextDirectionOfTheWordTutorial: async (wordTutorialTranslationId?: number, isNewStateRightToLeft?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/WordTutorialAdministration/ChangeTranslationTextDirection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (wordTutorialTranslationId !== undefined) {
                localVarQueryParameter['WordTutorialTranslationId'] = wordTutorialTranslationId;
            }

            if (isNewStateRightToLeft !== undefined) {
                localVarQueryParameter['IsNewStateRightToLeft'] = isNewStateRightToLeft;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Kelime eğitiminin youtube linkini değiştirmeyi sağlar
         * @param {number} [wordTutorialId] 
         * @param {string} [newYoutubeUrl] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeYoutubeUrlOfTheWordTutorial: async (wordTutorialId?: number, newYoutubeUrl?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/WordTutorialAdministration/ChangeYoutubeUrl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (wordTutorialId !== undefined) {
                localVarQueryParameter['WordTutorialId'] = wordTutorialId;
            }

            if (newYoutubeUrl !== undefined) {
                localVarQueryParameter['NewYoutubeUrl'] = newYoutubeUrl;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Kelime eğitimi eklemeyi sağlar
         * @param {Array<WordTutorialAdministrationCommandsPostWordTutorialTranslation>} [wordTutorialAdministrationCommandsPostWordTutorialTranslation] 
         * @param {number} [wordTutorialCategoryId] 
         * @param {string} [slug] 
         * @param {string} [youtubeUrl] 
         * @param {string} [accent] 
         * @param {string} [languageLevel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWordTutorial: async (wordTutorialAdministrationCommandsPostWordTutorialTranslation?: Array<WordTutorialAdministrationCommandsPostWordTutorialTranslation>, wordTutorialCategoryId?: number, slug?: string, youtubeUrl?: string, accent?: string, languageLevel?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/WordTutorialAdministration/Create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (wordTutorialCategoryId !== undefined) {
                localVarQueryParameter['WordTutorialCategoryId'] = wordTutorialCategoryId;
            }

            if (slug !== undefined) {
                localVarQueryParameter['Slug'] = slug;
            }

            if (youtubeUrl !== undefined) {
                localVarQueryParameter['YoutubeUrl'] = youtubeUrl;
            }

            if (accent !== undefined) {
                localVarQueryParameter['Accent'] = accent;
            }

            if (languageLevel !== undefined) {
                localVarQueryParameter['LanguageLevel'] = languageLevel;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(wordTutorialAdministrationCommandsPostWordTutorialTranslation, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Kelime eğitiminin silinmesini sağlar
         * @param {number} [wordTutorialId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWordTutorial: async (wordTutorialId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/WordTutorialAdministration/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (wordTutorialId !== undefined) {
                localVarQueryParameter['WordTutorialId'] = wordTutorialId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Kelime eğitimlerini listelemeyi sağlar
         * @param {number} wordTutorialCategoryId Kelime eğitimi kategorisinin Id sini barındırır
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWordTutorialsForAdministration: async (wordTutorialCategoryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'wordTutorialCategoryId' is not null or undefined
            assertParamExists('listWordTutorialsForAdministration', 'wordTutorialCategoryId', wordTutorialCategoryId)
            const localVarPath = `/api/WordTutorialAdministration/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (wordTutorialCategoryId !== undefined) {
                localVarQueryParameter['WordTutorialCategoryId'] = wordTutorialCategoryId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Kelime eğitiminden bir çevirinin silinmesini sağlar.
         * @param {number} [wordTutorialTranslationId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTranslationFromTheWordTutorial: async (wordTutorialTranslationId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/WordTutorialAdministration/RemoveTranslation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (wordTutorialTranslationId !== undefined) {
                localVarQueryParameter['WordTutorialTranslationId'] = wordTutorialTranslationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Kelime eğitimi eklemeyi sağlar
         * @param {Array<WordTutorialAdministrationCommandsPostWordTutorialTranslation>} [wordTutorialAdministrationCommandsPostWordTutorialTranslation] 
         * @param {number} [wordTutorialId] 
         * @param {number} [wordTutorialCategoryId] 
         * @param {string} [slug] 
         * @param {string} [youtubeUrl] 
         * @param {string} [accent] 
         * @param {string} [languageLevel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWordTutorial: async (wordTutorialAdministrationCommandsPostWordTutorialTranslation?: Array<WordTutorialAdministrationCommandsPostWordTutorialTranslation>, wordTutorialId?: number, wordTutorialCategoryId?: number, slug?: string, youtubeUrl?: string, accent?: string, languageLevel?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/WordTutorialAdministration/Update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (wordTutorialId !== undefined) {
                localVarQueryParameter['WordTutorialId'] = wordTutorialId;
            }

            if (wordTutorialCategoryId !== undefined) {
                localVarQueryParameter['WordTutorialCategoryId'] = wordTutorialCategoryId;
            }

            if (slug !== undefined) {
                localVarQueryParameter['Slug'] = slug;
            }

            if (youtubeUrl !== undefined) {
                localVarQueryParameter['YoutubeUrl'] = youtubeUrl;
            }

            if (accent !== undefined) {
                localVarQueryParameter['Accent'] = accent;
            }

            if (languageLevel !== undefined) {
                localVarQueryParameter['LanguageLevel'] = languageLevel;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(wordTutorialAdministrationCommandsPostWordTutorialTranslation, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WordTutorialAdministrationApi - functional programming interface
 * @export
 */
export const WordTutorialAdministrationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WordTutorialAdministrationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Kelime eğitimine yeni bir çeviri ekler.
         * @param {number} [wordTutorialId] 
         * @param {string} [languageCode] 
         * @param {boolean} [isRtlLanguage] 
         * @param {string} [content] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addTranslationToTheWordTutorial(wordTutorialId?: number, languageCode?: string, isRtlLanguage?: boolean, content?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WordTutorialAdministrationCommandsAddTranslationCommandResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addTranslationToTheWordTutorial(wordTutorialId, languageCode, isRtlLanguage, content, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Kelime eğitimlerinin silinmesini sağlar
         * @param {Array<WordTutorialAdministrationCommandsDeleteWordTutorialList>} [wordTutorialAdministrationCommandsDeleteWordTutorialList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkDeleteWordTutorials(wordTutorialAdministrationCommandsDeleteWordTutorialList?: Array<WordTutorialAdministrationCommandsDeleteWordTutorialList>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkDeleteWordTutorials(wordTutorialAdministrationCommandsDeleteWordTutorialList, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Bir çevirinin içeriğinin değiştirilmesini sağlar.
         * @param {number} [wordTutorialId] 
         * @param {string} [translationLanguageCode] 
         * @param {string} [newContent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeTranslationContentOfTheWordTutorial(wordTutorialId?: number, translationLanguageCode?: string, newContent?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeTranslationContentOfTheWordTutorial(wordTutorialId, translationLanguageCode, newContent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Bir çevirinin yazım yönünü değiştirir.
         * @param {number} [wordTutorialTranslationId] 
         * @param {boolean} [isNewStateRightToLeft] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeTranslationTextDirectionOfTheWordTutorial(wordTutorialTranslationId?: number, isNewStateRightToLeft?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeTranslationTextDirectionOfTheWordTutorial(wordTutorialTranslationId, isNewStateRightToLeft, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Kelime eğitiminin youtube linkini değiştirmeyi sağlar
         * @param {number} [wordTutorialId] 
         * @param {string} [newYoutubeUrl] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeYoutubeUrlOfTheWordTutorial(wordTutorialId?: number, newYoutubeUrl?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WordTutorialAdministrationCommandsChangeYoutubeUrlCommandResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeYoutubeUrlOfTheWordTutorial(wordTutorialId, newYoutubeUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Kelime eğitimi eklemeyi sağlar
         * @param {Array<WordTutorialAdministrationCommandsPostWordTutorialTranslation>} [wordTutorialAdministrationCommandsPostWordTutorialTranslation] 
         * @param {number} [wordTutorialCategoryId] 
         * @param {string} [slug] 
         * @param {string} [youtubeUrl] 
         * @param {string} [accent] 
         * @param {string} [languageLevel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWordTutorial(wordTutorialAdministrationCommandsPostWordTutorialTranslation?: Array<WordTutorialAdministrationCommandsPostWordTutorialTranslation>, wordTutorialCategoryId?: number, slug?: string, youtubeUrl?: string, accent?: string, languageLevel?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WordTutorialAdministrationCommandsCreateCommandResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWordTutorial(wordTutorialAdministrationCommandsPostWordTutorialTranslation, wordTutorialCategoryId, slug, youtubeUrl, accent, languageLevel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Kelime eğitiminin silinmesini sağlar
         * @param {number} [wordTutorialId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWordTutorial(wordTutorialId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWordTutorial(wordTutorialId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Kelime eğitimlerini listelemeyi sağlar
         * @param {number} wordTutorialCategoryId Kelime eğitimi kategorisinin Id sini barındırır
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listWordTutorialsForAdministration(wordTutorialCategoryId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WordTutorialAdministrationQueriesListQueryResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listWordTutorialsForAdministration(wordTutorialCategoryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Kelime eğitiminden bir çevirinin silinmesini sağlar.
         * @param {number} [wordTutorialTranslationId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeTranslationFromTheWordTutorial(wordTutorialTranslationId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeTranslationFromTheWordTutorial(wordTutorialTranslationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Kelime eğitimi eklemeyi sağlar
         * @param {Array<WordTutorialAdministrationCommandsPostWordTutorialTranslation>} [wordTutorialAdministrationCommandsPostWordTutorialTranslation] 
         * @param {number} [wordTutorialId] 
         * @param {number} [wordTutorialCategoryId] 
         * @param {string} [slug] 
         * @param {string} [youtubeUrl] 
         * @param {string} [accent] 
         * @param {string} [languageLevel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWordTutorial(wordTutorialAdministrationCommandsPostWordTutorialTranslation?: Array<WordTutorialAdministrationCommandsPostWordTutorialTranslation>, wordTutorialId?: number, wordTutorialCategoryId?: number, slug?: string, youtubeUrl?: string, accent?: string, languageLevel?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WordTutorialAdministrationCommandsCreateCommandResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWordTutorial(wordTutorialAdministrationCommandsPostWordTutorialTranslation, wordTutorialId, wordTutorialCategoryId, slug, youtubeUrl, accent, languageLevel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WordTutorialAdministrationApi - factory interface
 * @export
 */
export const WordTutorialAdministrationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WordTutorialAdministrationApiFp(configuration)
    return {
        /**
         * 
         * @summary Kelime eğitimine yeni bir çeviri ekler.
         * @param {number} [wordTutorialId] 
         * @param {string} [languageCode] 
         * @param {boolean} [isRtlLanguage] 
         * @param {string} [content] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTranslationToTheWordTutorial(wordTutorialId?: number, languageCode?: string, isRtlLanguage?: boolean, content?: string, options?: any): AxiosPromise<WordTutorialAdministrationCommandsAddTranslationCommandResult> {
            return localVarFp.addTranslationToTheWordTutorial(wordTutorialId, languageCode, isRtlLanguage, content, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Kelime eğitimlerinin silinmesini sağlar
         * @param {Array<WordTutorialAdministrationCommandsDeleteWordTutorialList>} [wordTutorialAdministrationCommandsDeleteWordTutorialList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkDeleteWordTutorials(wordTutorialAdministrationCommandsDeleteWordTutorialList?: Array<WordTutorialAdministrationCommandsDeleteWordTutorialList>, options?: any): AxiosPromise<object> {
            return localVarFp.bulkDeleteWordTutorials(wordTutorialAdministrationCommandsDeleteWordTutorialList, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bir çevirinin içeriğinin değiştirilmesini sağlar.
         * @param {number} [wordTutorialId] 
         * @param {string} [translationLanguageCode] 
         * @param {string} [newContent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTranslationContentOfTheWordTutorial(wordTutorialId?: number, translationLanguageCode?: string, newContent?: string, options?: any): AxiosPromise<object> {
            return localVarFp.changeTranslationContentOfTheWordTutorial(wordTutorialId, translationLanguageCode, newContent, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bir çevirinin yazım yönünü değiştirir.
         * @param {number} [wordTutorialTranslationId] 
         * @param {boolean} [isNewStateRightToLeft] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTranslationTextDirectionOfTheWordTutorial(wordTutorialTranslationId?: number, isNewStateRightToLeft?: boolean, options?: any): AxiosPromise<object> {
            return localVarFp.changeTranslationTextDirectionOfTheWordTutorial(wordTutorialTranslationId, isNewStateRightToLeft, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Kelime eğitiminin youtube linkini değiştirmeyi sağlar
         * @param {number} [wordTutorialId] 
         * @param {string} [newYoutubeUrl] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeYoutubeUrlOfTheWordTutorial(wordTutorialId?: number, newYoutubeUrl?: string, options?: any): AxiosPromise<WordTutorialAdministrationCommandsChangeYoutubeUrlCommandResult> {
            return localVarFp.changeYoutubeUrlOfTheWordTutorial(wordTutorialId, newYoutubeUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Kelime eğitimi eklemeyi sağlar
         * @param {Array<WordTutorialAdministrationCommandsPostWordTutorialTranslation>} [wordTutorialAdministrationCommandsPostWordTutorialTranslation] 
         * @param {number} [wordTutorialCategoryId] 
         * @param {string} [slug] 
         * @param {string} [youtubeUrl] 
         * @param {string} [accent] 
         * @param {string} [languageLevel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWordTutorial(wordTutorialAdministrationCommandsPostWordTutorialTranslation?: Array<WordTutorialAdministrationCommandsPostWordTutorialTranslation>, wordTutorialCategoryId?: number, slug?: string, youtubeUrl?: string, accent?: string, languageLevel?: string, options?: any): AxiosPromise<WordTutorialAdministrationCommandsCreateCommandResult> {
            return localVarFp.createWordTutorial(wordTutorialAdministrationCommandsPostWordTutorialTranslation, wordTutorialCategoryId, slug, youtubeUrl, accent, languageLevel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Kelime eğitiminin silinmesini sağlar
         * @param {number} [wordTutorialId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWordTutorial(wordTutorialId?: number, options?: any): AxiosPromise<object> {
            return localVarFp.deleteWordTutorial(wordTutorialId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Kelime eğitimlerini listelemeyi sağlar
         * @param {number} wordTutorialCategoryId Kelime eğitimi kategorisinin Id sini barındırır
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWordTutorialsForAdministration(wordTutorialCategoryId: number, options?: any): AxiosPromise<WordTutorialAdministrationQueriesListQueryResult> {
            return localVarFp.listWordTutorialsForAdministration(wordTutorialCategoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Kelime eğitiminden bir çevirinin silinmesini sağlar.
         * @param {number} [wordTutorialTranslationId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTranslationFromTheWordTutorial(wordTutorialTranslationId?: number, options?: any): AxiosPromise<object> {
            return localVarFp.removeTranslationFromTheWordTutorial(wordTutorialTranslationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Kelime eğitimi eklemeyi sağlar
         * @param {Array<WordTutorialAdministrationCommandsPostWordTutorialTranslation>} [wordTutorialAdministrationCommandsPostWordTutorialTranslation] 
         * @param {number} [wordTutorialId] 
         * @param {number} [wordTutorialCategoryId] 
         * @param {string} [slug] 
         * @param {string} [youtubeUrl] 
         * @param {string} [accent] 
         * @param {string} [languageLevel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWordTutorial(wordTutorialAdministrationCommandsPostWordTutorialTranslation?: Array<WordTutorialAdministrationCommandsPostWordTutorialTranslation>, wordTutorialId?: number, wordTutorialCategoryId?: number, slug?: string, youtubeUrl?: string, accent?: string, languageLevel?: string, options?: any): AxiosPromise<WordTutorialAdministrationCommandsCreateCommandResult> {
            return localVarFp.updateWordTutorial(wordTutorialAdministrationCommandsPostWordTutorialTranslation, wordTutorialId, wordTutorialCategoryId, slug, youtubeUrl, accent, languageLevel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WordTutorialAdministrationApi - interface
 * @export
 * @interface WordTutorialAdministrationApi
 */
export interface WordTutorialAdministrationApiInterface {
    /**
     * 
     * @summary Kelime eğitimine yeni bir çeviri ekler.
     * @param {number} [wordTutorialId] 
     * @param {string} [languageCode] 
     * @param {boolean} [isRtlLanguage] 
     * @param {string} [content] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialAdministrationApiInterface
     */
    addTranslationToTheWordTutorial(wordTutorialId?: number, languageCode?: string, isRtlLanguage?: boolean, content?: string, options?: AxiosRequestConfig): AxiosPromise<WordTutorialAdministrationCommandsAddTranslationCommandResult>;

    /**
     * 
     * @summary Kelime eğitimlerinin silinmesini sağlar
     * @param {Array<WordTutorialAdministrationCommandsDeleteWordTutorialList>} [wordTutorialAdministrationCommandsDeleteWordTutorialList] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialAdministrationApiInterface
     */
    bulkDeleteWordTutorials(wordTutorialAdministrationCommandsDeleteWordTutorialList?: Array<WordTutorialAdministrationCommandsDeleteWordTutorialList>, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Bir çevirinin içeriğinin değiştirilmesini sağlar.
     * @param {number} [wordTutorialId] 
     * @param {string} [translationLanguageCode] 
     * @param {string} [newContent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialAdministrationApiInterface
     */
    changeTranslationContentOfTheWordTutorial(wordTutorialId?: number, translationLanguageCode?: string, newContent?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Bir çevirinin yazım yönünü değiştirir.
     * @param {number} [wordTutorialTranslationId] 
     * @param {boolean} [isNewStateRightToLeft] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialAdministrationApiInterface
     */
    changeTranslationTextDirectionOfTheWordTutorial(wordTutorialTranslationId?: number, isNewStateRightToLeft?: boolean, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Kelime eğitiminin youtube linkini değiştirmeyi sağlar
     * @param {number} [wordTutorialId] 
     * @param {string} [newYoutubeUrl] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialAdministrationApiInterface
     */
    changeYoutubeUrlOfTheWordTutorial(wordTutorialId?: number, newYoutubeUrl?: string, options?: AxiosRequestConfig): AxiosPromise<WordTutorialAdministrationCommandsChangeYoutubeUrlCommandResult>;

    /**
     * 
     * @summary Kelime eğitimi eklemeyi sağlar
     * @param {Array<WordTutorialAdministrationCommandsPostWordTutorialTranslation>} [wordTutorialAdministrationCommandsPostWordTutorialTranslation] 
     * @param {number} [wordTutorialCategoryId] 
     * @param {string} [slug] 
     * @param {string} [youtubeUrl] 
     * @param {string} [accent] 
     * @param {string} [languageLevel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialAdministrationApiInterface
     */
    createWordTutorial(wordTutorialAdministrationCommandsPostWordTutorialTranslation?: Array<WordTutorialAdministrationCommandsPostWordTutorialTranslation>, wordTutorialCategoryId?: number, slug?: string, youtubeUrl?: string, accent?: string, languageLevel?: string, options?: AxiosRequestConfig): AxiosPromise<WordTutorialAdministrationCommandsCreateCommandResult>;

    /**
     * 
     * @summary Kelime eğitiminin silinmesini sağlar
     * @param {number} [wordTutorialId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialAdministrationApiInterface
     */
    deleteWordTutorial(wordTutorialId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Kelime eğitimlerini listelemeyi sağlar
     * @param {number} wordTutorialCategoryId Kelime eğitimi kategorisinin Id sini barındırır
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialAdministrationApiInterface
     */
    listWordTutorialsForAdministration(wordTutorialCategoryId: number, options?: AxiosRequestConfig): AxiosPromise<WordTutorialAdministrationQueriesListQueryResult>;

    /**
     * 
     * @summary Kelime eğitiminden bir çevirinin silinmesini sağlar.
     * @param {number} [wordTutorialTranslationId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialAdministrationApiInterface
     */
    removeTranslationFromTheWordTutorial(wordTutorialTranslationId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Kelime eğitimi eklemeyi sağlar
     * @param {Array<WordTutorialAdministrationCommandsPostWordTutorialTranslation>} [wordTutorialAdministrationCommandsPostWordTutorialTranslation] 
     * @param {number} [wordTutorialId] 
     * @param {number} [wordTutorialCategoryId] 
     * @param {string} [slug] 
     * @param {string} [youtubeUrl] 
     * @param {string} [accent] 
     * @param {string} [languageLevel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialAdministrationApiInterface
     */
    updateWordTutorial(wordTutorialAdministrationCommandsPostWordTutorialTranslation?: Array<WordTutorialAdministrationCommandsPostWordTutorialTranslation>, wordTutorialId?: number, wordTutorialCategoryId?: number, slug?: string, youtubeUrl?: string, accent?: string, languageLevel?: string, options?: AxiosRequestConfig): AxiosPromise<WordTutorialAdministrationCommandsCreateCommandResult>;

}

/**
 * WordTutorialAdministrationApi - object-oriented interface
 * @export
 * @class WordTutorialAdministrationApi
 * @extends {BaseAPI}
 */
export class WordTutorialAdministrationApi extends BaseAPI implements WordTutorialAdministrationApiInterface {
    /**
     * 
     * @summary Kelime eğitimine yeni bir çeviri ekler.
     * @param {number} [wordTutorialId] 
     * @param {string} [languageCode] 
     * @param {boolean} [isRtlLanguage] 
     * @param {string} [content] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialAdministrationApi
     */
    public addTranslationToTheWordTutorial(wordTutorialId?: number, languageCode?: string, isRtlLanguage?: boolean, content?: string, options?: AxiosRequestConfig) {
        return WordTutorialAdministrationApiFp(this.configuration).addTranslationToTheWordTutorial(wordTutorialId, languageCode, isRtlLanguage, content, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Kelime eğitimlerinin silinmesini sağlar
     * @param {Array<WordTutorialAdministrationCommandsDeleteWordTutorialList>} [wordTutorialAdministrationCommandsDeleteWordTutorialList] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialAdministrationApi
     */
    public bulkDeleteWordTutorials(wordTutorialAdministrationCommandsDeleteWordTutorialList?: Array<WordTutorialAdministrationCommandsDeleteWordTutorialList>, options?: AxiosRequestConfig) {
        return WordTutorialAdministrationApiFp(this.configuration).bulkDeleteWordTutorials(wordTutorialAdministrationCommandsDeleteWordTutorialList, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bir çevirinin içeriğinin değiştirilmesini sağlar.
     * @param {number} [wordTutorialId] 
     * @param {string} [translationLanguageCode] 
     * @param {string} [newContent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialAdministrationApi
     */
    public changeTranslationContentOfTheWordTutorial(wordTutorialId?: number, translationLanguageCode?: string, newContent?: string, options?: AxiosRequestConfig) {
        return WordTutorialAdministrationApiFp(this.configuration).changeTranslationContentOfTheWordTutorial(wordTutorialId, translationLanguageCode, newContent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bir çevirinin yazım yönünü değiştirir.
     * @param {number} [wordTutorialTranslationId] 
     * @param {boolean} [isNewStateRightToLeft] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialAdministrationApi
     */
    public changeTranslationTextDirectionOfTheWordTutorial(wordTutorialTranslationId?: number, isNewStateRightToLeft?: boolean, options?: AxiosRequestConfig) {
        return WordTutorialAdministrationApiFp(this.configuration).changeTranslationTextDirectionOfTheWordTutorial(wordTutorialTranslationId, isNewStateRightToLeft, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Kelime eğitiminin youtube linkini değiştirmeyi sağlar
     * @param {number} [wordTutorialId] 
     * @param {string} [newYoutubeUrl] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialAdministrationApi
     */
    public changeYoutubeUrlOfTheWordTutorial(wordTutorialId?: number, newYoutubeUrl?: string, options?: AxiosRequestConfig) {
        return WordTutorialAdministrationApiFp(this.configuration).changeYoutubeUrlOfTheWordTutorial(wordTutorialId, newYoutubeUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Kelime eğitimi eklemeyi sağlar
     * @param {Array<WordTutorialAdministrationCommandsPostWordTutorialTranslation>} [wordTutorialAdministrationCommandsPostWordTutorialTranslation] 
     * @param {number} [wordTutorialCategoryId] 
     * @param {string} [slug] 
     * @param {string} [youtubeUrl] 
     * @param {string} [accent] 
     * @param {string} [languageLevel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialAdministrationApi
     */
    public createWordTutorial(wordTutorialAdministrationCommandsPostWordTutorialTranslation?: Array<WordTutorialAdministrationCommandsPostWordTutorialTranslation>, wordTutorialCategoryId?: number, slug?: string, youtubeUrl?: string, accent?: string, languageLevel?: string, options?: AxiosRequestConfig) {
        return WordTutorialAdministrationApiFp(this.configuration).createWordTutorial(wordTutorialAdministrationCommandsPostWordTutorialTranslation, wordTutorialCategoryId, slug, youtubeUrl, accent, languageLevel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Kelime eğitiminin silinmesini sağlar
     * @param {number} [wordTutorialId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialAdministrationApi
     */
    public deleteWordTutorial(wordTutorialId?: number, options?: AxiosRequestConfig) {
        return WordTutorialAdministrationApiFp(this.configuration).deleteWordTutorial(wordTutorialId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Kelime eğitimlerini listelemeyi sağlar
     * @param {number} wordTutorialCategoryId Kelime eğitimi kategorisinin Id sini barındırır
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialAdministrationApi
     */
    public listWordTutorialsForAdministration(wordTutorialCategoryId: number, options?: AxiosRequestConfig) {
        return WordTutorialAdministrationApiFp(this.configuration).listWordTutorialsForAdministration(wordTutorialCategoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Kelime eğitiminden bir çevirinin silinmesini sağlar.
     * @param {number} [wordTutorialTranslationId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialAdministrationApi
     */
    public removeTranslationFromTheWordTutorial(wordTutorialTranslationId?: number, options?: AxiosRequestConfig) {
        return WordTutorialAdministrationApiFp(this.configuration).removeTranslationFromTheWordTutorial(wordTutorialTranslationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Kelime eğitimi eklemeyi sağlar
     * @param {Array<WordTutorialAdministrationCommandsPostWordTutorialTranslation>} [wordTutorialAdministrationCommandsPostWordTutorialTranslation] 
     * @param {number} [wordTutorialId] 
     * @param {number} [wordTutorialCategoryId] 
     * @param {string} [slug] 
     * @param {string} [youtubeUrl] 
     * @param {string} [accent] 
     * @param {string} [languageLevel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialAdministrationApi
     */
    public updateWordTutorial(wordTutorialAdministrationCommandsPostWordTutorialTranslation?: Array<WordTutorialAdministrationCommandsPostWordTutorialTranslation>, wordTutorialId?: number, wordTutorialCategoryId?: number, slug?: string, youtubeUrl?: string, accent?: string, languageLevel?: string, options?: AxiosRequestConfig) {
        return WordTutorialAdministrationApiFp(this.configuration).updateWordTutorial(wordTutorialAdministrationCommandsPostWordTutorialTranslation, wordTutorialId, wordTutorialCategoryId, slug, youtubeUrl, accent, languageLevel, options).then((request) => request(this.axios, this.basePath));
    }
}

