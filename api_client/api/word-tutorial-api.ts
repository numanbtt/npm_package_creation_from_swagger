/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FluentValidationResultsValidationFailure } from '../models';
// @ts-ignore
import { WordTutorialQueriesListMyFavoritesQueryResult } from '../models';
/**
 * WordTutorialApi - axios parameter creator
 * @export
 */
export const WordTutorialApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Kullanıcının kelime eğitimini favori olarak işaretlemesini sağlar.
         * @param {number} [wordTutorialId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        favoriteWordTutorial: async (wordTutorialId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/WordTutorial/Favorite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (wordTutorialId !== undefined) {
                localVarQueryParameter['WordTutorialId'] = wordTutorialId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Kullanıcının kelime eğitimini beğenmesini sağlar.
         * @param {number} [wordTutorialId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        likeWordTutorial: async (wordTutorialId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/WordTutorial/Like`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (wordTutorialId !== undefined) {
                localVarQueryParameter['WordTutorialId'] = wordTutorialId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Kişinin favori olarak kaydettiği kelimeleri listeler
         * @param {number} [lastId] 
         * @param {string} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMyFavoriteWordTutorials: async (lastId?: number, query?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/WordTutorial/ListMyFavorites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (lastId !== undefined) {
                localVarQueryParameter['LastId'] = lastId;
            }

            if (query !== undefined) {
                localVarQueryParameter['Query'] = query;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Kullanıcının kelime eğitimini favorilerinden çıkartmasını sağlar.
         * @param {number} [wordTutorialId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unfavoriteWordTutorial: async (wordTutorialId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/WordTutorial/Unfavorite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (wordTutorialId !== undefined) {
                localVarQueryParameter['WordTutorialId'] = wordTutorialId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Kullanıcının kelime eğitimini beğenmesini sağlar.
         * @param {number} [wordTutorialId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlikeWordTutorial: async (wordTutorialId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/WordTutorial/Unlike`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (wordTutorialId !== undefined) {
                localVarQueryParameter['WordTutorialId'] = wordTutorialId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Kullanıcı tarafından gerçekleştirilen kelime eğitimi paylaşımını sunucuya bildirir.
         * @param {number} [wordTutorialId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordTutorialShared: async (wordTutorialId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/WordTutorial/Share`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (wordTutorialId !== undefined) {
                localVarQueryParameter['WordTutorialId'] = wordTutorialId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Kullanıcının izlediği videoyu sunucuya bildirir.
         * @param {number} [wordTutorialId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordTutorialVideoWatched: async (wordTutorialId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/WordTutorial/VideoWatched`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (wordTutorialId !== undefined) {
                localVarQueryParameter['WordTutorialId'] = wordTutorialId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WordTutorialApi - functional programming interface
 * @export
 */
export const WordTutorialApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WordTutorialApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Kullanıcının kelime eğitimini favori olarak işaretlemesini sağlar.
         * @param {number} [wordTutorialId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async favoriteWordTutorial(wordTutorialId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.favoriteWordTutorial(wordTutorialId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Kullanıcının kelime eğitimini beğenmesini sağlar.
         * @param {number} [wordTutorialId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async likeWordTutorial(wordTutorialId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.likeWordTutorial(wordTutorialId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Kişinin favori olarak kaydettiği kelimeleri listeler
         * @param {number} [lastId] 
         * @param {string} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMyFavoriteWordTutorials(lastId?: number, query?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WordTutorialQueriesListMyFavoritesQueryResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMyFavoriteWordTutorials(lastId, query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Kullanıcının kelime eğitimini favorilerinden çıkartmasını sağlar.
         * @param {number} [wordTutorialId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unfavoriteWordTutorial(wordTutorialId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unfavoriteWordTutorial(wordTutorialId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Kullanıcının kelime eğitimini beğenmesini sağlar.
         * @param {number} [wordTutorialId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unlikeWordTutorial(wordTutorialId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unlikeWordTutorial(wordTutorialId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Kullanıcı tarafından gerçekleştirilen kelime eğitimi paylaşımını sunucuya bildirir.
         * @param {number} [wordTutorialId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wordTutorialShared(wordTutorialId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.wordTutorialShared(wordTutorialId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Kullanıcının izlediği videoyu sunucuya bildirir.
         * @param {number} [wordTutorialId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wordTutorialVideoWatched(wordTutorialId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.wordTutorialVideoWatched(wordTutorialId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WordTutorialApi - factory interface
 * @export
 */
export const WordTutorialApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WordTutorialApiFp(configuration)
    return {
        /**
         * 
         * @summary Kullanıcının kelime eğitimini favori olarak işaretlemesini sağlar.
         * @param {number} [wordTutorialId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        favoriteWordTutorial(wordTutorialId?: number, options?: any): AxiosPromise<object> {
            return localVarFp.favoriteWordTutorial(wordTutorialId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Kullanıcının kelime eğitimini beğenmesini sağlar.
         * @param {number} [wordTutorialId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        likeWordTutorial(wordTutorialId?: number, options?: any): AxiosPromise<object> {
            return localVarFp.likeWordTutorial(wordTutorialId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Kişinin favori olarak kaydettiği kelimeleri listeler
         * @param {number} [lastId] 
         * @param {string} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMyFavoriteWordTutorials(lastId?: number, query?: string, options?: any): AxiosPromise<WordTutorialQueriesListMyFavoritesQueryResult> {
            return localVarFp.listMyFavoriteWordTutorials(lastId, query, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Kullanıcının kelime eğitimini favorilerinden çıkartmasını sağlar.
         * @param {number} [wordTutorialId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unfavoriteWordTutorial(wordTutorialId?: number, options?: any): AxiosPromise<object> {
            return localVarFp.unfavoriteWordTutorial(wordTutorialId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Kullanıcının kelime eğitimini beğenmesini sağlar.
         * @param {number} [wordTutorialId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlikeWordTutorial(wordTutorialId?: number, options?: any): AxiosPromise<object> {
            return localVarFp.unlikeWordTutorial(wordTutorialId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Kullanıcı tarafından gerçekleştirilen kelime eğitimi paylaşımını sunucuya bildirir.
         * @param {number} [wordTutorialId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordTutorialShared(wordTutorialId?: number, options?: any): AxiosPromise<object> {
            return localVarFp.wordTutorialShared(wordTutorialId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Kullanıcının izlediği videoyu sunucuya bildirir.
         * @param {number} [wordTutorialId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordTutorialVideoWatched(wordTutorialId?: number, options?: any): AxiosPromise<object> {
            return localVarFp.wordTutorialVideoWatched(wordTutorialId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WordTutorialApi - interface
 * @export
 * @interface WordTutorialApi
 */
export interface WordTutorialApiInterface {
    /**
     * 
     * @summary Kullanıcının kelime eğitimini favori olarak işaretlemesini sağlar.
     * @param {number} [wordTutorialId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialApiInterface
     */
    favoriteWordTutorial(wordTutorialId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Kullanıcının kelime eğitimini beğenmesini sağlar.
     * @param {number} [wordTutorialId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialApiInterface
     */
    likeWordTutorial(wordTutorialId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Kişinin favori olarak kaydettiği kelimeleri listeler
     * @param {number} [lastId] 
     * @param {string} [query] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialApiInterface
     */
    listMyFavoriteWordTutorials(lastId?: number, query?: string, options?: AxiosRequestConfig): AxiosPromise<WordTutorialQueriesListMyFavoritesQueryResult>;

    /**
     * 
     * @summary Kullanıcının kelime eğitimini favorilerinden çıkartmasını sağlar.
     * @param {number} [wordTutorialId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialApiInterface
     */
    unfavoriteWordTutorial(wordTutorialId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Kullanıcının kelime eğitimini beğenmesini sağlar.
     * @param {number} [wordTutorialId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialApiInterface
     */
    unlikeWordTutorial(wordTutorialId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Kullanıcı tarafından gerçekleştirilen kelime eğitimi paylaşımını sunucuya bildirir.
     * @param {number} [wordTutorialId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialApiInterface
     */
    wordTutorialShared(wordTutorialId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Kullanıcının izlediği videoyu sunucuya bildirir.
     * @param {number} [wordTutorialId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialApiInterface
     */
    wordTutorialVideoWatched(wordTutorialId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;

}

/**
 * WordTutorialApi - object-oriented interface
 * @export
 * @class WordTutorialApi
 * @extends {BaseAPI}
 */
export class WordTutorialApi extends BaseAPI implements WordTutorialApiInterface {
    /**
     * 
     * @summary Kullanıcının kelime eğitimini favori olarak işaretlemesini sağlar.
     * @param {number} [wordTutorialId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialApi
     */
    public favoriteWordTutorial(wordTutorialId?: number, options?: AxiosRequestConfig) {
        return WordTutorialApiFp(this.configuration).favoriteWordTutorial(wordTutorialId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Kullanıcının kelime eğitimini beğenmesini sağlar.
     * @param {number} [wordTutorialId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialApi
     */
    public likeWordTutorial(wordTutorialId?: number, options?: AxiosRequestConfig) {
        return WordTutorialApiFp(this.configuration).likeWordTutorial(wordTutorialId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Kişinin favori olarak kaydettiği kelimeleri listeler
     * @param {number} [lastId] 
     * @param {string} [query] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialApi
     */
    public listMyFavoriteWordTutorials(lastId?: number, query?: string, options?: AxiosRequestConfig) {
        return WordTutorialApiFp(this.configuration).listMyFavoriteWordTutorials(lastId, query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Kullanıcının kelime eğitimini favorilerinden çıkartmasını sağlar.
     * @param {number} [wordTutorialId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialApi
     */
    public unfavoriteWordTutorial(wordTutorialId?: number, options?: AxiosRequestConfig) {
        return WordTutorialApiFp(this.configuration).unfavoriteWordTutorial(wordTutorialId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Kullanıcının kelime eğitimini beğenmesini sağlar.
     * @param {number} [wordTutorialId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialApi
     */
    public unlikeWordTutorial(wordTutorialId?: number, options?: AxiosRequestConfig) {
        return WordTutorialApiFp(this.configuration).unlikeWordTutorial(wordTutorialId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Kullanıcı tarafından gerçekleştirilen kelime eğitimi paylaşımını sunucuya bildirir.
     * @param {number} [wordTutorialId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialApi
     */
    public wordTutorialShared(wordTutorialId?: number, options?: AxiosRequestConfig) {
        return WordTutorialApiFp(this.configuration).wordTutorialShared(wordTutorialId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Kullanıcının izlediği videoyu sunucuya bildirir.
     * @param {number} [wordTutorialId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialApi
     */
    public wordTutorialVideoWatched(wordTutorialId?: number, options?: AxiosRequestConfig) {
        return WordTutorialApiFp(this.configuration).wordTutorialVideoWatched(wordTutorialId, options).then((request) => request(this.axios, this.basePath));
    }
}

