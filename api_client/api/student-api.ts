/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FluentValidationResultsValidationFailure } from '../models';
// @ts-ignore
import { StudentCommandsLoginWithDirectAuthCommandResult } from '../models';
// @ts-ignore
import { StudentCommandsRegisterCommandResult } from '../models';
// @ts-ignore
import { StudentCommandsStartToExportMyAllInformationsCommandResult } from '../models';
// @ts-ignore
import { StudentCommandsUpdateMySpecalitiesParemeters } from '../models';
// @ts-ignore
import { StudentCommandsUpdateProfilePhotoCommandResult } from '../models';
// @ts-ignore
import { StudentQueriesGetDetailsQueryResult } from '../models';
// @ts-ignore
import { StudentQueriesGetMyDetailsQueryResult } from '../models';
// @ts-ignore
import { StudentQueriesListMyExportsQueryResult } from '../models';
/**
 * StudentApi - axios parameter creator
 * @export
 */
export const StudentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Öğretmenin öğrenciyi engellemesini sağlar.
         * @param {number} [studentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blockStudent: async (studentId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Student/Block`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (studentId !== undefined) {
                localVarQueryParameter['StudentId'] = studentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğrencinin kendi e-posta adresini değiştirebilmesini sağlar.
         * @param {string} [newEmail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeMyEmailAddress: async (newEmail?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Student/ChangeMyEmailAddress`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (newEmail !== undefined) {
                localVarQueryParameter['NewEmail'] = newEmail;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğrencinin kendi ismini değiştirebilmesini sağlar.
         * @param {string} [newName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeMyName: async (newName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Student/ChangeMyName`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (newName !== undefined) {
                localVarQueryParameter['NewName'] = newName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğrencinin kendi telefon numarasını değiştirebilmesini sağlar.
         * @param {string} [newPhone] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeMyPhoneNumber: async (newPhone?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Student/ChangeMyPhoneNumber`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (newPhone !== undefined) {
                localVarQueryParameter['NewPhone'] = newPhone;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğrencinin hesabının silme isteğini admine mail olarak iletir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMyAccountAsStudent: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Student/DeleteMyAccount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğrencinin kendi detayını getirir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyDetailsAsStudent: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Student/GetMyDetails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğrencinin detayını getirir.
         * @param {number} studentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentDetails: async (studentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studentId' is not null or undefined
            assertParamExists('getStudentDetails', 'studentId', studentId)
            const localVarPath = `/api/Student/GetDetails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (studentId !== undefined) {
                localVarQueryParameter['StudentId'] = studentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğrencinin dışa aktarılmaya hazır verilerini listeler.
         * @param {string} [lastCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMyExportsAsStudent: async (lastCreatedAt?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Student/ListMyExports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (lastCreatedAt !== undefined) {
                localVarQueryParameter['LastCreatedAt'] = (lastCreatedAt as any instanceof Date) ?
                    (lastCreatedAt as any).toISOString() :
                    lastCreatedAt;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [nameSurname] 
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginGoogleAsStudent: async (nameSurname?: string, email?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Student/LoginGoogleStudent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nameSurname !== undefined) {
                localVarQueryParameter['NameSurname'] = nameSurname;
            }

            if (email !== undefined) {
                localVarQueryParameter['Email'] = email;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Apple login işlevini öğrenci hesabı için gerçekleştirir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginWithAppleAsStudent: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Student/LoginWithApple`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğrenci olarak giriş yapmayı sağlar.
         * @param {string} [email] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginWithDirectAuthAsStudent: async (email?: string, password?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Student/LoginWithDirectAuth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['Email'] = email;
            }

            if (password !== undefined) {
                localVarQueryParameter['Password'] = password;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Facebook login işlevini öğrenci hesabı için gerçekleştirir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginWithFacebookAsStudent: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Student/LoginWithFacebook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Google login işlevini öğrenci hesabı için gerçekleştirir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginWithGoogleAsStudent: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Student/LoginWithGoogle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary E-posta ve şifre ile öğrenci kaydı yapılabilmesini sağlar.
         * @param {string} [nameSurname] 
         * @param {string} [email] 
         * @param {string} [phoneNumber] 
         * @param {string} [password] 
         * @param {string} [accent] 
         * @param {string} [languageLevel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerAsStudent: async (nameSurname?: string, email?: string, phoneNumber?: string, password?: string, accent?: string, languageLevel?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Student/Register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nameSurname !== undefined) {
                localVarQueryParameter['NameSurname'] = nameSurname;
            }

            if (email !== undefined) {
                localVarQueryParameter['Email'] = email;
            }

            if (phoneNumber !== undefined) {
                localVarQueryParameter['PhoneNumber'] = phoneNumber;
            }

            if (password !== undefined) {
                localVarQueryParameter['Password'] = password;
            }

            if (accent !== undefined) {
                localVarQueryParameter['Accent'] = accent;
            }

            if (languageLevel !== undefined) {
                localVarQueryParameter['LanguageLevel'] = languageLevel;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğretmenin öğrenciyi rapor etmesini sağlar.
         * @param {number} [studentId] 
         * @param {string} [content] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportStudent: async (studentId?: number, content?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Student/Report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (studentId !== undefined) {
                localVarQueryParameter['StudentId'] = studentId;
            }

            if (content !== undefined) {
                localVarQueryParameter['Content'] = content;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğrencinin tüm verisini dışarı aktarma işlemini başlatır. Halihazırda dışa aktarım dosyaları hazırlanıyorsa hata vermelidir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startToExportMyAllInformationsAsStudent: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Student/StartToExportMyAllInformations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğretmenin öğrencinin engelini kaldırmasını sağlar.
         * @param {number} [studentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unblockStudent: async (studentId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Student/Unblock`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (studentId !== undefined) {
                localVarQueryParameter['StudentId'] = studentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Öğrencinin profil fotoğrafını değiştirmesini sağlar.
         * @param {File} [photo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfilePhotoAsStudent: async (photo?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Student/UpdateProfilePhoto`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (photo !== undefined) { 
                localVarFormParams.append('Photo', photo as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {StudentCommandsUpdateMySpecalitiesParemeters} [studentCommandsUpdateMySpecalitiesParemeters] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStudentSpecalities: async (studentCommandsUpdateMySpecalitiesParemeters?: StudentCommandsUpdateMySpecalitiesParemeters, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Student/UpdateStudentSpecalities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(studentCommandsUpdateMySpecalitiesParemeters, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StudentApi - functional programming interface
 * @export
 */
export const StudentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StudentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Öğretmenin öğrenciyi engellemesini sağlar.
         * @param {number} [studentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blockStudent(studentId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blockStudent(studentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğrencinin kendi e-posta adresini değiştirebilmesini sağlar.
         * @param {string} [newEmail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeMyEmailAddress(newEmail?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeMyEmailAddress(newEmail, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğrencinin kendi ismini değiştirebilmesini sağlar.
         * @param {string} [newName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeMyName(newName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeMyName(newName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğrencinin kendi telefon numarasını değiştirebilmesini sağlar.
         * @param {string} [newPhone] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeMyPhoneNumber(newPhone?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeMyPhoneNumber(newPhone, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğrencinin hesabının silme isteğini admine mail olarak iletir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMyAccountAsStudent(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMyAccountAsStudent(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğrencinin kendi detayını getirir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyDetailsAsStudent(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentQueriesGetMyDetailsQueryResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyDetailsAsStudent(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğrencinin detayını getirir.
         * @param {number} studentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStudentDetails(studentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentQueriesGetDetailsQueryResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStudentDetails(studentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğrencinin dışa aktarılmaya hazır verilerini listeler.
         * @param {string} [lastCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMyExportsAsStudent(lastCreatedAt?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentQueriesListMyExportsQueryResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMyExportsAsStudent(lastCreatedAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [nameSurname] 
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginGoogleAsStudent(nameSurname?: string, email?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentCommandsRegisterCommandResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginGoogleAsStudent(nameSurname, email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Apple login işlevini öğrenci hesabı için gerçekleştirir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginWithAppleAsStudent(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginWithAppleAsStudent(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğrenci olarak giriş yapmayı sağlar.
         * @param {string} [email] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginWithDirectAuthAsStudent(email?: string, password?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentCommandsLoginWithDirectAuthCommandResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginWithDirectAuthAsStudent(email, password, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Facebook login işlevini öğrenci hesabı için gerçekleştirir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginWithFacebookAsStudent(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginWithFacebookAsStudent(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Google login işlevini öğrenci hesabı için gerçekleştirir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginWithGoogleAsStudent(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginWithGoogleAsStudent(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary E-posta ve şifre ile öğrenci kaydı yapılabilmesini sağlar.
         * @param {string} [nameSurname] 
         * @param {string} [email] 
         * @param {string} [phoneNumber] 
         * @param {string} [password] 
         * @param {string} [accent] 
         * @param {string} [languageLevel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerAsStudent(nameSurname?: string, email?: string, phoneNumber?: string, password?: string, accent?: string, languageLevel?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentCommandsRegisterCommandResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerAsStudent(nameSurname, email, phoneNumber, password, accent, languageLevel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğretmenin öğrenciyi rapor etmesini sağlar.
         * @param {number} [studentId] 
         * @param {string} [content] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportStudent(studentId?: number, content?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportStudent(studentId, content, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğrencinin tüm verisini dışarı aktarma işlemini başlatır. Halihazırda dışa aktarım dosyaları hazırlanıyorsa hata vermelidir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startToExportMyAllInformationsAsStudent(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentCommandsStartToExportMyAllInformationsCommandResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startToExportMyAllInformationsAsStudent(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğretmenin öğrencinin engelini kaldırmasını sağlar.
         * @param {number} [studentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unblockStudent(studentId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unblockStudent(studentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Öğrencinin profil fotoğrafını değiştirmesini sağlar.
         * @param {File} [photo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProfilePhotoAsStudent(photo?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentCommandsUpdateProfilePhotoCommandResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProfilePhotoAsStudent(photo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {StudentCommandsUpdateMySpecalitiesParemeters} [studentCommandsUpdateMySpecalitiesParemeters] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStudentSpecalities(studentCommandsUpdateMySpecalitiesParemeters?: StudentCommandsUpdateMySpecalitiesParemeters, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStudentSpecalities(studentCommandsUpdateMySpecalitiesParemeters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StudentApi - factory interface
 * @export
 */
export const StudentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StudentApiFp(configuration)
    return {
        /**
         * 
         * @summary Öğretmenin öğrenciyi engellemesini sağlar.
         * @param {number} [studentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blockStudent(studentId?: number, options?: any): AxiosPromise<object> {
            return localVarFp.blockStudent(studentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğrencinin kendi e-posta adresini değiştirebilmesini sağlar.
         * @param {string} [newEmail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeMyEmailAddress(newEmail?: string, options?: any): AxiosPromise<object> {
            return localVarFp.changeMyEmailAddress(newEmail, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğrencinin kendi ismini değiştirebilmesini sağlar.
         * @param {string} [newName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeMyName(newName?: string, options?: any): AxiosPromise<object> {
            return localVarFp.changeMyName(newName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğrencinin kendi telefon numarasını değiştirebilmesini sağlar.
         * @param {string} [newPhone] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeMyPhoneNumber(newPhone?: string, options?: any): AxiosPromise<object> {
            return localVarFp.changeMyPhoneNumber(newPhone, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğrencinin hesabının silme isteğini admine mail olarak iletir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMyAccountAsStudent(options?: any): AxiosPromise<object> {
            return localVarFp.deleteMyAccountAsStudent(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğrencinin kendi detayını getirir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyDetailsAsStudent(options?: any): AxiosPromise<StudentQueriesGetMyDetailsQueryResult> {
            return localVarFp.getMyDetailsAsStudent(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğrencinin detayını getirir.
         * @param {number} studentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentDetails(studentId: number, options?: any): AxiosPromise<StudentQueriesGetDetailsQueryResult> {
            return localVarFp.getStudentDetails(studentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğrencinin dışa aktarılmaya hazır verilerini listeler.
         * @param {string} [lastCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMyExportsAsStudent(lastCreatedAt?: string, options?: any): AxiosPromise<StudentQueriesListMyExportsQueryResult> {
            return localVarFp.listMyExportsAsStudent(lastCreatedAt, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [nameSurname] 
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginGoogleAsStudent(nameSurname?: string, email?: string, options?: any): AxiosPromise<StudentCommandsRegisterCommandResult> {
            return localVarFp.loginGoogleAsStudent(nameSurname, email, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Apple login işlevini öğrenci hesabı için gerçekleştirir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginWithAppleAsStudent(options?: any): AxiosPromise<void> {
            return localVarFp.loginWithAppleAsStudent(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğrenci olarak giriş yapmayı sağlar.
         * @param {string} [email] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginWithDirectAuthAsStudent(email?: string, password?: string, options?: any): AxiosPromise<StudentCommandsLoginWithDirectAuthCommandResult> {
            return localVarFp.loginWithDirectAuthAsStudent(email, password, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Facebook login işlevini öğrenci hesabı için gerçekleştirir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginWithFacebookAsStudent(options?: any): AxiosPromise<void> {
            return localVarFp.loginWithFacebookAsStudent(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Google login işlevini öğrenci hesabı için gerçekleştirir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginWithGoogleAsStudent(options?: any): AxiosPromise<void> {
            return localVarFp.loginWithGoogleAsStudent(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary E-posta ve şifre ile öğrenci kaydı yapılabilmesini sağlar.
         * @param {string} [nameSurname] 
         * @param {string} [email] 
         * @param {string} [phoneNumber] 
         * @param {string} [password] 
         * @param {string} [accent] 
         * @param {string} [languageLevel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerAsStudent(nameSurname?: string, email?: string, phoneNumber?: string, password?: string, accent?: string, languageLevel?: string, options?: any): AxiosPromise<StudentCommandsRegisterCommandResult> {
            return localVarFp.registerAsStudent(nameSurname, email, phoneNumber, password, accent, languageLevel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğretmenin öğrenciyi rapor etmesini sağlar.
         * @param {number} [studentId] 
         * @param {string} [content] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportStudent(studentId?: number, content?: string, options?: any): AxiosPromise<object> {
            return localVarFp.reportStudent(studentId, content, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğrencinin tüm verisini dışarı aktarma işlemini başlatır. Halihazırda dışa aktarım dosyaları hazırlanıyorsa hata vermelidir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startToExportMyAllInformationsAsStudent(options?: any): AxiosPromise<StudentCommandsStartToExportMyAllInformationsCommandResult> {
            return localVarFp.startToExportMyAllInformationsAsStudent(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğretmenin öğrencinin engelini kaldırmasını sağlar.
         * @param {number} [studentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unblockStudent(studentId?: number, options?: any): AxiosPromise<object> {
            return localVarFp.unblockStudent(studentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Öğrencinin profil fotoğrafını değiştirmesini sağlar.
         * @param {File} [photo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfilePhotoAsStudent(photo?: File, options?: any): AxiosPromise<StudentCommandsUpdateProfilePhotoCommandResult> {
            return localVarFp.updateProfilePhotoAsStudent(photo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {StudentCommandsUpdateMySpecalitiesParemeters} [studentCommandsUpdateMySpecalitiesParemeters] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStudentSpecalities(studentCommandsUpdateMySpecalitiesParemeters?: StudentCommandsUpdateMySpecalitiesParemeters, options?: any): AxiosPromise<object> {
            return localVarFp.updateStudentSpecalities(studentCommandsUpdateMySpecalitiesParemeters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StudentApi - interface
 * @export
 * @interface StudentApi
 */
export interface StudentApiInterface {
    /**
     * 
     * @summary Öğretmenin öğrenciyi engellemesini sağlar.
     * @param {number} [studentId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApiInterface
     */
    blockStudent(studentId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Öğrencinin kendi e-posta adresini değiştirebilmesini sağlar.
     * @param {string} [newEmail] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApiInterface
     */
    changeMyEmailAddress(newEmail?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Öğrencinin kendi ismini değiştirebilmesini sağlar.
     * @param {string} [newName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApiInterface
     */
    changeMyName(newName?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Öğrencinin kendi telefon numarasını değiştirebilmesini sağlar.
     * @param {string} [newPhone] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApiInterface
     */
    changeMyPhoneNumber(newPhone?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Öğrencinin hesabının silme isteğini admine mail olarak iletir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApiInterface
     */
    deleteMyAccountAsStudent(options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Öğrencinin kendi detayını getirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApiInterface
     */
    getMyDetailsAsStudent(options?: AxiosRequestConfig): AxiosPromise<StudentQueriesGetMyDetailsQueryResult>;

    /**
     * 
     * @summary Öğrencinin detayını getirir.
     * @param {number} studentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApiInterface
     */
    getStudentDetails(studentId: number, options?: AxiosRequestConfig): AxiosPromise<StudentQueriesGetDetailsQueryResult>;

    /**
     * 
     * @summary Öğrencinin dışa aktarılmaya hazır verilerini listeler.
     * @param {string} [lastCreatedAt] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApiInterface
     */
    listMyExportsAsStudent(lastCreatedAt?: string, options?: AxiosRequestConfig): AxiosPromise<StudentQueriesListMyExportsQueryResult>;

    /**
     * 
     * @param {string} [nameSurname] 
     * @param {string} [email] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApiInterface
     */
    loginGoogleAsStudent(nameSurname?: string, email?: string, options?: AxiosRequestConfig): AxiosPromise<StudentCommandsRegisterCommandResult>;

    /**
     * 
     * @summary Apple login işlevini öğrenci hesabı için gerçekleştirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApiInterface
     */
    loginWithAppleAsStudent(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Öğrenci olarak giriş yapmayı sağlar.
     * @param {string} [email] 
     * @param {string} [password] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApiInterface
     */
    loginWithDirectAuthAsStudent(email?: string, password?: string, options?: AxiosRequestConfig): AxiosPromise<StudentCommandsLoginWithDirectAuthCommandResult>;

    /**
     * 
     * @summary Facebook login işlevini öğrenci hesabı için gerçekleştirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApiInterface
     */
    loginWithFacebookAsStudent(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Google login işlevini öğrenci hesabı için gerçekleştirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApiInterface
     */
    loginWithGoogleAsStudent(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary E-posta ve şifre ile öğrenci kaydı yapılabilmesini sağlar.
     * @param {string} [nameSurname] 
     * @param {string} [email] 
     * @param {string} [phoneNumber] 
     * @param {string} [password] 
     * @param {string} [accent] 
     * @param {string} [languageLevel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApiInterface
     */
    registerAsStudent(nameSurname?: string, email?: string, phoneNumber?: string, password?: string, accent?: string, languageLevel?: string, options?: AxiosRequestConfig): AxiosPromise<StudentCommandsRegisterCommandResult>;

    /**
     * 
     * @summary Öğretmenin öğrenciyi rapor etmesini sağlar.
     * @param {number} [studentId] 
     * @param {string} [content] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApiInterface
     */
    reportStudent(studentId?: number, content?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Öğrencinin tüm verisini dışarı aktarma işlemini başlatır. Halihazırda dışa aktarım dosyaları hazırlanıyorsa hata vermelidir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApiInterface
     */
    startToExportMyAllInformationsAsStudent(options?: AxiosRequestConfig): AxiosPromise<StudentCommandsStartToExportMyAllInformationsCommandResult>;

    /**
     * 
     * @summary Öğretmenin öğrencinin engelini kaldırmasını sağlar.
     * @param {number} [studentId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApiInterface
     */
    unblockStudent(studentId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Öğrencinin profil fotoğrafını değiştirmesini sağlar.
     * @param {File} [photo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApiInterface
     */
    updateProfilePhotoAsStudent(photo?: File, options?: AxiosRequestConfig): AxiosPromise<StudentCommandsUpdateProfilePhotoCommandResult>;

    /**
     * 
     * @param {StudentCommandsUpdateMySpecalitiesParemeters} [studentCommandsUpdateMySpecalitiesParemeters] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApiInterface
     */
    updateStudentSpecalities(studentCommandsUpdateMySpecalitiesParemeters?: StudentCommandsUpdateMySpecalitiesParemeters, options?: AxiosRequestConfig): AxiosPromise<object>;

}

/**
 * StudentApi - object-oriented interface
 * @export
 * @class StudentApi
 * @extends {BaseAPI}
 */
export class StudentApi extends BaseAPI implements StudentApiInterface {
    /**
     * 
     * @summary Öğretmenin öğrenciyi engellemesini sağlar.
     * @param {number} [studentId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public blockStudent(studentId?: number, options?: AxiosRequestConfig) {
        return StudentApiFp(this.configuration).blockStudent(studentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğrencinin kendi e-posta adresini değiştirebilmesini sağlar.
     * @param {string} [newEmail] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public changeMyEmailAddress(newEmail?: string, options?: AxiosRequestConfig) {
        return StudentApiFp(this.configuration).changeMyEmailAddress(newEmail, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğrencinin kendi ismini değiştirebilmesini sağlar.
     * @param {string} [newName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public changeMyName(newName?: string, options?: AxiosRequestConfig) {
        return StudentApiFp(this.configuration).changeMyName(newName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğrencinin kendi telefon numarasını değiştirebilmesini sağlar.
     * @param {string} [newPhone] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public changeMyPhoneNumber(newPhone?: string, options?: AxiosRequestConfig) {
        return StudentApiFp(this.configuration).changeMyPhoneNumber(newPhone, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğrencinin hesabının silme isteğini admine mail olarak iletir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public deleteMyAccountAsStudent(options?: AxiosRequestConfig) {
        return StudentApiFp(this.configuration).deleteMyAccountAsStudent(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğrencinin kendi detayını getirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public getMyDetailsAsStudent(options?: AxiosRequestConfig) {
        return StudentApiFp(this.configuration).getMyDetailsAsStudent(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğrencinin detayını getirir.
     * @param {number} studentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public getStudentDetails(studentId: number, options?: AxiosRequestConfig) {
        return StudentApiFp(this.configuration).getStudentDetails(studentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğrencinin dışa aktarılmaya hazır verilerini listeler.
     * @param {string} [lastCreatedAt] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public listMyExportsAsStudent(lastCreatedAt?: string, options?: AxiosRequestConfig) {
        return StudentApiFp(this.configuration).listMyExportsAsStudent(lastCreatedAt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [nameSurname] 
     * @param {string} [email] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public loginGoogleAsStudent(nameSurname?: string, email?: string, options?: AxiosRequestConfig) {
        return StudentApiFp(this.configuration).loginGoogleAsStudent(nameSurname, email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Apple login işlevini öğrenci hesabı için gerçekleştirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public loginWithAppleAsStudent(options?: AxiosRequestConfig) {
        return StudentApiFp(this.configuration).loginWithAppleAsStudent(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğrenci olarak giriş yapmayı sağlar.
     * @param {string} [email] 
     * @param {string} [password] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public loginWithDirectAuthAsStudent(email?: string, password?: string, options?: AxiosRequestConfig) {
        return StudentApiFp(this.configuration).loginWithDirectAuthAsStudent(email, password, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Facebook login işlevini öğrenci hesabı için gerçekleştirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public loginWithFacebookAsStudent(options?: AxiosRequestConfig) {
        return StudentApiFp(this.configuration).loginWithFacebookAsStudent(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Google login işlevini öğrenci hesabı için gerçekleştirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public loginWithGoogleAsStudent(options?: AxiosRequestConfig) {
        return StudentApiFp(this.configuration).loginWithGoogleAsStudent(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary E-posta ve şifre ile öğrenci kaydı yapılabilmesini sağlar.
     * @param {string} [nameSurname] 
     * @param {string} [email] 
     * @param {string} [phoneNumber] 
     * @param {string} [password] 
     * @param {string} [accent] 
     * @param {string} [languageLevel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public registerAsStudent(nameSurname?: string, email?: string, phoneNumber?: string, password?: string, accent?: string, languageLevel?: string, options?: AxiosRequestConfig) {
        return StudentApiFp(this.configuration).registerAsStudent(nameSurname, email, phoneNumber, password, accent, languageLevel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğretmenin öğrenciyi rapor etmesini sağlar.
     * @param {number} [studentId] 
     * @param {string} [content] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public reportStudent(studentId?: number, content?: string, options?: AxiosRequestConfig) {
        return StudentApiFp(this.configuration).reportStudent(studentId, content, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğrencinin tüm verisini dışarı aktarma işlemini başlatır. Halihazırda dışa aktarım dosyaları hazırlanıyorsa hata vermelidir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public startToExportMyAllInformationsAsStudent(options?: AxiosRequestConfig) {
        return StudentApiFp(this.configuration).startToExportMyAllInformationsAsStudent(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğretmenin öğrencinin engelini kaldırmasını sağlar.
     * @param {number} [studentId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public unblockStudent(studentId?: number, options?: AxiosRequestConfig) {
        return StudentApiFp(this.configuration).unblockStudent(studentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Öğrencinin profil fotoğrafını değiştirmesini sağlar.
     * @param {File} [photo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public updateProfilePhotoAsStudent(photo?: File, options?: AxiosRequestConfig) {
        return StudentApiFp(this.configuration).updateProfilePhotoAsStudent(photo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {StudentCommandsUpdateMySpecalitiesParemeters} [studentCommandsUpdateMySpecalitiesParemeters] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public updateStudentSpecalities(studentCommandsUpdateMySpecalitiesParemeters?: StudentCommandsUpdateMySpecalitiesParemeters, options?: AxiosRequestConfig) {
        return StudentApiFp(this.configuration).updateStudentSpecalities(studentCommandsUpdateMySpecalitiesParemeters, options).then((request) => request(this.axios, this.basePath));
    }
}

